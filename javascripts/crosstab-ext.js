/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={rowDimensions:['Product','State'],colDimensions:['Year','Quality','Month'],chartType:'column2d',noDataMessage:'No data to display.',measure:'Sale',measureOnRow:!1,cellWidth:120,cellHeight:100,crosstabContainer:'crosstab-div',aggregation:'sum',chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',chartBottomMargin:'5',chartTopMargin:'5',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#ffffff',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'0',transposeAnimation:'1',alternateHGridAlpha:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#ffffff'}}};window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab();

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){let d=this;this.data=b,this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now(),this.chartType=c.chartType,this.chartConfig=c.chartConfig,this.rowDimensions=c.rowDimensions,this.colDimensions=c.colDimensions,this.dimensions=this.mergeDimensions(),this.measure=c.measure,this.measureOnRow=c.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=c.cellWidth,this.cellHeight=c.cellHeight,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation,this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.mc.addEventListener('dataModified',function(){d.globalData=d.buildGlobalData(),d.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let d=0,e=b.length;d<e;d++)c[b[d]]=this.dataStore.getUniqueValues(b[d]);return c}return!1}createRow(b,c,d,e,f){var n,p,s,u,g=0,h=d[e],m=c[h],o=m.length,q=e<d.length-1,t=this.columnKeyArr.length,v=1/0,w=-(1/0),x={};for(n=0;n<o;n+=1){let y='';if(u=document.createElement('p'),u.innerHTML=m[n],u.style.textAlign='center',u.style.marginTop=(this.cellHeight-10)/2+'px',y+='row-dimensions '+this.rowDimensions[e]+' '+m[n].toLowerCase(),u.style.visibility='hidden',document.body.appendChild(u),this.cornerWidth=10*m[n].length,document.body.removeChild(u),u.style.visibility='visible',p={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:u.outerHTML,className:y},s=f+m[n]+'|',n?b.push([p]):b[b.length-1].push(p),q)p.rowspan=this.createRow(b,c,d,e+1,s);else{for(let B=0;B<t;B+=1){let C={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:s,colHash:this.columnKeyArr[B]};b[b.length-1].push(C),x=this.getChartObj(s,this.columnKeyArr[B])[0],w=parseInt(x.max)>w?x.max:w,v=parseInt(x.min)<v?x.min:v}let z={config:{config:{chart:{dataMin:v,dataMax:w,isAxisOpposite:!0,borderthickness:0,chartBottomMargin:5}}}},A=this.mc.dataadapter(z);b[b.length-1].push({rowspan:1,colspan:1,className:'y-axis-chart',chart:{type:'axis',axisType:'y',width:'100%',height:'100%',dataFormat:'json',configuration:A}})}g+=p.rowspan}return g}createCol(b,c,d,e,f){var n,p,s,t,g=0,h=d[e],m=c[h],o=m.length,q=e<d.length-1;for(b.length<=e&&b.push([]),n=0;n<o;n+=1){let u='';t=document.createElement('p'),t.innerHTML=m[n],t.style.textAlign='center',document.body.appendChild(t),u+='column-dimensions '+this.colDimensions[e]+' '+m[n].toLowerCase(),this.cornerHeight=t.offsetHeight,document.body.removeChild(t),p={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:t.outerHTML,className:u},s=f+m[n]+'|',b[e].push(p),q?p.colspan=this.createCol(b,c,d,e+1,s):this.columnKeyArr.push(s),g+=p.colspan}return g}createRowDimHeading(b,c){var f,d=[],e=0;for(e=0;e<this.rowDimensions.length;e++)f=document.createElement('p'),f.innerHTML=this.rowDimensions[e][0].toUpperCase()+this.rowDimensions[e].substr(1),f.style.textAlign='center',f.style.marginTop=(30*this.colDimensions.length-15)/2+'px',d.push({width:10*this.rowDimensions[e],height:30*this.colDimensions.length,rowspan:c,colspan:1,html:f.outerHTML,className:'corner-cell'});return d}createColDimHeading(b,c){for(var e,d=c;d<b.length;d++)e=document.createElement('p'),e.innerHTML=this.colDimensions[d][0].toUpperCase()+this.colDimensions[d].substr(1),e.style.textAlign='center',b[d].push({width:10*this.colDimensions[d].length,height:30,rowspan:1,colspan:1,html:e.outerHTML,className:'corner-cell'});return b}createCaption(b,c){let d=this.mc.dataadapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:d}}]),b}createCrosstab(){var b=this,c=this.globalData,d=this.rowDimensions.filter(function(n,o,p){if(!b.measureOnRow)return!0;else if(n!==p[p.length-1])return!0}),e=this.colDimensions.filter(function(n,o,p){if(b.measureOnRow)return!0;return n!==p[p.length-1]||void 0}),f=[],g=[],h=0,m=0;if(c){for(f.push(this.createRowDimHeading(f,e.length)),this.createCol(f,c,e,0,''),f=this.createColDimHeading(f,0),f.push([]),this.createRow(f,c,d,0,''),h=0;h<f.length;h++)m=m<f[h].length?f[h].length:m;for(h=0;h<this.rowDimensions.length;h++)g.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});for(h=0;h<m-1-this.rowDimensions.length;h++){let n=this.globalData[this.colDimensions[this.colDimensions.length-1]],o=this.mc.dataadapter({config:{config:{chart:{borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:n}}});g.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',axisType:'x',configuration:o}})}f.push(g),f=this.createCaption(f,m),this.columnKeyArr=[]}else f.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.rowDimensions.length*this.colDimensions.length}]);return f}rowDimReorder(b,c){var e,d='',f=this.rowDimensions;if(!0===this.measureOnRow&&f.splice(f.length-1,1),f.indexOf(Math.max(b,c))>=f.length)return'wrong index';if(b>c){for(d=f[b],e=b-1;e>=c;e--)f[e+1]=f[e];f[c]=d}else if(b<c){for(d=f[b],e=b+1;e<=c;e++)f[e-1]=f[e];f[c]=d}this.createCrosstab()}colDimReorder(b,c){var e,d='',f=this.colDimensions;if(!1===this.measureOnRow&&f.splice(f.length-1,1),f.indexOf(Math.max(b,c))>=f.length)return'wrong index';if(b>c){for(d=f[b],e=b-1;e>=c;e--)f[e+1]=f[e];f[c]=d}else if(b<c){for(d=f[b],e=b+1;e<=c;e++)f[e-1]=f[e];f[c]=d}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,d=this.rowDimensions.length;c<d;c++)b.push(this.rowDimensions[c]);for(let c=0,d=this.colDimensions.length;c<d;c++)b.push(this.colDimensions[c]);return b}createFilters(){let b=[];for(let c=0,d=this.dimensions.length;c<d;c++)if(this.measureOnRow&&this.dimensions[c]!==this.rowDimensions[this.rowDimensions.length-1]){let e=this.globalData[this.dimensions[c]];for(let f=0,g=e.length;f<g;f++)b.push({filter:this.filterGen(this.dimensions[c],e[f].toString()),filterVal:e[f]})}else if(!this.measureOnRow&&this.dimensions[c]!==this.colDimensions[this.colDimensions.length-1]){let e=this.globalData[this.dimensions[c]];for(let f=0,g=e.length;f<g;f++)b.push({filter:this.filterGen(this.dimensions[c],e[f].toString()),filterVal:e[f]})}return b}createDataCombos(){function b(f,g){for(let m=0,n=d[g].length;m<n;m++){var h=f.slice(0);h.push(d[g][m]),g===e?c.push(h):b(h,g+1)}}let c=[],d=this.makeGlobalArray(),e=d.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let d in this.globalData)this.globalData.hasOwnProperty(d)&&d!==this.measure&&(this.measureOnRow&&d!==this.rowDimensions[this.rowDimensions.length-1]?b[d]=this.globalData[d]:!this.measureOnRow&&d!==this.colDimensions[this.colDimensions.length-1]&&(b[d]=this.globalData[d]));return c=Object.keys(b).map(d=>b[d]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),d={};for(let e=0,f=c.length;e<f;e++){let g=c[e],h='',m=[];for(let n=0,o=g.length;n<o;n++)for(let p=0,q=b.length;p<q;p++){let s=b[p].filterVal;g[n]===s&&(h+=0===n?g[n]:'|'+g[n],m.push(b[p].filter))}d[h]=m}return d}renderCrosstab(){let b=this.createCrosstab(),c=this.createMultiChart(b),d=performance.now();for(let e=0,f=c.length;e<f;e++){let g=c[e];for(let h=0,m=g.length;h<m;h++){let n=g[h],o=b[e][h],p=g[g.length-1];if(!(o.hasOwnProperty('chart')||o.hasOwnProperty('html'))&&'blank-cell'!==o.className){let q=p.chart.chartObj.getLimits(),s=q[0],t=q[1],u=this.getChartObj(o.rowHash,o.colHash)[1];u.configuration.FCjson.chart.yAxisMinValue=s,u.configuration.FCjson.chart.yAxisMaxValue=t,n.config.chart=u,o.chart=u,window.ctPerf+=performance.now()-d,n.update(n.config)}d=performance.now()}}this.mc.addEventListener('hoverin',(e,f)=>{// debugger;
	if(!(200>new Date().getTime()-window.time)&&(window.time=new Date().getTime(),f.data))for(let h=0,m=c.length;h<m;h++){let n=b[h];for(var g=0;g<n.length;g++)if(n[g].chart&&'caption'!==n[g].chart.type&&'axis'!==n[g].chart.type){let o=n[g].chart.configuration,p=this.dimensions[this.dimensions.length-1],q=f.data[p];// console.log(cellAdapter, category, categoryVal);
	o.highlight(q)}}})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(b),this.multichartObject.placeHolder}permuteArr(b){function c(f,g){let h;g=g||[];for(let m=0,n=f.length;m<n;m++)h=f.splice(m,1),0===f.length&&d.push(g.concat(h).join('|')),c(f.slice(),g.concat(h)),f.splice(m,0,h[0]);return d}let d=[];var e=c(b);return e.join('*!%^')}matchHash(b,c){for(var d in c)if(c.hasOwnProperty(d)){let e=d.split('|'),f=this.permuteArr(e).split('*!%^');if(-1!==f.indexOf(b))return f[0];continue}return!1}getChartObj(b,c){let d=[],e='',f=b.split('|'),g=c.split('|'),h=[],m={},n=[],o=[],p=-(1/0),q=1/0,s={},t={},u={},v=this.globalData[this.colDimensions[this.colDimensions.length-1]];if(f.push.apply(f,g),d=f.filter(w=>{return''!==w}),e=d.join('|'),n=this.hash[this.matchHash(e,this.hash)],n){for(let w=0,x=n.length;w<x;w++)m=this.mc.createDataProcessor(),m.filter(n[w]),h.push(m);s=this.dataStore.getData(h),s=s[s.length-1],o=s.getJSON();for(let w=0,x=o.length;w<x;w++)o[w][this.measure]>p&&(p=o[w][this.measure]),o[w][this.measure]<q&&(q=o[w][this.measure]);return t={config:{dimension:this.measureOnRow?[this.rowDimensions[this.rowDimensions.length-1]]:[this.colDimensions[this.colDimensions.length-1]],measure:[this.measure],seriesType:'SS',aggregateMode:this.aggregation,categories:v,config:this.chartConfig},datastore:s},u=this.mc.dataadapter(t),[{max:p,min:q},{type:this.chartType,width:'100%',height:'100%',jsonData:o,configuration:u}]}}filterGen(b,c){return d=>d[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,