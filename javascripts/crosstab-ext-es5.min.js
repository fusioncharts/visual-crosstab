!function(t){function e(r){if(a[r])return a[r].exports;var i=a[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=e(1),i=e(2),o={dimensions:["Product","State","Month"],measures:["Sale","Profit","Visitors"],measureUnits:["INR","$",""],unitFunction:function(t){return"("+t+")"},chartType:"bar2d",noDataMessage:"No data to display.",crosstabContainer:"crosstab-div",dataIsSortable:!0,cellWidth:150,cellHeight:80,draggableHeaders:!1,aggregation:"min",chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#badaf0",columnHoverColor:"#1b83cc",chartBottomMargin:"2",chartTopMargin:"2",chartLeftMargin:"5",chartRightMargin:"7",zeroPlaneThickness:"0",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"0",alternateVGridAlpha:"0",paletteColors:"#5B5B5B",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",canvasBorderThickness:"0",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new r(i,o),window.crosstab.renderCrosstab()):t.exports=r},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),r=function(){function t(a,r){if(e(this,t),this.data=a,this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.storeParams={data:a,config:r},this._columnKeyArr=[],this.measures=r.measures,this.chartType=r.chartType,this.dimensions=r.dimensions,this.chartConfig=r.chartConfig,this.measureUnits=r.measureUnits,this.dataIsSortable=r.dataIsSortable,this.crosstabContainer=r.crosstabContainer,this.cellWidth=r.cellWidth||210,this.cellHeight=r.cellHeight||113,this.showFilter=r.showFilter||!1,this.aggregation=r.aggregation||"sum",this.draggableHeaders=r.draggableHeaders||!1,this.noDataMessage=r.noDataMessage||"No data to display.",this.unitFunction=r.unitFunction||function(t){return"("+t+")"},"function"!=typeof MultiCharting)throw new Error("MultiChartng module not found.");if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.dataStore.updateMetaData("Sale",{type:"measure",scaleType:"nominal",dataType:"number",discrete:"true",precision:2,aggregationMode:"sum",unit:"INR"}),this.showFilter){if("function"!=typeof FCDataFilterExt)throw new Error("DataFilter module not found.");var i={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,i,"control-box")}this.globalData=this.buildGlobalData(),this.hash=this.getFilterHashMap(),this.chartsAreSorted={bool:!1,order:"",measure:""}}return a(t,[{key:"buildGlobalData",value:function(){var t=this.dataStore,e=t.getKeys();if(e){for(var a={},r=0,i=e.length;r<i;r++)a[e[r]]=t.getUniqueValues(e[r]);return this.categories=a[this.dimensions[this.dimensions.length-1]],a}throw new Error("Could not generate keys from data store")}},{key:"createRow",value:function(t,e,a,r,i){var o,s,n,h,l=0,c=a[r],d=e[c],u=d.length,g=r<a.length-1,p=this._columnKeyArr.length,f=1/0,m=-(1/0),y={};for(0===r&&t.push([]),o=0;o<u;o+=1){var v="";if(h=document.createElement("p"),h.innerHTML=d[o],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",v+="row-dimensions "+this.dimensions[r].toLowerCase()+" "+d[o].toLowerCase()+" no-select",h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*d[o].length,document.body.removeChild(h),h.style.visibility="visible",s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:v},n=i+d[o]+"|",o?t.push([s]):t[t.length-1].push(s),g)s.rowspan=this.createRow(t,e,a,r+1,n);else{"bar2d"===this.chartType?t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"vertical-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,isHorizontal:0,chartTopMargin:this.chartConfig.chart.chartTopMargin,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,valuePadding:.5},categories:this.categories.reverse()}})}):t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"vertical-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y"}}})});for(var S=0;S<p;S+=1){var M={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:n,colHash:this._columnKeyArr[S],className:"chart-cell "+(S+1)};S===p-1&&(M.className="chart-cell last-col"),t[t.length-1].push(M),y=this.getChartObj(this.dataStore,this.categories,n,this._columnKeyArr[S])[0],m=parseInt(y.max)>m?y.max:m,f=parseInt(y.min)<f?y.min:f,M.max=m,M.min=f}}l+=s.rowspan}return l}},{key:"createMeasureHeadings",value:function(t,e,a){var r,i,o,s,n,h,l,c,d,u,g=0,p=this.measures.length;for(r=0;r<p;r+=1){var f="",m=a[r],y="",v=void 0;d=document.createElement("div"),d.style.textAlign="center",u=document.createElement("div"),u.setAttribute("class","measure-drag-handle"),u.style.height="5px",u.style.paddingTop="3px",u.style.paddingBottom="1px",this.appendDragHandle(u,25),c=document.createElement("div"),c.style.position="relative",c.setAttribute("data-measure",m),y=this.measureUnits[this.measures.indexOf(m)],l=y.length>0?m+" "+this.unitFunction(y):m,h=document.createElement("span"),h.setAttribute("class","measure-span"),n=document.createElement("div"),n.innerHTML=l,n.setAttribute("class","measure-text"),h.appendChild(n),v=document.createElement("div"),v.innerHTML=this.aggregation.split("").reduce(function(t,e,a){return 1===a?t.toUpperCase()+e:t+e}),v.setAttribute("class","measure-aggregation"),h.appendChild(v),this.dataIsSortable?(o=this.createSortButton("ascending-sort"),c.appendChild(o),s=this.createSortButton("descending-sort"),c.appendChild(s),c.appendChild(o),c.appendChild(h),c.appendChild(s)):c.appendChild(h),c.style.textAlign="center",c.style.marginTop="5px",document.body.appendChild(c),f+="column-measures "+this.measures[r].toLowerCase()+" no-select",this.draggableHeaders&&(f+=" draggable"),this.cornerHeight=c.offsetHeight,document.body.removeChild(c),d.appendChild(u),d.appendChild(c),i={width:this.cellWidth,height:this.cornerHeight+5,rowspan:1,colspan:1,html:d.outerHTML,className:f},this._columnKeyArr.push(this.measures[r]),t[0].push(i)}return g}},{key:"createDimensionHeadings",value:function(t){var e,a,r,i=[],o=0,s="";for(o=0;o<this.dimensions.length-1;o++)a=document.createElement("div"),a.style.textAlign="center",r=document.createElement("div"),r.setAttribute("class","dimension-drag-handle"),r.style.height="5px",r.style.paddingTop="3px",r.style.paddingBottom="1px",this.appendDragHandle(r,25),e=document.createElement("p"),e.innerHTML=this.dimensions[o][0].toUpperCase()+this.dimensions[o].substr(1),e.style.textAlign="center",e.style.marginTop="5px",s="dimension-header "+this.dimensions[o].toLowerCase()+" no-select",this.draggableHeaders&&(s+=" draggable"),a.appendChild(r),a.appendChild(e),i.push({width:10*this.dimensions[o].length,height:35,rowspan:1,colspan:1,html:a.outerHTML,className:s});return i}},{key:"createVerticalAxisHeader",value:function(){var t=document.createElement("p");return t.innerHTML="",t.style.textAlign="center",{width:40,height:35,rowspan:1,colspan:1,html:t.outerHTML,className:"axis-header-cell"}}},{key:"createCaption",value:function(t){return[{height:50,rowspan:1,colspan:t,className:"caption-chart",chart:this.mc.chart({type:"caption",width:"100%",height:"100%",dataFormat:"json",config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}})}]}},{key:"createCrosstab",value:function(){var t=this.globalData,e=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),a=this.measures.filter(function(t,e,a){if(t!==a[a.length])return!0}),r=[],i=[],o=0,s=0;if(t){for(r.push(this.createDimensionHeadings(r,a.length)),r[0].push(this.createVerticalAxisHeader()),this.createMeasureHeadings(r,t,this.measures),this.createRow(r,t,e,0,""),o=0;o<r.length;o++)s=s<r[o].length?r[o].length:s;for(o=0;o<this.dimensions.length-1;o++)i.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(i.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),o=0;o<s-this.dimensions.length;o++)"bar2d"===this.chartType?i.push({width:"100%",height:20,rowspan:1,colspan:1,className:"horizontal-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y",isHorizontal:1}}})}):i.push({width:"100%",height:20,rowspan:1,colspan:1,className:"horizontal-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,valuePadding:.5},categories:this.categories}})});r.push(i),r.unshift(this.createCaption(s)),this._columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"createFilters",value:function(){var t=this,e=[],a=this.dimensions.slice(0,this.dimensions.length-1),r=void 0;return a.forEach(function(a){r=t.globalData[a],r.forEach(function(r){e.push({filter:t.filterGen(a,r.toString()),filterVal:r})})}),e}},{key:"createDataCombos",value:function(){function t(i,o){for(var s=0,n=a[o].length;s<n;s++){var h=i.slice(0);h.push(a[o][s]),o===r?e.push(h):t(h,o+1)}}var e=[],a=this.makeGlobalArray(),r=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&this.dimensions.indexOf(a)!==-1&&a!==this.dimensions[this.dimensions.length-1]&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},r=0,i=e.length;r<i;r++){for(var o=e[r],s="",n=[],h=0,l=o.length;h<l;h++)for(var c=0,d=t.length;c<d;c++){var u=t[c].filterVal;o[h]===u&&(s+=0===h?o[h]:"|"+o[h],n.push(t[c].filter))}a[s]=n}return a}},{key:"appendDragHandle",value:function(t,e){var a=void 0,r=void 0;for(a=0;a<e;a++)r=document.createElement("span"),r.style.marginLeft="1px",r.style.fontSize="3px",r.style.lineHeight="1",r.style.verticalAlign="top",t.appendChild(r)}},{key:"createSortButton",value:function(t){var e=void 0,a="sort-btn "+(t||"");return e=document.createElement("span"),e.setAttribute("class",a.trim()),e.style.position="absolute",e.style.display="inline-block","ascending-sort"===t?this.appendAscendingSteps(e,4):"descending-sort"===t&&this.appendDescendingSteps(e,4),e}},{key:"appendAscendingSteps",value:function(t,e){var a=void 0,r=void 0,i=2,o=1;for(a=1;a<=e;a++)r=document.createElement("span"),r.style.display="block",r.className="sort-steps ascending",o+=a/o*4,r.style.width=o.toFixed()+"px",a===e-1?r.style.marginTop=i+"px":r.style.marginTop=i+"px",t.appendChild(r)}},{key:"appendDescendingSteps",value:function(t,e){var a=void 0,r=void 0,i=2,o=10;for(a=1;a<=e;a++)r=document.createElement("span"),r.style.display="block",r.className="sort-steps descending",o-=a/o*5,r.style.width=o.toFixed()+"px",a===e-1?r.style.marginTop=i+"px":r.style.marginTop=i+"px",t.appendChild(r)}},{key:"renderCrosstab",value:function(){var t=this,e=-(1/0),a=1/0,r=void 0;this.crosstab=this.createCrosstab();for(var i=0,o=this.crosstab.length;i<o;i++){var s=this.crosstab[i][this.crosstab[i].length-1];(s.max||s.min)&&(e<s.max&&(e=s.max),a>s.min&&(a=s.min))}for(var n=0,h=this.crosstab.length;n<h;n++)for(var l=this.crosstab[n],c=void 0,d=0,u=l.length;d<u;d++){var g=l[d];if(g.chart&&"axis"===g.chart.conf.type&&(c=g,"y"===c.chart.conf.config.chart.axisType)){var p=c.chart,f=p.conf;f.config.chart={dataMin:a,axisType:"y",dataMax:e,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(f.config.chart={dataMin:a,axisType:"y",dataMax:e,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),p=this.mc.chart(f),c.chart=p}}this.createMultiChart(this.crosstab),r=r||this.findYAxisChart();for(var m=0,y=this.crosstab.length;m<y;m++)for(var v=this.crosstab[m],S=0,M=v.length;S<M;S++){var b=v[S];if(r&&!b.hasOwnProperty("html")&&!b.hasOwnProperty("chart")&&"blank-cell"!==b.className&&"axis-footer-cell"!==b.className){var P=r.chart,x=P.getChartInstance(),C=x.getLimits(),w=C[0],B=C[1],A=this.getChartObj(this.dataStore,this.categories,b.rowHash,b.colHash,w,B)[1];b.chart=A}}this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,function(e,a){t.globalData=t.buildGlobalData(),t.updateCrosstab()}),this.mc.addEventListener("hoverin",function(e,a){if(a.data)for(var r=0,i=t.crosstab.length;r<i;r++)for(var o=t.crosstab[r],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart,h=t.dimensions[t.dimensions.length-1],l=a.data[h];n.highlight(l)}}),this.mc.addEventListener("hoverout",function(e,a){for(var r=0,i=t.crosstab.length;r<i;r++)for(var o=t.crosstab[r],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart;n.highlight()}})}},{key:"updateCrosstab",value:function(){var t=this.createCrosstab(),e=void 0,a=void 0,r=void 0,i=void 0,o=[],s=-(1/0),n=1/0,h=[];for(e=0,a=this.crosstab.length;e<a;e++){var l=this.crosstab[e];for(r=0,i=l.length;r<i;r++){var c=l[r];if(c.chart){var d=c.chart.getConf();"caption"!==d.type&&"axis"!==d.type&&o.push(c)}}}for(e=0,a=t.length;e<a;e++){var u=t[e];for(r=0,i=u.length;r<i;r++){var g=u[r];if(g.rowHash&&g.colHash){var p=this.getOldChart(o,g.rowHash,g.colHash),f={};if(!p){var m=this.getChartObj(this.dataStore,this.categories,g.rowHash,g.colHash);p=m[1],f=m[0]}g.chart=p,0!==Object.keys(f).length&&(g.max=f.max,g.min=f.min)}}}for(e=0,a=t.length;e<a;e++){var y=t[e];for(r=0,i=y.length;r<i;r++){var v=y[r];(v.max||v.min)&&(s<v.max&&(s=v.max),n>v.min&&(n=v.min))}}for(e=0,a=t.length;e<a;e++){var S=t[e];for(r=0,i=S.length;r<i;r++){var M=S[r];if(M.chart&&"axis"===M.chart.conf.type){var b=M;if("y"===b.chart.conf.config.chart.axisType){var P=b.chart,x=P.conf;x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),P=this.mc.chart(x),b.chart=P}}}}this.crosstab=t,this.createMultiChart(),h=this.getYAxisLimits();for(var C=0,w=this.crosstab.length;C<w;C++)for(var B=this.crosstab[C],A=0,V=B.length;A<V;A++){var Y=B[A];if(!Y.hasOwnProperty("html")&&"blank-cell"!==Y.className&&"axis-footer-cell"!==Y.className&&"caption"!==Y.chart.getConf().type&&"axis"!==Y.chart.getConf().type){var Q=this.getChartObj(this.dataStore,this.categories,Y.rowHash,Y.colHash,h[0],h[1])[1];Y.chart.update(Q.getConf())}}}},{key:"findYAxisChart",value:function(){for(var t=0,e=this.crosstab.length;t<e;t++)for(var a=this.crosstab[t],r=0,i=a.length;r<i;r++){var o=a[r];if(o.chart&&"y"===o.chart.conf.config.chart.axisType)return o}}},{key:"getYAxisLimits",value:function(){var t=void 0,e=void 0,a=void 0,r=void 0;for(t=0,e=this.crosstab.length;t<e;t++){var i=this.crosstab[t];for(a=0,r=i.length;a<r;a++){var o=i[a];if(o.chart){var s=o.chart.getConf();if("axis"===s.type&&"y"===s.config.chart.axisType)return o.chart.getChartInstance().getLimits()}}}}},{key:"getOldChart",value:function(t,e,a){for(var r=t.length-1;r>=0;r--)if(t[r].rowHash===e&&t[r].colHash===a)return t[r].chart}},{key:"sortCharts",value:function(t,e){var a=this,r=this.mc.createDataProcessor(),i=void 0,o=void 0;i="ascending"===e?function(e,a){return e[t]-a[t]}:"descending"===e?function(e,a){return a[t]-e[t]}:function(t,e){return 0},r.sort(i),o=this.dataStore.getChildModel(r),this.crosstab.forEach(function(t){var e=void 0;t.forEach(function(t){if(t.chart){var r=t.chart,i=r.getConf();if("caption"!==i.type&&"axis"!==i.type){var s=a.getChartObj(o,a.categories,t.rowHash,t.colHash);r.update(s[1].getConf()),e=r.getConf().categories}}}),t.forEach(function(t){if(t.chart){var r=t.chart,i=r.getConf();if("axis"===i.type){var o=i.config.chart.axisType;"x"===o&&("bar2d"===a.chartType?i.config.categories=e.reverse():i.config.categories=e,r.update(i))}}})})}},{key:"createMultiChart",value:function(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.dataIsSortable&&this.setupSortButtons(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,r){var i=void 0;r=r||[];for(var o=0,s=t.length;o<s;o++)i=t.splice(o,1),0===t.length&&a.push(r.concat(i).join("|")),e(t.slice(),r.concat(i)),t.splice(o,0,i[0]);return a}var a=[],r=e(t);return r.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var r=a.split("|"),i=this.permuteArr(r).split("*!%^");if(i.indexOf(t)!==-1)return i[0]}else;return!1}},{key:"getChartObj",value:function(t,e,a,r,i,o){var s=this,n=[],h="",l=a.split("|"),c=[],d={},u=[],g={},p={},f={};if(l.push.apply(l),n=l.filter(function(t){return""!==t}),h=n.join("|"),u=this.hash[this.matchHash(h,this.hash)]){for(var m=0,y=u.length;m<y;m++)d=this.mc.createDataProcessor(),d.filter(u[m]),c.push(d);return g=t.getChildModel(c),void 0!==i&&void 0!==o&&(this.chartConfig.chart.yAxisMinValue=i,this.chartConfig.chart.yAxisMaxValue=o),this.dataIsSortable&&!function(){var t=g.getJSON(),a=[];t.forEach(function(t){var e=t[s.dimensions[s.dimensions.length-1]];a.indexOf(e)===-1&&a.push(e)}),e=a.slice()}(),f=this.mc.chart({dataSource:g,type:this.chartType,width:"100%",height:"100%",dimension:[this.dimensions[this.dimensions.length-1]],measure:[r],seriesType:"SS",aggregateMode:this.aggregation,categories:e,config:this.chartConfig}),p=f.getLimit(),[{max:p.max,min:p.min},f]}}},{key:"setupSortButtons",value:function(){var t=this,e=document.getElementsByClassName("ascending-sort"),a=e.length,r=void 0,i=document.getElementsByClassName("descending-sort"),o=e.length,s=void 0,n=document.getElementsByClassName("sort-btn");for(r=0;r<a;r++){var h=e[r];h.addEventListener("mousedown",function(e){var a=void 0,r=void 0,i=void 0;a=e.target.className.split(" ").indexOf("sort-steps")!==-1?e.target.parentNode:e.target,r=a.parentNode.getAttribute("data-measure"),i=a.className+" active",e.stopPropagation();for(var o=n.length-1;o>=0;o--)t.removeActiveClass(n[o]);if(a.setAttribute("class",i),t.chartsAreSorted.bool){var s=a.className.split(" ");r===t.chartsAreSorted.measure&&s.indexOf(t.chartsAreSorted.order)!==-1?(t.sortCharts(),t.chartsAreSorted={bool:!1,order:"",measure:""},t.removeActiveClass(a)):(t.sortCharts(r,"ascending"),t.chartsAreSorted={bool:!0,order:"ascending-sort",measure:r})}else t.sortCharts(r,"ascending"),t.chartsAreSorted={bool:!0,order:"ascending-sort",measure:r}})}for(s=0;s<o;s++){var l=i[s];l.addEventListener("mousedown",function(e){var a=void 0,r=void 0,i=void 0;a=e.target.className.split(" ").indexOf("sort-steps")!==-1?e.target.parentNode:e.target,r=a.parentNode.getAttribute("data-measure"),i=a.className+" active",e.stopPropagation();for(var o=n.length-1;o>=0;o--)t.removeActiveClass(n[o]);if(a.setAttribute("class",i),t.chartsAreSorted.bool){var s=a.className.split(" ");r===t.chartsAreSorted.measure&&s.indexOf(t.chartsAreSorted.order)!==-1?(t.sortCharts(),t.chartsAreSorted={bool:!1,order:"",measure:""},t.removeActiveClass(a)):(t.sortCharts(r,"descending"),t.chartsAreSorted={bool:!0,order:"descending-sort",measure:r})}else t.sortCharts(r,"descending"),t.chartsAreSorted={bool:!0,order:"descending-sort",measure:r}})}}},{key:"removeActiveClass",value:function(t){var e=t.className.split(" ").filter(function(t){return"active"!==t}).join(" ");t.setAttribute("class",e)}},{key:"addActiveClass",value:function(t){var e=t.className.split(" ");e.push("active"),e=e.join(" "),t.setAttribute("class",e)}},{key:"dragListener",value:function(t){function e(t,e,r,i){var o=0,s=0,n=r-1,h=Math.log2;t[0]&&(o=parseInt(t[0].graphics.style.left),s=parseInt(t[n].graphics.style.left));for(var l=function(n){var l=t[n].graphics,d=t[n],u=0,g=0;d.cellValue=e[n],d.origLeft=parseInt(l.style.left),d.redZone=d.origLeft+parseInt(l.style.width)/2,d.index=n,d.adjust=0,d.origZ=l.style.zIndex,c._setupDrag(d.graphics,function(e,r){u=d.origLeft+e+d.adjust,u<o&&(g=o-u,u=o-h(g)),u>s&&(g=u-s,u=s+h(g)),l.style.left=u+"px",l.style.zIndex=1e3,a(d.index,!1,t),a(d.index,!0,t)},function(){var e=!1,a=0;for(d.adjust=0,l.style.zIndex=d.origZ,l.style.left=d.origLeft+"px";a<r;++a)i[a]!==t[a].cellValue&&(i[a]=t[a].cellValue,e=!0);e&&window.setTimeout(function(){c.globalData=c.buildGlobalData(),c.updateCrosstab()},10)})},d=0;d<r;++d)l(d)}function a(t,e,a){var r=[],i=a[t],o=e?t+1:t-1,s=a[o];s&&(r.push(!e&&parseInt(i.graphics.style.left)<s.redZone),r.push(r.pop()||e&&parseInt(i.graphics.style.left)>s.origLeft),r.pop()&&(r.push(s.redZone),r.push(s.origLeft),r.push(s.index),e?i.adjust-=parseInt(s.graphics.style.width):i.adjust+=parseInt(s.graphics.style.width),s.origLeft=i.origLeft,s.redZone=i.redZone,s.index=i.index,s.graphics.style.left=s.origLeft+"px",r.push(a[o]),a[o]=a[t],a[t]=r.pop())),3===r.length&&(i.index=r.pop(),i.origLeft=r.pop(),i.redZone=r.pop())}var r=this.storeParams.config,i=r.dimensions||[],o=r.measures||[],s=o.length,n=0,h=void 0,l=void 0,c=this;t=t[1],i=i.slice(0,i.length-1),n=i.length,h=t.slice(0,n),l=t.slice(n+1,n+s+1),e(h,i,n,this.dimensions),e(l,o,s,this.measures)}},{key:"_setupDrag",value:function(t,e,a){function r(t){e(t.clientX-o,t.clientY-s)}function i(e){t.style.opacity=1,t.classList.remove("dragging"),window.document.removeEventListener("mousemove",r),window.document.removeEventListener("mouseup",i),window.setTimeout(a,10)}var o=0,s=0;t.addEventListener("mousedown",function(e){var a=e.target,n=a.className;""!==a.className&&n.split(" ").indexOf("sort-btn")!==-1||(o=e.clientX,s=e.clientY,t.style.opacity=.8,t.classList.add("dragging"),window.document.addEventListener("mousemove",r),window.document.addEventListener("mouseup",i))})}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=r},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,