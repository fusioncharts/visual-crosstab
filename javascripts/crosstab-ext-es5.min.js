!function(t){function e(i){if(a[i])return a[i].exports;var r=a[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(1),r=e(2),o={dimensions:["Product","State","Month"],measures:["Sale","Profit","Visitors"],chartType:"bar2d",noDataMessage:"No data to display.",crosstabContainer:"crosstab-div",dataIsSortable:!0,cellWidth:150,cellHeight:80,draggableHeaders:!0,chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#badaf0",columnHoverColor:"#1b83cc",chartBottomMargin:"2",chartTopMargin:"2",chartLeftMargin:"5",chartRightMargin:"7",zeroPlaneThickness:"0",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"0",alternateVGridAlpha:"0",paletteColors:"#5B5B5B",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",canvasBorderThickness:"0",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new i(r,o),window.crosstab.renderCrosstab()):t.exports=i},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),i=function(){function t(a,i){if(e(this,t),this.data=a,this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.storeParams={data:a,config:i},this._columnKeyArr=[],this.measures=i.measures,this.chartType=i.chartType,this.dimensions=i.dimensions,this.chartConfig=i.chartConfig,this.dataIsSortable=i.dataIsSortable,this.crosstabContainer=i.crosstabContainer,this.cellWidth=i.cellWidth||210,this.cellHeight=i.cellHeight||113,this.showFilter=i.showFilter||!1,this.aggregation=i.aggregation||"sum",this.draggableHeaders=i.draggableHeaders||!1,this.noDataMessage=i.noDataMessage||"No data to display.","function"!=typeof MultiCharting)throw new Error("MultiChartng module not found.");if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.showFilter){if("function"!=typeof FCDataFilterExt)throw new Error("DataFilter module not found.");var r={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,r,"control-box")}this.globalData=this.buildGlobalData(),this.hash=this.getFilterHashMap(),this.chartsAreSorted=!1}return a(t,[{key:"buildGlobalData",value:function(){var t=this.dataStore,e=t.getKeys();if(e){for(var a={},i=0,r=e.length;i<r;i++)a[e[i]]=t.getUniqueValues(e[i]);return this.categories=a[this.dimensions[this.dimensions.length-1]],a}throw new Error("Could not generate keys from data store")}},{key:"createRow",value:function(t,e,a,i,r){var o,s,n,h,l=0,c=a[i],d=e[c],u=d.length,g=i<a.length-1,f=this._columnKeyArr.length,p=1/0,m=-(1/0),y={};for(0===i&&t.push([]),o=0;o<u;o+=1){var v="";if(h=document.createElement("p"),h.innerHTML=d[o],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",v+="row-dimensions "+this.dimensions[i].toLowerCase()+" "+d[o].toLowerCase()+" no-select",h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*d[o].length,document.body.removeChild(h),h.style.visibility="visible",s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:v},n=r+d[o]+"|",o?t.push([s]):t[t.length-1].push(s),g)s.rowspan=this.createRow(t,e,a,i+1,n);else{"bar2d"===this.chartType?t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"vertical-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,isHorizontal:0,chartTopMargin:this.chartConfig.chart.chartTopMargin,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,valuePadding:.5},categories:this.categories.reverse()}})}):t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"vertical-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y"}}})});for(var S=0;S<f;S+=1){var M={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:n,colHash:this._columnKeyArr[S],className:"chart-cell "+(S+1)};S===f-1&&(M.className="chart-cell last-col"),t[t.length-1].push(M),y=this.getChartObj(this.dataStore,this.categories,n,this._columnKeyArr[S])[0],m=parseInt(y.max)>m?y.max:m,p=parseInt(y.min)<p?y.min:p,M.max=m,M.min=p}}l+=s.rowspan}return l}},{key:"createMeasureHeadings",value:function(t,e,a){var i,r,o,s,n,h,l,c,d=0,u=this.measures.length;for(i=0;i<u;i+=1){var g="",f=a[i];l=document.createElement("div"),l.style.textAlign="center",c=document.createElement("div"),c.setAttribute("class","measure-drag-handle"),c.style.height="5px",c.style.paddingTop="3px",c.style.paddingBottom="1px",this.appendDragHandle(c,25),h=document.createElement("p"),h.style.position="relative",o=this.createSortButton("ascending-sort"),h.appendChild(o),s=this.createSortButton("descending-sort"),h.appendChild(s),n=document.createTextNode(f),h.appendChild(o),h.appendChild(n),h.appendChild(s),h.style.textAlign="center",h.style.marginTop="5px",document.body.appendChild(h),g+="column-measures "+this.measures[i].toLowerCase()+" no-select",this.draggableHeaders&&(g+=" draggable"),this.cornerHeight=h.offsetHeight,document.body.removeChild(h),l.appendChild(c),l.appendChild(h),r={width:this.cellWidth,height:35,rowspan:1,colspan:1,html:l.outerHTML,className:g},this._columnKeyArr.push(this.measures[i]),t[0].push(r)}return d}},{key:"createDimensionHeadings",value:function(t){var e,a,i,r=[],o=0,s="";for(o=0;o<this.dimensions.length-1;o++)a=document.createElement("div"),a.style.textAlign="center",i=document.createElement("div"),i.setAttribute("class","dimension-drag-handle"),i.style.height="5px",i.style.paddingTop="3px",i.style.paddingBottom="1px",this.appendDragHandle(i,25),e=document.createElement("p"),e.innerHTML=this.dimensions[o][0].toUpperCase()+this.dimensions[o].substr(1),e.style.textAlign="center",e.style.marginTop="5px",s="dimension-header "+this.dimensions[o].toLowerCase()+" no-select",this.draggableHeaders&&(s+=" draggable"),a.appendChild(i),a.appendChild(e),r.push({width:10*this.dimensions[o].length,height:35,rowspan:1,colspan:1,html:a.outerHTML,className:s});return r}},{key:"createVerticalAxisHeader",value:function(){var t=document.createElement("p");return t.innerHTML="",t.style.textAlign="center",{width:40,height:35,rowspan:1,colspan:1,html:t.outerHTML,className:"axis-header-cell"}}},{key:"createCaption",value:function(t){return[{height:50,rowspan:1,colspan:t,className:"caption-chart",chart:this.mc.chart({type:"caption",width:"100%",height:"100%",dataFormat:"json",config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}})}]}},{key:"createCrosstab",value:function(){var t=this.globalData,e=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),a=this.measures.filter(function(t,e,a){if(t!==a[a.length])return!0}),i=[],r=[],o=0,s=0;if(t){for(i.push(this.createDimensionHeadings(i,a.length)),i[0].push(this.createVerticalAxisHeader()),this.createMeasureHeadings(i,t,this.measures),this.createRow(i,t,e,0,""),o=0;o<i.length;o++)s=s<i[o].length?i[o].length:s;for(o=0;o<this.dimensions.length-1;o++)r.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(r.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),o=0;o<s-this.dimensions.length;o++)"bar2d"===this.chartType?r.push({width:"100%",height:20,rowspan:1,colspan:1,className:"horizontal-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y",isHorizontal:1}}})}):r.push({width:"100%",height:20,rowspan:1,colspan:1,className:"horizontal-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,valuePadding:.5},categories:this.categories}})});i.push(r),i.unshift(this.createCaption(s)),this._columnKeyArr=[]}else i.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return i}},{key:"createFilters",value:function(){var t=this,e=[],a=this.dimensions.slice(0,this.dimensions.length-1),i=void 0;return a.forEach(function(a){i=t.globalData[a],i.forEach(function(i){e.push({filter:t.filterGen(a,i.toString()),filterVal:i})})}),e}},{key:"createDataCombos",value:function(){function t(r,o){for(var s=0,n=a[o].length;s<n;s++){var h=r.slice(0);h.push(a[o][s]),o===i?e.push(h):t(h,o+1)}}var e=[],a=this.makeGlobalArray(),i=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&this.dimensions.indexOf(a)!==-1&&a!==this.dimensions[this.dimensions.length-1]&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},i=0,r=e.length;i<r;i++){for(var o=e[i],s="",n=[],h=0,l=o.length;h<l;h++)for(var c=0,d=t.length;c<d;c++){var u=t[c].filterVal;o[h]===u&&(s+=0===h?o[h]:"|"+o[h],n.push(t[c].filter))}a[s]=n}return a}},{key:"appendDragHandle",value:function(t,e){var a=void 0,i=void 0;for(a=0;a<e;a++)i=document.createElement("span"),i.style.marginLeft="1px",i.style.fontSize="3px",i.style.lineHeight="1",i.style.verticalAlign="top",t.appendChild(i)}},{key:"createSortButton",value:function(t){var e=void 0,a="sort-btn "+(t||"");return e=document.createElement("span"),e.setAttribute("class",a.trim()),e.style.position="absolute","ascending-sort"===t?this.appendAscendingSteps(e,4):"descending-sort"===t&&this.appendDescendingSteps(e,4),e}},{key:"appendAscendingSteps",value:function(t,e){var a=void 0,i=void 0,r=1,o=1;for(a=1;a<=e;a++)i=document.createElement("span"),i.style.display="block",i.className="sort-steps ascending",i.style.borderBottom="1px solid #59595C",o+=a/o*3,i.style.width=o.toFixed()+"px",a===e-1?i.style.marginTop=r+"px":i.style.marginTop=r+"px",t.appendChild(i)}},{key:"appendDescendingSteps",value:function(t,e){var a=void 0,i=void 0,r=1,o=9;for(a=1;a<=e;a++)i=document.createElement("span"),i.style.display="block",i.className="sort-steps descending",i.style.borderBottom="1px solid #59595C",o-=a/o*4,i.style.width=o.toFixed()+"px",a===e-1?i.style.marginTop=r+"px":i.style.marginTop=r+"px",t.appendChild(i)}},{key:"renderCrosstab",value:function(){var t=this,e=-(1/0),a=1/0,i=void 0;this.crosstab=this.createCrosstab();for(var r=0,o=this.crosstab.length;r<o;r++){var s=this.crosstab[r][this.crosstab[r].length-1];(s.max||s.min)&&(e<s.max&&(e=s.max),a>s.min&&(a=s.min))}for(var n=0,h=this.crosstab.length;n<h;n++)for(var l=this.crosstab[n],c=void 0,d=0,u=l.length;d<u;d++){var g=l[d];if(g.chart&&"axis"===g.chart.conf.type&&(c=g,"y"===c.chart.conf.config.chart.axisType)){var f=c.chart,p=f.conf;p.config.chart={dataMin:a,axisType:"y",dataMax:e,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(p.config.chart={dataMin:a,axisType:"y",dataMax:e,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),f=this.mc.chart(p),c.chart=f}}this.createMultiChart(this.crosstab),i=i||this.findYAxisChart();for(var m=0,y=this.crosstab.length;m<y;m++)for(var v=this.crosstab[m],S=0,M=v.length;S<M;S++){var P=v[S];if(i&&!P.hasOwnProperty("html")&&!P.hasOwnProperty("chart")&&"blank-cell"!==P.className&&"axis-footer-cell"!==P.className){var b=i.chart,x=b.getChartInstance(),C=x.getLimits(),w=C[0],B=C[1],V=this.getChartObj(this.dataStore,this.categories,P.rowHash,P.colHash,w,B)[1];P.chart=V}}this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,function(e,a){t.globalData=t.buildGlobalData(),t.updateCrosstab()}),this.mc.addEventListener("hoverin",function(e,a){if(a.data)for(var i=0,r=t.crosstab.length;i<r;i++)for(var o=t.crosstab[i],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart,h=t.dimensions[t.dimensions.length-1],l=a.data[h];n.highlight(l)}}),this.mc.addEventListener("hoverout",function(e,a){for(var i=0,r=t.crosstab.length;i<r;i++)for(var o=t.crosstab[i],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart;n.highlight()}})}},{key:"updateCrosstab",value:function(){var t=this.createCrosstab(),e=void 0,a=void 0,i=void 0,r=void 0,o=[],s=-(1/0),n=1/0,h=[];for(e=0,a=this.crosstab.length;e<a;e++){var l=this.crosstab[e];for(i=0,r=l.length;i<r;i++){var c=l[i];if(c.chart){var d=c.chart.getConf();"caption"!==d.type&&"axis"!==d.type&&o.push(c)}}}for(e=0,a=t.length;e<a;e++){var u=t[e];for(i=0,r=u.length;i<r;i++){var g=u[i];if(g.rowHash&&g.colHash){var f=this.getOldChart(o,g.rowHash,g.colHash),p={};if(!f){var m=this.getChartObj(this.dataStore,this.categories,g.rowHash,g.colHash);f=m[1],p=m[0]}g.chart=f,0!==Object.keys(p).length&&(g.max=p.max,g.min=p.min)}}}for(e=0,a=t.length;e<a;e++){var y=t[e];for(i=0,r=y.length;i<r;i++){var v=y[i];(v.max||v.min)&&(s<v.max&&(s=v.max),n>v.min&&(n=v.min))}}for(e=0,a=t.length;e<a;e++){var S=t[e];for(i=0,r=S.length;i<r;i++){var M=S[i];if(M.chart&&"axis"===M.chart.conf.type){var P=M;if("y"===P.chart.conf.config.chart.axisType){var b=P.chart,x=b.conf;x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),b=this.mc.chart(x),P.chart=b}}}}this.crosstab=t,this.createMultiChart(),h=this.getYAxisLimits();for(var C=0,w=this.crosstab.length;C<w;C++)for(var B=this.crosstab[C],V=0,Y=B.length;V<Y;V++){var A=B[V];if(!A.hasOwnProperty("html")&&"blank-cell"!==A.className&&"axis-footer-cell"!==A.className&&"caption"!==A.chart.getConf().type&&"axis"!==A.chart.getConf().type){var Q=this.getChartObj(this.dataStore,this.categories,A.rowHash,A.colHash,h[0],h[1])[1];A.chart.update(Q.getConf())}}}},{key:"findYAxisChart",value:function(){for(var t=0,e=this.crosstab.length;t<e;t++)for(var a=this.crosstab[t],i=0,r=a.length;i<r;i++){var o=a[i];if(o.chart&&"y"===o.chart.conf.config.chart.axisType)return o}}},{key:"getYAxisLimits",value:function(){var t=void 0,e=void 0,a=void 0,i=void 0;for(t=0,e=this.crosstab.length;t<e;t++){var r=this.crosstab[t];for(a=0,i=r.length;a<i;a++){var o=r[a];if(o.chart){var s=o.chart.getConf();if("axis"===s.type&&"y"===s.config.chart.axisType)return o.chart.getChartInstance().getLimits()}}}}},{key:"getOldChart",value:function(t,e,a){for(var i=t.length-1;i>=0;i--)if(t[i].rowHash===e&&t[i].colHash===a)return t[i].chart}},{key:"sortCharts",value:function(t,e){var a=this,i=this.mc.createDataProcessor(),r=void 0,o=void 0;this.chartsAreSorted=!0,r="ascending"===e?function(e,a){return e[t]-a[t]}:"descending"===e?function(e,a){return a[t]-e[t]}:function(t,e){return 0},i.sort(r),o=this.dataStore.getChildModel(i),this.crosstab.forEach(function(t){var e=void 0;t.forEach(function(t){if(t.chart){var i=t.chart,r=i.getConf();if("caption"!==r.type&&"axis"!==r.type){var s=a.getChartObj(o,a.categories,t.rowHash,t.colHash);i.update(s[1].getConf()),e=i.getConf().categories}}}),t.forEach(function(t){if(t.chart){var i=t.chart,r=i.getConf();if("axis"===r.type){var o=r.config.chart.axisType;"x"===o&&("bar2d"===a.chartType?r.config.categories=e.reverse():r.config.categories=e,i.update(r))}}})})}},{key:"createMultiChart",value:function(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.dataIsSortable&&this.setupSortButtons(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,i){var r=void 0;i=i||[];for(var o=0,s=t.length;o<s;o++)r=t.splice(o,1),0===t.length&&a.push(i.concat(r).join("|")),e(t.slice(),i.concat(r)),t.splice(o,0,r[0]);return a}var a=[],i=e(t);return i.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var i=a.split("|"),r=this.permuteArr(i).split("*!%^");if(r.indexOf(t)!==-1)return r[0]}else;return!1}},{key:"getChartObj",value:function(t,e,a,i,r,o){var s=this,n=[],h="",l=a.split("|"),c=[],d={},u=[],g={},f={},p={};if(l.push.apply(l),n=l.filter(function(t){return""!==t}),h=n.join("|"),u=this.hash[this.matchHash(h,this.hash)]){for(var m=0,y=u.length;m<y;m++)d=this.mc.createDataProcessor(),d.filter(u[m]),c.push(d);return g=t.getChildModel(c),void 0!==r&&void 0!==o&&(this.chartConfig.chart.yAxisMinValue=r,this.chartConfig.chart.yAxisMaxValue=o),this.dataIsSortable&&!function(){var t=g.getJSON(),a=[];t.forEach(function(t){var e=t[s.dimensions[s.dimensions.length-1]];a.indexOf(e)===-1&&a.push(e)}),e=a.slice()}(),p=this.mc.chart({dataSource:g,type:this.chartType,width:"100%",height:"100%",dimension:[this.dimensions[this.dimensions.length-1]],measure:[i],seriesType:"SS",aggregateMode:this.aggregation,categories:e,config:this.chartConfig}),f=p.getLimit(),[{max:f.max,min:f.min},p]}}},{key:"setupSortButtons",value:function(){var t=this,e=document.getElementsByClassName("ascending-sort"),a=e.length,i=void 0,r=document.getElementsByClassName("descending-sort"),o=e.length,s=void 0,n=document.getElementsByClassName("sort-btn");for(i=0;i<a;i++){var h=e[i];h.addEventListener("mousedown",function(e){e.stopPropagation();for(var a=n.length-1;a>=0;a--)t.removeActiveClass(n[a]);if(t.chartsAreSorted)t.sortCharts(),t.chartsAreSorted=!1;else{var i=void 0,r=void 0,o=void 0;i=e.target.className.split(" ").indexOf("sort-steps")!==-1?e.target.parentNode:e.target,i&&(r=i.parentNode.childNodes,o=i.className+" active",i.setAttribute("class",o),r.forEach(function(e){3===e.nodeType&&t.sortCharts(e.nodeValue,"ascending")}))}})}for(s=0;s<o;s++){var l=r[s];l.addEventListener("mousedown",function(e){e.stopPropagation();for(var a=n.length-1;a>=0;a--)t.removeActiveClass(n[a]);if(t.chartsAreSorted)t.sortCharts(),t.chartsAreSorted=!1;else{var i=void 0,r=void 0,o=void 0;i=e.target.className.split(" ").indexOf("sort-steps")!==-1?e.target.parentNode:e.target,i&&(r=i.parentNode.childNodes,o=i.className+" active",i.setAttribute("class",o),r.forEach(function(e){3===e.nodeType&&t.sortCharts(e.nodeValue,"descending")}))}})}}},{key:"removeActiveClass",value:function(t){var e=t.className.split(" ").filter(function(t){return"active"!==t}).join(" ");t.setAttribute("class",e)}},{key:"dragListener",value:function(t){function e(t,e,i,r){var o=0,s=0,n=i-1,h=Math.log2;t[0]&&(o=parseInt(t[0].graphics.style.left),s=parseInt(t[n].graphics.style.left));for(var l=function(n){var l=t[n].graphics,d=t[n],u=0,g=0;d.cellValue=e[n],d.origLeft=parseInt(l.style.left),d.redZone=d.origLeft+parseInt(l.style.width)/2,d.index=n,d.adjust=0,d.origZ=l.style.zIndex,c._setupDrag(d.graphics,function(e,i){u=d.origLeft+e+d.adjust,u<o&&(g=o-u,u=o-h(g)),u>s&&(g=u-s,u=s+h(g)),l.style.left=u+"px",l.style.zIndex=1e3,a(d.index,!1,t),a(d.index,!0,t)},function(){var e=!1,a=0;for(d.adjust=0,l.style.zIndex=d.origZ,l.style.left=d.origLeft+"px";a<i;++a)r[a]!==t[a].cellValue&&(r[a]=t[a].cellValue,e=!0);e&&window.setTimeout(function(){c.globalData=c.buildGlobalData(),c.updateCrosstab()},10)})},d=0;d<i;++d)l(d)}function a(t,e,a){var i=[],r=a[t],o=e?t+1:t-1,s=a[o];s&&(i.push(!e&&parseInt(r.graphics.style.left)<s.redZone),i.push(i.pop()||e&&parseInt(r.graphics.style.left)>s.origLeft),i.pop()&&(i.push(s.redZone),i.push(s.origLeft),i.push(s.index),e?r.adjust-=parseInt(s.graphics.style.width):r.adjust+=parseInt(s.graphics.style.width),s.origLeft=r.origLeft,s.redZone=r.redZone,s.index=r.index,s.graphics.style.left=s.origLeft+"px",i.push(a[o]),a[o]=a[t],a[t]=i.pop())),3===i.length&&(r.index=i.pop(),r.origLeft=i.pop(),r.redZone=i.pop())}var i=this.storeParams.config,r=i.dimensions||[],o=i.measures||[],s=o.length,n=0,h=void 0,l=void 0,c=this;t=t[1],r=r.slice(0,r.length-1),n=r.length,h=t.slice(0,n),l=t.slice(n+1,n+s+1),e(h,r,n,this.dimensions),e(l,o,s,this.measures)}},{key:"_setupDrag",value:function(t,e,a){function i(t){e(t.clientX-o,t.clientY-s)}function r(e){t.style.opacity=1,t.classList.remove("dragging"),window.document.removeEventListener("mousemove",i),window.document.removeEventListener("mouseup",r),window.setTimeout(a,10)}var o=0,s=0;t.addEventListener("mousedown",function(e){var a=e.target,n=a.className;""!==a.className&&n.split(" ").indexOf("sort-btn")!==-1||(o=e.clientX,s=e.clientY,t.style.opacity=.8,t.classList.add("dragging"),window.document.addEventListener("mousemove",i),window.document.addEventListener("mouseup",r))})}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=i},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,