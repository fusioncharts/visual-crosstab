!function(t){function e(r){if(a[r])return a[r].exports;var i=a[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r=e(1),i=e(2),o={dimensions:["Product","State","Month"],measures:["Sale","Profit","Visitors"],measureUnits:["INR","$",""],unitFunction:function(t){return"("+t+")"},chartType:"bar2d",noDataMessage:"No data to display.",crosstabContainer:"crosstab-div",dataIsSortable:!0,cellWidth:150,cellHeight:80,draggableHeaders:!0,aggregation:"min",chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#badaf0",columnHoverColor:"#1b83cc",chartBottomMargin:"2",chartTopMargin:"2",chartLeftMargin:"5",chartRightMargin:"7",zeroPlaneThickness:"0",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"0",alternateVGridAlpha:"0",paletteColors:"#5B5B5B",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",canvasBorderThickness:"0",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new r(i,o),window.crosstab.renderCrosstab()):t.exports=r},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var r=e[a];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,a,r){return a&&t(e.prototype,a),r&&t(e,r),e}}(),r=function(){function t(a,r){if(e(this,t),this.data=a,this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.storeParams={data:a,config:r},this._columnKeyArr=[],this.measures=r.measures,this.chartType=r.chartType,this.dimensions=r.dimensions,this.chartConfig=r.chartConfig,this.measureUnits=r.measureUnits,this.dataIsSortable=r.dataIsSortable,this.crosstabContainer=r.crosstabContainer,this.cellWidth=r.cellWidth||210,this.cellHeight=r.cellHeight||113,this.showFilter=r.showFilter||!1,this.aggregation=r.aggregation||"sum",this.draggableHeaders=r.draggableHeaders||!1,this.noDataMessage=r.noDataMessage||"No data to display.",this.unitFunction=r.unitFunction||function(t){return"("+t+")"},"function"!=typeof MultiCharting)throw new Error("MultiChartng module not found.");if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.showFilter){if("function"!=typeof FCDataFilterExt)throw new Error("DataFilter module not found.");var i={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,i,"control-box")}this.globalData=this.buildGlobalData(),this.hash=this.getFilterHashMap(),this.chartsAreSorted={bool:!1,order:"",measure:""}}return a(t,[{key:"buildGlobalData",value:function(){var t=this.dataStore,e=t.getKeys();if(e){for(var a={},r=0,i=e.length;r<i;r++)a[e[r]]=t.getUniqueValues(e[r]);return this.categories=a[this.dimensions[this.dimensions.length-1]],a}throw new Error("Could not generate keys from data store")}},{key:"createRow",value:function(t,e,a,r,i){var o,s,n,h,l=0,c=a[r],d=e[c],u=d.length,g=r<a.length-1,p=this._columnKeyArr.length,f=1/0,m=-(1/0),y={};for(0===r&&t.push([]),o=0;o<u;o+=1){var v="";if(h=document.createElement("p"),h.innerHTML=d[o],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",v+="row-dimensions "+this.dimensions[r].toLowerCase()+" "+d[o].toLowerCase()+" no-select",h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*d[o].length,document.body.removeChild(h),h.style.visibility="visible",s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:v},n=i+d[o]+"|",o?t.push([s]):t[t.length-1].push(s),g)s.rowspan=this.createRow(t,e,a,r+1,n);else{"bar2d"===this.chartType?t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"vertical-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,isHorizontal:0,chartTopMargin:this.chartConfig.chart.chartTopMargin,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,valuePadding:.5},categories:this.categories.reverse()}})}):t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"vertical-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y"}}})});for(var S=0;S<p;S+=1){var M={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:n,colHash:this._columnKeyArr[S],className:"chart-cell "+(S+1)};S===p-1&&(M.className="chart-cell last-col"),t[t.length-1].push(M),y=this.getChartObj(this.dataStore,this.categories,n,this._columnKeyArr[S])[0],m=parseInt(y.max)>m?y.max:m,f=parseInt(y.min)<f?y.min:f,M.max=m,M.min=f}}l+=s.rowspan}return l}},{key:"createMeasureHeadings",value:function(t,e,a){var r,i,o,s,n,h,l,c,d,u,g=0,p=this.measures.length;for(r=0;r<p;r+=1){var f="",m=a[r],y="",v=void 0;d=document.createElement("div"),d.style.textAlign="center",u=document.createElement("div"),u.setAttribute("class","measure-drag-handle"),u.style.height="5px",u.style.paddingTop="3px",u.style.paddingBottom="1px",this.appendDragHandle(u,25),c=document.createElement("div"),c.style.position="relative",c.setAttribute("data-measure",m),y=this.measureUnits[this.measures.indexOf(m)],l=y.length>0?m+" "+this.unitFunction(y):m,h=document.createElement("span"),h.setAttribute("class","measure-span"),n=document.createElement("div"),n.innerHTML=l,n.setAttribute("class","measure-text"),h.appendChild(n),v=document.createElement("div"),v.innerHTML=this.aggregation.split("").reduce(function(t,e,a){return 1===a?t.toUpperCase()+e:t+e}),v.setAttribute("class","measure-aggregation"),h.appendChild(v),this.dataIsSortable?(o=this.createSortButton("ascending-sort"),c.appendChild(o),s=this.createSortButton("descending-sort"),c.appendChild(s),c.appendChild(o),c.appendChild(h),c.appendChild(s)):c.appendChild(h),c.style.textAlign="center",c.style.marginTop="5px",document.body.appendChild(c),f+="column-measures "+this.measures[r].toLowerCase()+" no-select",this.draggableHeaders&&(f+=" draggable"),this.cornerHeight=c.offsetHeight,document.body.removeChild(c),d.appendChild(u),d.appendChild(c),i={width:this.cellWidth,height:this.cornerHeight+5,rowspan:1,colspan:1,html:d.outerHTML,className:f},this._columnKeyArr.push(this.measures[r]),t[0].push(i)}return g}},{key:"createDimensionHeadings",value:function(t){var e,a,r,i=[],o=0,s="";for(o=0;o<this.dimensions.length-1;o++)a=document.createElement("div"),a.style.textAlign="center",r=document.createElement("div"),r.setAttribute("class","dimension-drag-handle"),r.style.height="5px",r.style.paddingTop="3px",r.style.paddingBottom="1px",this.appendDragHandle(r,25),e=document.createElement("p"),e.innerHTML=this.dimensions[o][0].toUpperCase()+this.dimensions[o].substr(1),e.style.textAlign="center",e.style.marginTop="5px",s="dimension-header "+this.dimensions[o].toLowerCase()+" no-select",this.draggableHeaders&&(s+=" draggable"),a.appendChild(r),a.appendChild(e),i.push({width:10*this.dimensions[o].length,height:35,rowspan:1,colspan:1,html:a.outerHTML,className:s});return i}},{key:"createVerticalAxisHeader",value:function(){var t=document.createElement("p");return t.innerHTML="",t.style.textAlign="center",{width:40,height:35,rowspan:1,colspan:1,html:t.outerHTML,className:"axis-header-cell"}}},{key:"createCaption",value:function(t){return[{height:50,rowspan:1,colspan:t,className:"caption-chart",chart:this.mc.chart({type:"caption",width:"100%",height:"100%",dataFormat:"json",config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}})}]}},{key:"createCrosstab",value:function(){var t=this.globalData,e=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),a=this.measures.filter(function(t,e,a){if(t!==a[a.length])return!0}),r=[],i=[],o=0,s=0;if(t){for(r.push(this.createDimensionHeadings(r,a.length)),r[0].push(this.createVerticalAxisHeader()),this.createMeasureHeadings(r,t,this.measures),this.createRow(r,t,e,0,""),o=0;o<r.length;o++)s=s<r[o].length?r[o].length:s;for(o=0;o<this.dimensions.length-1;o++)i.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(i.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),o=0;o<s-this.dimensions.length;o++)"bar2d"===this.chartType?i.push({width:"100%",height:20,rowspan:1,colspan:1,className:"horizontal-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y",isHorizontal:1}}})}):i.push({width:"100%",height:20,rowspan:1,colspan:1,className:"horizontal-axis",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,valuePadding:.5},categories:this.categories}})});r.push(i),r.unshift(this.createCaption(s)),this._columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"createFilters",value:function(){var t=this,e=[],a=this.dimensions.slice(0,this.dimensions.length-1),r=void 0;return a.forEach(function(a){r=t.globalData[a],r.forEach(function(r){e.push({filter:t.filterGen(a,r.toString()),filterVal:r})})}),e}},{key:"createDataCombos",value:function(){function t(i,o){for(var s=0,n=a[o].length;s<n;s++){var h=i.slice(0);h.push(a[o][s]),o===r?e.push(h):t(h,o+1)}}var e=[],a=this.makeGlobalArray(),r=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&this.dimensions.indexOf(a)!==-1&&a!==this.dimensions[this.dimensions.length-1]&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},r=0,i=e.length;r<i;r++){for(var o=e[r],s="",n=[],h=0,l=o.length;h<l;h++)for(var c=0,d=t.length;c<d;c++){var u=t[c].filterVal;o[h]===u&&(s+=0===h?o[h]:"|"+o[h],n.push(t[c].filter))}a[s]=n}return a}},{key:"appendDragHandle",value:function(t,e){var a=void 0,r=void 0;for(a=0;a<e;a++)r=document.createElement("span"),r.style.marginLeft="1px",r.style.fontSize="3px",r.style.lineHeight="1",r.style.verticalAlign="top",t.appendChild(r)}},{key:"createSortButton",value:function(t){var e=void 0,a="sort-btn "+(t||"");return e=document.createElement("span"),e.setAttribute("class",a.trim()),e.style.position="absolute",e.style.display="inline-block","ascending-sort"===t?this.appendAscendingSteps(e,4):"descending-sort"===t&&this.appendDescendingSteps(e,4),e}},{key:"appendAscendingSteps",value:function(t,e){var a=void 0,r=void 0,i=2,o=1;for(a=1;a<=e;a++)r=document.createElement("span"),r.style.display="block",r.className="sort-steps ascending",o+=a/o*4,r.style.width=o.toFixed()+"px",a===e-1?r.style.marginTop=i+"px":r.style.marginTop=i+"px",t.appendChild(r)}},{key:"appendDescendingSteps",value:function(t,e){var a=void 0,r=void 0,i=2,o=10;for(a=1;a<=e;a++)r=document.createElement("span"),r.style.display="block",r.className="sort-steps descending",o-=a/o*5,r.style.width=o.toFixed()+"px",a===e-1?r.style.marginTop=i+"px":r.style.marginTop=i+"px",t.appendChild(r)}},{key:"renderCrosstab",value:function(){var t=this,e=-(1/0),a=1/0,r=void 0;this.crosstab=this.createCrosstab();for(var i=0,o=this.crosstab.length;i<o;i++){var s=this.crosstab[i][this.crosstab[i].length-1];(s.max||s.min)&&(e<s.max&&(e=s.max),a>s.min&&(a=s.min))}for(var n=0,h=this.crosstab.length;n<h;n++)for(var l=this.crosstab[n],c=void 0,d=0,u=l.length;d<u;d++){var g=l[d];if(g.chart&&"axis"===g.chart.conf.type&&(c=g,"y"===c.chart.conf.config.chart.axisType)){var p=c.chart,f=p.conf;f.config.chart={dataMin:a,axisType:"y",dataMax:e,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(f.config.chart={dataMin:a,axisType:"y",dataMax:e,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),p=this.mc.chart(f),c.chart=p}}this.createMultiChart(this.crosstab),r=r||this.findYAxisChart();for(var m=0,y=this.crosstab.length;m<y;m++)for(var v=this.crosstab[m],S=0,M=v.length;S<M;S++){var b=v[S];if(r&&!b.hasOwnProperty("html")&&!b.hasOwnProperty("chart")&&"blank-cell"!==b.className&&"axis-footer-cell"!==b.className){var P=r.chart,x=P.getChartInstance(),C=x.getLimits(),w=C[0],B=C[1],A=this.getChartObj(this.dataStore,this.categories,b.rowHash,b.colHash,w,B)[1];b.chart=A}}this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,function(e,a){t.globalData=t.buildGlobalData(),t.updateCrosstab()}),this.mc.addEventListener("hoverin",function(e,a){if(a.data)for(var r=0,i=t.crosstab.length;r<i;r++)for(var o=t.crosstab[r],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart,h=t.dimensions[t.dimensions.length-1],l=a.data[h];n.highlight(l)}}),this.mc.addEventListener("hoverout",function(e,a){for(var r=0,i=t.crosstab.length;r<i;r++)for(var o=t.crosstab[r],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart;n.highlight()}})}},{key:"updateCrosstab",value:function(){var t=this.createCrosstab(),e=void 0,a=void 0,r=void 0,i=void 0,o=[],s=-(1/0),n=1/0,h=[];for(e=0,a=this.crosstab.length;e<a;e++){var l=this.crosstab[e];for(r=0,i=l.length;r<i;r++){var c=l[r];if(c.chart){var d=c.chart.getConf();"caption"!==d.type&&"axis"!==d.type&&o.push(c)}}}for(e=0,a=t.length;e<a;e++){var u=t[e];for(r=0,i=u.length;r<i;r++){var g=u[r];if(g.rowHash&&g.colHash){var p=this.getOldChart(o,g.rowHash,g.colHash),f={};if(!p){var m=this.getChartObj(this.dataStore,this.categories,g.rowHash,g.colHash);p=m[1],f=m[0]}g.chart=p,0!==Object.keys(f).length&&(g.max=f.max,g.min=f.min)}}}for(e=0,a=t.length;e<a;e++){var y=t[e];for(r=0,i=y.length;r<i;r++){var v=y[r];(v.max||v.min)&&(s<v.max&&(s=v.max),n>v.min&&(n=v.min))}}for(e=0,a=t.length;e<a;e++){var S=t[e];for(r=0,i=S.length;r<i;r++){var M=S[r];if(M.chart&&"axis"===M.chart.conf.type){var b=M;if("y"===b.chart.conf.config.chart.axisType){var P=b.chart,x=P.conf;x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),P=this.mc.chart(x),b.chart=P}}}}this.crosstab=t,this.createMultiChart(),h=this.getYAxisLimits();for(var C=0,w=this.crosstab.length;C<w;C++)for(var B=this.crosstab[C],A=0,V=B.length;A<V;A++){var Y=B[A];if(!Y.hasOwnProperty("html")&&"blank-cell"!==Y.className&&"axis-footer-cell"!==Y.className&&"caption"!==Y.chart.getConf().type&&"axis"!==Y.chart.getConf().type){var Q=this.getChartObj(this.dataStore,this.categories,Y.rowHash,Y.colHash,h[0],h[1])[1];Y.chart.update(Q.getConf())}}}},{key:"findYAxisChart",value:function(){for(var t=0,e=this.crosstab.length;t<e;t++)for(var a=this.crosstab[t],r=0,i=a.length;r<i;r++){var o=a[r];if(o.chart&&"y"===o.chart.conf.config.chart.axisType)return o}}},{key:"getYAxisLimits",value:function(){var t=void 0,e=void 0,a=void 0,r=void 0;for(t=0,e=this.crosstab.length;t<e;t++){var i=this.crosstab[t];for(a=0,r=i.length;a<r;a++){var o=i[a];if(o.chart){var s=o.chart.getConf();if("axis"===s.type&&"y"===s.config.chart.axisType)return o.chart.getChartInstance().getLimits()}}}}},{key:"getOldChart",value:function(t,e,a){for(var r=t.length-1;r>=0;r--)if(t[r].rowHash===e&&t[r].colHash===a)return t[r].chart}},{key:"sortCharts",value:function(t,e){var a=this,r=this.mc.createDataProcessor(),i=void 0,o=void 0;i="ascending"===e?function(e,a){return e[t]-a[t]}:"descending"===e?function(e,a){return a[t]-e[t]}:function(t,e){return 0},r.sort(i),o=this.dataStore.getChildModel(r),this.crosstab.forEach(function(t){var e=void 0;t.forEach(function(t){if(t.chart){var r=t.chart,i=r.getConf();if("caption"!==i.type&&"axis"!==i.type){var s=a.getChartObj(o,a.categories,t.rowHash,t.colHash);r.update(s[1].getConf()),e=r.getConf().categories}}}),t.forEach(function(t){if(t.chart){var r=t.chart,i=r.getConf();if("axis"===i.type){var o=i.config.chart.axisType;"x"===o&&("bar2d"===a.chartType?i.config.categories=e.reverse():i.config.categories=e,r.update(i))}}})})}},{key:"createMultiChart",value:function(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.dataIsSortable&&this.setupSortButtons(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,r){var i=void 0;r=r||[];for(var o=0,s=t.length;o<s;o++)i=t.splice(o,1),0===t.length&&a.push(r.concat(i).join("|")),e(t.slice(),r.concat(i)),t.splice(o,0,i[0]);return a}var a=[],r=e(t);return r.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var r=a.split("|"),i=this.permuteArr(r).split("*!%^");if(i.indexOf(t)!==-1)return i[0]}else;return!1}},{key:"getChartObj",value:function(t,e,a,r,i,o){var s=this,n=[],h="",l=a.split("|"),c=[],d={},u=[],g={},p={},f={};if(l.push.apply(l),n=l.filter(function(t){return""!==t}),h=n.join("|"),u=this.hash[this.matchHash(h,this.hash)]){for(var m=0,y=u.length;m<y;m++)d=this.mc.createDataProcessor(),d.filter(u[m]),c.push(d);return g=t.getChildModel(c),void 0!==i&&void 0!==o&&(this.chartConfig.chart.yAxisMinValue=i,this.chartConfig.chart.yAxisMaxValue=o),this.dataIsSortable&&!function(){var t=g.getJSON(),a=[];t.forEach(function(t){var e=t[s.dimensions[s.dimensions.length-1]];a.indexOf(e)===-1&&a.push(e)}),e=a.slice()}(),f=this.mc.chart({dataSource:g,type:this.chartType,width:"100%",height:"100%",dimension:[this.dimensions[this.dimensions.length-1]],measure:[r],seriesType:"SS",aggregateMode:this.aggregation,categories:e,config:this.chartConfig}),p=f.getLimit(),[{max:p.max,min:p.min},f]}}},{key:"setupSortButtons",value:function(){var t=this,e=document.getElementsByClassName("ascending-sort"),a=e.length,r=void 0,i=document.getElementsByClassName("descending-sort"),o=e.length,s=void 0,n=document.getElementsByClassName("sort-btn");for(r=0;r<a;r++){var h=e[r];h.addEventListener("mousedown",function(e){var a=void 0,r=void 0,i=void 0;a=e.target.className.split(" ").indexOf("sort-steps")!==-1?e.target.parentNode:e.target,r=a.parentNode.getAttribute("data-measure"),i=a.className+" active",e.stopPropagation();for(var o=n.length-1;o>=0;o--)t.removeActiveClass(n[o]);if(a.setAttribute("class",i),t.chartsAreSorted.bool){var s=a.className.split(" ");r===t.chartsAreSorted.measure&&s.indexOf(t.chartsAreSorted.order)!==-1?(t.sortCharts(),t.chartsAreSorted={bool:!1,order:"",measure:""},t.removeActiveClass(a)):(t.sortCharts(r,"ascending"),t.chartsAreSorted={bool:!0,order:"ascending-sort",measure:r})}else t.sortCharts(r,"ascending"),t.chartsAreSorted={bool:!0,order:"ascending-sort",measure:r}})}for(s=0;s<o;s++){var l=i[s];l.addEventListener("mousedown",function(e){var a=void 0,r=void 0,i=void 0;a=e.target.className.split(" ").indexOf("sort-steps")!==-1?e.target.parentNode:e.target,r=a.parentNode.getAttribute("data-measure"),i=a.className+" active",e.stopPropagation();for(var o=n.length-1;o>=0;o--)t.removeActiveClass(n[o]);if(a.setAttribute("class",i),t.chartsAreSorted.bool){var s=a.className.split(" ");r===t.chartsAreSorted.measure&&s.indexOf(t.chartsAreSorted.order)!==-1?(t.sortCharts(),t.chartsAreSorted={bool:!1,order:"",measure:""},t.removeActiveClass(a)):(t.sortCharts(r,"descending"),t.chartsAreSorted={bool:!0,order:"descending-sort",measure:r})}else t.sortCharts(r,"descending"),t.chartsAreSorted={bool:!0,order:"descending-sort",measure:r}})}}},{key:"removeActiveClass",value:function(t){var e=t.className.split(" ").filter(function(t){return"active"!==t}).join(" ");t.setAttribute("class",e)}},{key:"addActiveClass",value:function(t){var e=t.className.split(" ");e.push("active"),e=e.join(" "),t.setAttribute("class",e)}},{key:"dragListener",value:function(t){function e(t,e,r,i){var o=0,s=0,n=r-1,h=Math.log2;t[0]&&(o=parseInt(t[0].graphics.style.left),s=parseInt(t[n].graphics.style.left));for(var l=function(n){var l=t[n].graphics,d=t[n],u=0,g=0;d.cellValue=e[n],d.origLeft=parseInt(l.style.left),d.redZone=d.origLeft+parseInt(l.style.width)/2,d.index=n,d.adjust=0,d.origZ=l.style.zIndex,c._setupDrag(d.graphics,function(e,r){u=d.origLeft+e+d.adjust,u<o&&(g=o-u,u=o-h(g)),u>s&&(g=u-s,u=s+h(g)),l.style.left=u+"px",l.style.zIndex=1e3,a(d.index,!1,t),a(d.index,!0,t)},function(){var e=!1,a=0;for(d.adjust=0,l.style.zIndex=d.origZ,l.style.left=d.origLeft+"px";a<r;++a)i[a]!==t[a].cellValue&&(i[a]=t[a].cellValue,e=!0);e&&window.setTimeout(function(){c.globalData=c.buildGlobalData(),c.updateCrosstab()},10)})},d=0;d<r;++d)l(d)}function a(t,e,a){var r=[],i=a[t],o=e?t+1:t-1,s=a[o];s&&(r.push(!e&&parseInt(i.graphics.style.left)<s.redZone),r.push(r.pop()||e&&parseInt(i.graphics.style.left)>s.origLeft),r.pop()&&(r.push(s.redZone),r.push(s.origLeft),r.push(s.index),e?i.adjust-=parseInt(s.graphics.style.width):i.adjust+=parseInt(s.graphics.style.width),s.origLeft=i.origLeft,s.redZone=i.redZone,s.index=i.index,s.graphics.style.left=s.origLeft+"px",r.push(a[o]),a[o]=a[t],a[t]=r.pop())),3===r.length&&(i.index=r.pop(),i.origLeft=r.pop(),i.redZone=r.pop())}var r=this.storeParams.config,i=r.dimensions||[],o=r.measures||[],s=o.length,n=0,h=void 0,l=void 0,c=this;t=t[1],i=i.slice(0,i.length-1),n=i.length,h=t.slice(0,n),l=t.slice(n+1,n+s+1),e(h,i,n,this.dimensions),e(l,o,s,this.measures)}},{key:"_setupDrag",value:function(t,e,a){function r(t){e(t.clientX-o,t.clientY-s)}function i(e){t.style.opacity=1,t.classList.remove("dragging"),window.document.removeEventListener("mousemove",r),window.document.removeEventListener("mouseup",i),window.setTimeout(a,10)}var o=0,s=0;t.addEventListener("mousedown",function(e){var a=e.target,n=a.className;""!==a.className&&n.split(" ").indexOf("sort-btn")!==-1||(o=e.clientX,s=e.clientY,t.style.opacity=.8,t.classList.add("dragging"),window.document.addEventListener("mousemove",r),window.document.addEventListener("mouseup",i))})}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=r},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY3Jvc3N0YWItZXh0LWVzNS5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDE5MWY0MTJmNzM4ODYyYTQzMTc0Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3Jvc3N0YWJFeHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcmdlRGF0YS5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIkNyb3NzdGFiRXh0IiwiZGF0YSIsImNvbmZpZyIsImRpbWVuc2lvbnMiLCJtZWFzdXJlcyIsIm1lYXN1cmVVbml0cyIsInVuaXRGdW5jdGlvbiIsInVuaXQiLCJjaGFydFR5cGUiLCJub0RhdGFNZXNzYWdlIiwiY3Jvc3N0YWJDb250YWluZXIiLCJkYXRhSXNTb3J0YWJsZSIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJkcmFnZ2FibGVIZWFkZXJzIiwiYWdncmVnYXRpb24iLCJjaGFydENvbmZpZyIsImNoYXJ0Iiwic2hvd0JvcmRlciIsInNob3dWYWx1ZXMiLCJkaXZMaW5lQWxwaGEiLCJudW1iZXJQcmVmaXgiLCJyb3RhdGVWYWx1ZXMiLCJyb2xsT3ZlckJhbmRDb2xvciIsImNvbHVtbkhvdmVyQ29sb3IiLCJjaGFydEJvdHRvbU1hcmdpbiIsImNoYXJ0VG9wTWFyZ2luIiwiY2hhcnRMZWZ0TWFyZ2luIiwiY2hhcnRSaWdodE1hcmdpbiIsInplcm9QbGFuZVRoaWNrbmVzcyIsInplcm9QbGFuZUFscGhhIiwiYmdDb2xvciIsInNob3dYQXhpc0xpbmUiLCJwbG90Qm9yZGVyQWxwaGEiLCJzaG93WGF4aXNWYWx1ZXMiLCJzaG93WUF4aXNWYWx1ZXMiLCJhbmltYXRpb24iLCJ0cmFuc3Bvc2VBbmltYXRpb24iLCJhbHRlcm5hdGVIR3JpZEFscGhhIiwicGxvdENvbG9ySW5Ub29sdGlwIiwiY2FudmFzQm9yZGVyQWxwaGEiLCJhbHRlcm5hdGVWR3JpZEFscGhhIiwicGFsZXR0ZUNvbG9ycyIsInVzZVBsb3RHcmFkaWVudENvbG9yIiwidmFsdWVGb250Q29sb3IiLCJjYW52YXNCb3JkZXJUaGlja25lc3MiLCJkcmF3VHJlbmRSZWdpb24iLCJ3aW5kb3ciLCJjcm9zc3RhYiIsInJlbmRlckNyb3NzdGFiIiwiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJ0aGlzIiwiZXZlbnRMaXN0IiwibW9kZWxVcGRhdGVkIiwibW9kZWxEZWxldGVkIiwibWV0YUluZm9VcGRhdGUiLCJwcm9jZXNzb3JVcGRhdGVkIiwicHJvY2Vzc29yRGVsZXRlZCIsInN0b3JlUGFyYW1zIiwiX2NvbHVtbktleUFyciIsInNob3dGaWx0ZXIiLCJNdWx0aUNoYXJ0aW5nIiwiRXJyb3IiLCJtYyIsImRhdGFTdG9yZSIsImNyZWF0ZURhdGFTdG9yZSIsInNldERhdGEiLCJkYXRhU291cmNlIiwiRkNEYXRhRmlsdGVyRXh0IiwiZmlsdGVyQ29uZmlnIiwiZGF0YUZpbHRlckV4dCIsImdsb2JhbERhdGEiLCJidWlsZEdsb2JhbERhdGEiLCJoYXNoIiwiZ2V0RmlsdGVySGFzaE1hcCIsImNoYXJ0c0FyZVNvcnRlZCIsImJvb2wiLCJvcmRlciIsIm1lYXN1cmUiLCJ2YWx1ZSIsImZpZWxkcyIsImdldEtleXMiLCJpaSIsImdldFVuaXF1ZVZhbHVlcyIsImNhdGVnb3JpZXMiLCJ0YWJsZSIsInJvd09yZGVyIiwiY3VycmVudEluZGV4IiwiZmlsdGVyZWREYXRhU3RvcmUiLCJyb3dFbGVtZW50IiwiZmlsdGVyZWREYXRhSGFzaEtleSIsImh0bWxSZWYiLCJyb3dzcGFuIiwiZmllbGRDb21wb25lbnQiLCJmaWVsZFZhbHVlcyIsImwiLCJoYXNGdXJ0aGVyRGVwdGgiLCJjb2xMZW5ndGgiLCJtaW4iLCJJbmZpbml0eSIsIm1heCIsIm1pbm1heE9iaiIsInB1c2giLCJjbGFzc1N0ciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInN0eWxlIiwidGV4dEFsaWduIiwibWFyZ2luVG9wIiwidG9Mb3dlckNhc2UiLCJ2aXNpYmlsaXR5IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY29ybmVyV2lkdGgiLCJyZW1vdmVDaGlsZCIsIndpZHRoIiwiaGVpZ2h0IiwiY29sc3BhbiIsImh0bWwiLCJvdXRlckhUTUwiLCJjbGFzc05hbWUiLCJjcmVhdGVSb3ciLCJ0eXBlIiwiZGF0YUZvcm1hdCIsImF4aXNUeXBlIiwiYm9yZGVydGhpY2tuZXNzIiwiaXNIb3Jpem9udGFsIiwidmFsdWVQYWRkaW5nIiwicmV2ZXJzZSIsImoiLCJjaGFydENlbGxPYmoiLCJyb3dIYXNoIiwiY29sSGFzaCIsImdldENoYXJ0T2JqIiwicGFyc2VJbnQiLCJtZWFzdXJlT3JkZXIiLCJjb2xFbGVtZW50IiwiYXNjZW5kaW5nU29ydEJ0biIsImRlc2NlbmRpbmdTb3J0QnRuIiwiaGVhZGluZ1RleHQiLCJoZWFkaW5nVGV4dFNwYW4iLCJtZWFzdXJlSGVhZGluZyIsImhlYWRlckRpdiIsImRyYWdEaXYiLCJtZWFzdXJlVW5pdCIsImFnZ3JlZ2F0aW9uTm9kZSIsInNldEF0dHJpYnV0ZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiYXBwZW5kRHJhZ0hhbmRsZSIsInBvc2l0aW9uIiwiaW5kZXhPZiIsInNwbGl0IiwicmVkdWNlIiwiYSIsImIiLCJpZHgiLCJ0b1VwcGVyQ2FzZSIsImNyZWF0ZVNvcnRCdXR0b24iLCJjb3JuZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJjb2xPcmRlckxlbmd0aCIsImNvcm5lckNlbGxBcnIiLCJzdWJzdHIiLCJtYXhMZW5ndGgiLCJjYXB0aW9uIiwic3ViY2FwdGlvbiIsImZpbHRlciIsInZhbCIsImFyciIsImNvbE9yZGVyIiwieEF4aXNSb3ciLCJjcmVhdGVEaW1lbnNpb25IZWFkaW5ncyIsImNyZWF0ZVZlcnRpY2FsQXhpc0hlYWRlciIsImNyZWF0ZU1lYXN1cmVIZWFkaW5ncyIsInVuc2hpZnQiLCJjcmVhdGVDYXB0aW9uIiwiX3RoaXMiLCJmaWx0ZXJzIiwic2xpY2UiLCJtYXRjaGVkVmFsdWVzIiwiZm9yRWFjaCIsImRpbWVuc2lvbiIsImZpbHRlckdlbiIsInRvU3RyaW5nIiwiZmlsdGVyVmFsIiwicmVjdXJzZSIsImdsb2JhbEFycmF5IiwiciIsIm1ha2VHbG9iYWxBcnJheSIsInRlbXBPYmoiLCJ0ZW1wQXJyIiwiaGFzT3duUHJvcGVydHkiLCJrZXlzIiwibWFwIiwiY3JlYXRlRmlsdGVycyIsImRhdGFDb21ib3MiLCJjcmVhdGVEYXRhQ29tYm9zIiwiaGFzaE1hcCIsImRhdGFDb21ibyIsImxlbiIsImsiLCJub2RlIiwibnVtSGFuZGxlcyIsImhhbmRsZVNwYW4iLCJtYXJnaW5MZWZ0IiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwidmVydGljYWxBbGlnbiIsInNvcnRCdG4iLCJ0cmltIiwiZGlzcGxheSIsImFwcGVuZEFzY2VuZGluZ1N0ZXBzIiwiYXBwZW5kRGVzY2VuZGluZ1N0ZXBzIiwiYnRuIiwibnVtU3RlcHMiLCJtYXJnaW5WYWx1ZSIsImRpdldpZHRoIiwidG9GaXhlZCIsIl90aGlzMiIsImdsb2JhbE1heCIsImdsb2JhbE1pbiIsInlBeGlzIiwiY3JlYXRlQ3Jvc3N0YWIiLCJyb3dMYXN0Q2hhcnQiLCJyb3ciLCJyb3dBeGlzIiwiamoiLCJjcm9zc3RhYkVsZW1lbnQiLCJjb25mIiwiYXhpc0NoYXJ0IiwiZGF0YU1pbiIsImRhdGFNYXgiLCJjcmVhdGVNdWx0aUNoYXJ0IiwiZmluZFlBeGlzQ2hhcnQiLCJjaGFydEluc3RhbmNlIiwiZ2V0Q2hhcnRJbnN0YW5jZSIsImxpbWl0cyIsImdldExpbWl0cyIsIm1pbkxpbWl0IiwibWF4TGltaXQiLCJjaGFydE9iaiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwiZCIsInVwZGF0ZUNyb3NzdGFiIiwiZXZ0IiwiY2VsbEFkYXB0ZXIiLCJjYXRlZ29yeSIsImNhdGVnb3J5VmFsIiwiaGlnaGxpZ2h0IiwiZmlsdGVyZWRDcm9zc3RhYiIsIm9sZENoYXJ0cyIsImF4aXNMaW1pdHMiLCJjZWxsIiwiY2hhcnRDb25mIiwiZ2V0Q29uZiIsIm9sZENoYXJ0IiwiZ2V0T2xkQ2hhcnQiLCJnZXRZQXhpc0xpbWl0cyIsInVwZGF0ZSIsIl90aGlzMyIsInNvcnRQcm9jZXNzb3IiLCJjcmVhdGVEYXRhUHJvY2Vzc29yIiwic29ydEZuIiwic29ydGVkRGF0YSIsInNvcnQiLCJnZXRDaGlsZE1vZGVsIiwicm93Q2F0ZWdvcmllcyIsInVuZGVmaW5lZCIsIm11bHRpY2hhcnRPYmplY3QiLCJjcmVhdGVNYXRyaXgiLCJkcmF3IiwiZHJhZ0xpc3RlbmVyIiwicGxhY2VIb2xkZXIiLCJzZXR1cFNvcnRCdXR0b25zIiwicGVybXV0ZSIsIm1lbSIsImN1cnJlbnQiLCJzcGxpY2UiLCJyZXN1bHRzIiwiY29uY2F0Iiwiam9pbiIsInBlcm11dGVTdHJzIiwiZmlsdGVyU3RyIiwia2V5UGVybXV0YXRpb25zIiwicGVybXV0ZUFyciIsInJvd0ZpbHRlciIsImNvbEZpbHRlciIsIl90aGlzNCIsInJvd0ZpbHRlcnMiLCJkYXRhUHJvY2Vzc29ycyIsImRhdGFQcm9jZXNzb3IiLCJtYXRjaGVkSGFzaGVzIiwiZmlsdGVyZWREYXRhIiwiYXBwbHkiLCJtYXRjaEhhc2giLCJ5QXhpc01pblZhbHVlIiwieUF4aXNNYXhWYWx1ZSIsImZpbHRlcmVkSlNPTiIsImdldEpTT04iLCJzb3J0ZWRDYXRlZ29yaWVzIiwic2VyaWVzVHlwZSIsImFnZ3JlZ2F0ZU1vZGUiLCJnZXRMaW1pdCIsIl90aGlzNSIsImFzY2VuZGluZ0J0bnMiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZGVzY2VuZGluZ0J0bnMiLCJzb3J0QnRucyIsImNsaWNrRWxlbSIsIm1lYXN1cmVOYW1lIiwicGFyZW50Tm9kZSIsImdldEF0dHJpYnV0ZSIsInN0b3BQcm9wYWdhdGlvbiIsInJlbW92ZUFjdGl2ZUNsYXNzIiwiY2xhc3NMaXN0Iiwic29ydENoYXJ0cyIsImVsZW0iLCJjbGFzc05tIiwic2V0dXBMaXN0ZW5lciIsImhvbGRlciIsImFyckxlbiIsImdsb2JhbEFyciIsImxpbWl0TGVmdCIsImxpbWl0UmlnaHQiLCJsYXN0IiwibG4iLCJNYXRoIiwibG9nMiIsImdyYXBoaWNzIiwibGVmdCIsIl9sb29wIiwiZWwiLCJpdGVtIiwibkxlZnQiLCJkaWZmIiwiY2VsbFZhbHVlIiwib3JpZ0xlZnQiLCJyZWRab25lIiwiaW5kZXgiLCJhZGp1c3QiLCJvcmlnWiIsInpJbmRleCIsInNlbGYiLCJfc2V0dXBEcmFnIiwiZHgiLCJkeSIsIm1hbmFnZVNoaWZ0aW5nIiwiY2hhbmdlIiwic2V0VGltZW91dCIsImlzUmlnaHQiLCJzdGFjayIsImRyYWdJdGVtIiwibmV4dFBvcyIsIm5leHRJdGVtIiwicG9wIiwib3JpZ0NvbmZpZyIsIm1lYXN1cmVzTGVuZ3RoIiwiZGltZW5zaW9uc0xlbmd0aCIsImRpbWVuc2lvbnNIb2xkZXIiLCJtZWFzdXJlc0hvbGRlciIsImhhbmRsZXIiLCJoYW5kbGVyMiIsImN1c3RvbUhhbmRsZXIiLCJjbGllbnRYIiwieCIsImNsaWVudFkiLCJ5IiwibW91c2VVcEhhbmRsZXIiLCJvcGFjaXR5IiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRhcmdldENsYXNzU3RyIiwiYWRkIiwiUHJvZHVjdCIsIlN0YXRlIiwiWWVhciIsIk1vbnRo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TUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLE9BQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsR0FDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEdBQ1JDLE9BQVUsR0FDVkMsU0FBWSxJQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEdBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxHQUNSQyxPQUFVLEdBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEdBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxHQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZIiwiZmlsZSI6ImNyb3NzdGFiLWV4dC1lczUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cdFxuXHR2YXIgQ3Jvc3N0YWJFeHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpLFxuXHQgICAgZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cdFxuXHR2YXIgY29uZmlnID0ge1xuXHQgICAgZGltZW5zaW9uczogWydQcm9kdWN0JywgJ1N0YXRlJywgJ01vbnRoJ10sXG5cdCAgICBtZWFzdXJlczogWydTYWxlJywgJ1Byb2ZpdCcsICdWaXNpdG9ycyddLFxuXHQgICAgbWVhc3VyZVVuaXRzOiBbJ0lOUicsICckJywgJyddLFxuXHQgICAgdW5pdEZ1bmN0aW9uOiBmdW5jdGlvbiB1bml0RnVuY3Rpb24odW5pdCkge1xuXHQgICAgICAgIHJldHVybiAnKCcgKyB1bml0ICsgJyknO1xuXHQgICAgfSxcblx0ICAgIGNoYXJ0VHlwZTogJ2JhcjJkJyxcblx0ICAgIG5vRGF0YU1lc3NhZ2U6ICdObyBkYXRhIHRvIGRpc3BsYXkuJyxcblx0ICAgIGNyb3NzdGFiQ29udGFpbmVyOiAnY3Jvc3N0YWItZGl2Jyxcblx0ICAgIGRhdGFJc1NvcnRhYmxlOiB0cnVlLFxuXHQgICAgY2VsbFdpZHRoOiAxNTAsXG5cdCAgICBjZWxsSGVpZ2h0OiA4MCxcblx0ICAgIC8vIHNob3dGaWx0ZXI6IHRydWUsXG5cdCAgICBkcmFnZ2FibGVIZWFkZXJzOiB0cnVlLFxuXHQgICAgYWdncmVnYXRpb246ICdtaW4nLFxuXHQgICAgY2hhcnRDb25maWc6IHtcblx0ICAgICAgICBjaGFydDoge1xuXHQgICAgICAgICAgICAnc2hvd0JvcmRlcic6ICcwJyxcblx0ICAgICAgICAgICAgJ3Nob3dWYWx1ZXMnOiAnMCcsXG5cdCAgICAgICAgICAgICdkaXZMaW5lQWxwaGEnOiAnMCcsXG5cdCAgICAgICAgICAgICdudW1iZXJQcmVmaXgnOiAn4oK5Jyxcblx0ICAgICAgICAgICAgJ3JvdGF0ZVZhbHVlcyc6ICcxJyxcblx0ICAgICAgICAgICAgJ3JvbGxPdmVyQmFuZENvbG9yJzogJyNiYWRhZjAnLFxuXHQgICAgICAgICAgICAnY29sdW1uSG92ZXJDb2xvcic6ICcjMWI4M2NjJyxcblx0ICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogJzInLFxuXHQgICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiAnMicsXG5cdCAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiAnNScsXG5cdCAgICAgICAgICAgICdjaGFydFJpZ2h0TWFyZ2luJzogJzcnLFxuXHQgICAgICAgICAgICAnemVyb1BsYW5lVGhpY2tuZXNzJzogJzAnLFxuXHQgICAgICAgICAgICAnemVyb1BsYW5lQWxwaGEnOiAnMTAwJyxcblx0ICAgICAgICAgICAgJ2JnQ29sb3InOiAnI0ZGRkZGRicsXG5cdCAgICAgICAgICAgICdzaG93WEF4aXNMaW5lJzogJzEnLFxuXHQgICAgICAgICAgICAncGxvdEJvcmRlckFscGhhJzogJzAnLFxuXHQgICAgICAgICAgICAnc2hvd1hheGlzVmFsdWVzJzogJzAnLFxuXHQgICAgICAgICAgICAnc2hvd1lBeGlzVmFsdWVzJzogJzAnLFxuXHQgICAgICAgICAgICAnYW5pbWF0aW9uJzogJzEnLFxuXHQgICAgICAgICAgICAndHJhbnNwb3NlQW5pbWF0aW9uJzogJzEnLFxuXHQgICAgICAgICAgICAnYWx0ZXJuYXRlSEdyaWRBbHBoYSc6ICcwJyxcblx0ICAgICAgICAgICAgJ3Bsb3RDb2xvckluVG9vbHRpcCc6ICcwJyxcblx0ICAgICAgICAgICAgJ2NhbnZhc0JvcmRlckFscGhhJzogJzAnLFxuXHQgICAgICAgICAgICAnYWx0ZXJuYXRlVkdyaWRBbHBoYSc6ICcwJyxcblx0ICAgICAgICAgICAgJ3BhbGV0dGVDb2xvcnMnOiAnIzVCNUI1QicsXG5cdCAgICAgICAgICAgICd1c2VQbG90R3JhZGllbnRDb2xvcic6ICcwJyxcblx0ICAgICAgICAgICAgJ3ZhbHVlRm9udENvbG9yJzogJyNGRkZGRkYnLFxuXHQgICAgICAgICAgICAnY2FudmFzQm9yZGVyVGhpY2tuZXNzJzogJzAnLFxuXHQgICAgICAgICAgICAnZHJhd1RyZW5kUmVnaW9uJzogJzEnXG5cdCAgICAgICAgfVxuXHQgICAgfVxuXHR9O1xuXHRcblx0aWYgKCh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZih3aW5kb3cpKSA9PT0gJ29iamVjdCcpIHtcblx0ICAgIHdpbmRvdy5jcm9zc3RhYiA9IG5ldyBDcm9zc3RhYkV4dChkYXRhLCBjb25maWcpO1xuXHQgICAgd2luZG93LmNyb3NzdGFiLnJlbmRlckNyb3NzdGFiKCk7XG5cdH0gZWxzZSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cyA9IENyb3NzdGFiRXh0O1xuXHR9XG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXHRcblx0ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblx0XG5cdC8qKlxuXHQgKiBSZXByZXNlbnRzIGEgY3Jvc3N0YWIuXG5cdCAqL1xuXHR2YXIgQ3Jvc3N0YWJFeHQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBmdW5jdGlvbiBDcm9zc3RhYkV4dChkYXRhLCBjb25maWcpIHtcblx0ICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ3Jvc3N0YWJFeHQpO1xuXHRcblx0ICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXHQgICAgICAgIC8vIExpc3Qgb2YgcG9zc2libGUgZXZlbnRzIHJhaXNlZCBieSB0aGUgZGF0YSBzdG9yZS5cblx0ICAgICAgICB0aGlzLmV2ZW50TGlzdCA9IHtcblx0ICAgICAgICAgICAgJ21vZGVsVXBkYXRlZCc6ICdtb2RlbHVwZGF0ZWQnLFxuXHQgICAgICAgICAgICAnbW9kZWxEZWxldGVkJzogJ21vZGVsZGVsZXRlZCcsXG5cdCAgICAgICAgICAgICdtZXRhSW5mb1VwZGF0ZSc6ICdtZXRhaW5mb3VwZGF0ZWQnLFxuXHQgICAgICAgICAgICAncHJvY2Vzc29yVXBkYXRlZCc6ICdwcm9jZXNzb3J1cGRhdGVkJyxcblx0ICAgICAgICAgICAgJ3Byb2Nlc3NvckRlbGV0ZWQnOiAncHJvY2Vzc29yZGVsZXRlZCdcblx0ICAgICAgICB9O1xuXHQgICAgICAgIC8vIFBvdGVudGlhbGx5IHVubmVjZXNzYXJ5IG1lbWJlci5cblx0ICAgICAgICAvLyBUT0RPOiBSZWZhY3RvciBjb2RlIGRlcGVuZGVudCBvbiB2YXJpYWJsZS5cblx0ICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdmFyaWFibGUuXG5cdCAgICAgICAgdGhpcy5zdG9yZVBhcmFtcyA9IHtcblx0ICAgICAgICAgICAgZGF0YTogZGF0YSxcblx0ICAgICAgICAgICAgY29uZmlnOiBjb25maWdcblx0ICAgICAgICB9O1xuXHQgICAgICAgIC8vIEFycmF5IG9mIGNvbHVtbiBuYW1lcyAobWVhc3VyZXMpIHVzZWQgd2hlbiBidWlsZGluZyB0aGUgY3Jvc3N0YWIgYXJyYXkuXG5cdCAgICAgICAgdGhpcy5fY29sdW1uS2V5QXJyID0gW107XG5cdCAgICAgICAgLy8gU2F2aW5nIHByb3ZpZGVkIGNvbmZpZ3VyYXRpb24gaW50byBpbnN0YW5jZS5cblx0ICAgICAgICB0aGlzLm1lYXN1cmVzID0gY29uZmlnLm1lYXN1cmVzO1xuXHQgICAgICAgIHRoaXMuY2hhcnRUeXBlID0gY29uZmlnLmNoYXJ0VHlwZTtcblx0ICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSBjb25maWcuZGltZW5zaW9ucztcblx0ICAgICAgICB0aGlzLmNoYXJ0Q29uZmlnID0gY29uZmlnLmNoYXJ0Q29uZmlnO1xuXHQgICAgICAgIHRoaXMubWVhc3VyZVVuaXRzID0gY29uZmlnLm1lYXN1cmVVbml0cztcblx0ICAgICAgICB0aGlzLmRhdGFJc1NvcnRhYmxlID0gY29uZmlnLmRhdGFJc1NvcnRhYmxlO1xuXHQgICAgICAgIHRoaXMuY3Jvc3N0YWJDb250YWluZXIgPSBjb25maWcuY3Jvc3N0YWJDb250YWluZXI7XG5cdCAgICAgICAgdGhpcy5jZWxsV2lkdGggPSBjb25maWcuY2VsbFdpZHRoIHx8IDIxMDtcblx0ICAgICAgICB0aGlzLmNlbGxIZWlnaHQgPSBjb25maWcuY2VsbEhlaWdodCB8fCAxMTM7XG5cdCAgICAgICAgdGhpcy5zaG93RmlsdGVyID0gY29uZmlnLnNob3dGaWx0ZXIgfHwgZmFsc2U7XG5cdCAgICAgICAgdGhpcy5hZ2dyZWdhdGlvbiA9IGNvbmZpZy5hZ2dyZWdhdGlvbiB8fCAnc3VtJztcblx0ICAgICAgICB0aGlzLmRyYWdnYWJsZUhlYWRlcnMgPSBjb25maWcuZHJhZ2dhYmxlSGVhZGVycyB8fCBmYWxzZTtcblx0ICAgICAgICB0aGlzLm5vRGF0YU1lc3NhZ2UgPSBjb25maWcubm9EYXRhTWVzc2FnZSB8fCAnTm8gZGF0YSB0byBkaXNwbGF5Lic7XG5cdCAgICAgICAgdGhpcy51bml0RnVuY3Rpb24gPSBjb25maWcudW5pdEZ1bmN0aW9uIHx8IGZ1bmN0aW9uICh1bml0KSB7XG5cdCAgICAgICAgICAgIHJldHVybiAnKCcgKyB1bml0ICsgJyknO1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgaWYgKHR5cGVvZiBNdWx0aUNoYXJ0aW5nID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgIHRoaXMubWMgPSBuZXcgTXVsdGlDaGFydGluZygpO1xuXHQgICAgICAgICAgICAvLyBDcmVhdGluZyBhbiBlbXB0eSBkYXRhIHN0b3JlXG5cdCAgICAgICAgICAgIHRoaXMuZGF0YVN0b3JlID0gdGhpcy5tYy5jcmVhdGVEYXRhU3RvcmUoKTtcblx0ICAgICAgICAgICAgLy8gQWRkaW5nIGRhdGEgdG8gdGhlIGRhdGEgc3RvcmVcblx0ICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUuc2V0RGF0YSh7IGRhdGFTb3VyY2U6IHRoaXMuZGF0YSB9KTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011bHRpQ2hhcnRuZyBtb2R1bGUgbm90IGZvdW5kLicpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAodGhpcy5zaG93RmlsdGVyKSB7XG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgRkNEYXRhRmlsdGVyRXh0ID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZmlsdGVyQ29uZmlnID0ge307XG5cdCAgICAgICAgICAgICAgICB0aGlzLmRhdGFGaWx0ZXJFeHQgPSBuZXcgRkNEYXRhRmlsdGVyRXh0KHRoaXMuZGF0YVN0b3JlLCBmaWx0ZXJDb25maWcsICdjb250cm9sLWJveCcpO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhRmlsdGVyIG1vZHVsZSBub3QgZm91bmQuJyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgICAgLy8gQnVpbGRpbmcgYSBkYXRhIHN0cnVjdHVyZSBmb3IgaW50ZXJuYWwgdXNlLlxuXHQgICAgICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHRoaXMuYnVpbGRHbG9iYWxEYXRhKCk7XG5cdCAgICAgICAgLy8gQnVpbGRpbmcgYSBoYXNoIG1hcCBvZiBhcHBsaWNhYmxlIGZpbHRlcnMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGZpbHRlciBmdW5jdGlvbnNcblx0ICAgICAgICB0aGlzLmhhc2ggPSB0aGlzLmdldEZpbHRlckhhc2hNYXAoKTtcblx0ICAgICAgICB0aGlzLmNoYXJ0c0FyZVNvcnRlZCA9IHtcblx0ICAgICAgICAgICAgYm9vbDogZmFsc2UsXG5cdCAgICAgICAgICAgIG9yZGVyOiAnJyxcblx0ICAgICAgICAgICAgbWVhc3VyZTogJydcblx0ICAgICAgICB9O1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogQnVpbGQgYW4gYXJyYXkgb2YgYXJyYXlzIGRhdGEgc3RydWN0dXJlIGZyb20gdGhlIGRhdGEgc3RvcmUgZm9yIGludGVybmFsIHVzZS5cblx0ICAgICAqIEByZXR1cm4ge0FycmF5fSBBbiBhcnJheSBvZiBhcnJheXMgZ2VuZXJhdGVkIGZyb20gdGhlIGRhdGFTdG9yZSdzIGFycmF5IG9mIG9iamVjdHNcblx0ICAgICAqL1xuXHRcblx0XG5cdCAgICBfY3JlYXRlQ2xhc3MoQ3Jvc3N0YWJFeHQsIFt7XG5cdCAgICAgICAga2V5OiAnYnVpbGRHbG9iYWxEYXRhJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRHbG9iYWxEYXRhKCkge1xuXHQgICAgICAgICAgICB2YXIgZGF0YVN0b3JlID0gdGhpcy5kYXRhU3RvcmUsXG5cdCAgICAgICAgICAgICAgICBmaWVsZHMgPSBkYXRhU3RvcmUuZ2V0S2V5cygpO1xuXHQgICAgICAgICAgICBpZiAoZmllbGRzKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgZ2xvYmFsRGF0YSA9IHt9O1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gZmllbGRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBnbG9iYWxEYXRhW2ZpZWxkc1tpXV0gPSBkYXRhU3RvcmUuZ2V0VW5pcXVlVmFsdWVzKGZpZWxkc1tpXSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IGNhdGVnb3JpZXMgZm9yIGNoYXJ0cyAoaS5lLiBubyBzb3J0aW5nIGFwcGxpZWQpXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNhdGVnb3JpZXMgPSBnbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dO1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbERhdGE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBnZW5lcmF0ZSBrZXlzIGZyb20gZGF0YSBzdG9yZScpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZVJvdycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVJvdyh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCwgZmlsdGVyZWREYXRhU3RvcmUpIHtcblx0ICAgICAgICAgICAgdmFyIHJvd3NwYW4gPSAwLFxuXHQgICAgICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSByb3dPcmRlcltjdXJyZW50SW5kZXhdLFxuXHQgICAgICAgICAgICAgICAgZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XSxcblx0ICAgICAgICAgICAgICAgIGksXG5cdCAgICAgICAgICAgICAgICBsID0gZmllbGRWYWx1ZXMubGVuZ3RoLFxuXHQgICAgICAgICAgICAgICAgcm93RWxlbWVudCxcblx0ICAgICAgICAgICAgICAgIGhhc0Z1cnRoZXJEZXB0aCA9IGN1cnJlbnRJbmRleCA8IHJvd09yZGVyLmxlbmd0aCAtIDEsXG5cdCAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuXHQgICAgICAgICAgICAgICAgY29sTGVuZ3RoID0gdGhpcy5fY29sdW1uS2V5QXJyLmxlbmd0aCxcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYsXG5cdCAgICAgICAgICAgICAgICBtaW4gPSBJbmZpbml0eSxcblx0ICAgICAgICAgICAgICAgIG1heCA9IC1JbmZpbml0eSxcblx0ICAgICAgICAgICAgICAgIG1pbm1heE9iaiA9IHt9O1xuXHRcblx0ICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgdGFibGUucHVzaChbXSk7XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjbGFzc1N0ciA9ICcnO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRWYWx1ZXNbaV07XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAodGhpcy5jZWxsSGVpZ2h0IC0gMTApIC8gMiArICdweCc7XG5cdCAgICAgICAgICAgICAgICBjbGFzc1N0ciArPSAncm93LWRpbWVuc2lvbnMnICsgJyAnICsgdGhpcy5kaW1lbnNpb25zW2N1cnJlbnRJbmRleF0udG9Mb3dlckNhc2UoKSArICcgJyArIGZpZWxkVmFsdWVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG5cdCAgICAgICAgICAgICAgICAvLyBpZiAoY3VycmVudEluZGV4ID4gMCkge1xuXHQgICAgICAgICAgICAgICAgLy8gICAgIGh0bWxSZWYuY2xhc3NMaXN0LmFkZCh0aGlzLmRpbWVuc2lvbnNbY3VycmVudEluZGV4IC0gMV0udG9Mb3dlckNhc2UoKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB9XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblx0ICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvcm5lcldpZHRoID0gZmllbGRWYWx1ZXNbaV0ubGVuZ3RoICogMTA7XG5cdCAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuXHQgICAgICAgICAgICAgICAgcm93RWxlbWVudCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jb3JuZXJXaWR0aCxcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1LFxuXHQgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG5cdCAgICAgICAgICAgICAgICBpZiAoaSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3Jvd0VsZW1lbnRdKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChyb3dFbGVtZW50KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChoYXNGdXJ0aGVyRGVwdGgpIHtcblx0ICAgICAgICAgICAgICAgICAgICByb3dFbGVtZW50LnJvd3NwYW4gPSB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCArIDEsIGZpbHRlcmVkRGF0YUhhc2hLZXkpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ZlcnRpY2FsLWF4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0VG9wTWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydEJvdHRvbU1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZVBhZGRpbmcnOiAwLjVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhdGVnb3JpZXMnOiB0aGlzLmNhdGVnb3JpZXMucmV2ZXJzZSgpXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ZlcnRpY2FsLWF4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5J1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29sTGVuZ3RoOyBqICs9IDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJ0Q2VsbE9iaiA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdGhpcy5jZWxsSGVpZ2h0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dIYXNoOiBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sSGFzaDogdGhpcy5fY29sdW1uS2V5QXJyW2pdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnQ6IHRoaXMuZ2V0Q2hhcnRPYmooZmlsdGVyZWREYXRhSGFzaEtleSwgdGhpcy5fY29sdW1uS2V5QXJyW2pdKVsxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NoYXJ0LWNlbGwgJyArIChqICsgMSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGNvbExlbmd0aCAtIDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q2VsbE9iai5jbGFzc05hbWUgPSAnY2hhcnQtY2VsbCBsYXN0LWNvbCc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChjaGFydENlbGxPYmopO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtaW5tYXhPYmogPSB0aGlzLmdldENoYXJ0T2JqKHRoaXMuZGF0YVN0b3JlLCB0aGlzLmNhdGVnb3JpZXMsIGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuX2NvbHVtbktleUFycltqXSlbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1heCA9IHBhcnNlSW50KG1pbm1heE9iai5tYXgpID4gbWF4ID8gbWlubWF4T2JqLm1heCA6IG1heDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gcGFyc2VJbnQobWlubWF4T2JqLm1pbikgPCBtaW4gPyBtaW5tYXhPYmoubWluIDogbWluO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaGFydENlbGxPYmoubWF4ID0gbWF4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaGFydENlbGxPYmoubWluID0gbWluO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJvd3NwYW4gKz0gcm93RWxlbWVudC5yb3dzcGFuO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiByb3dzcGFuO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjcmVhdGVNZWFzdXJlSGVhZGluZ3MnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVNZWFzdXJlSGVhZGluZ3ModGFibGUsIGRhdGEsIG1lYXN1cmVPcmRlcikge1xuXHQgICAgICAgICAgICB2YXIgY29sc3BhbiA9IDAsXG5cdCAgICAgICAgICAgICAgICBpLFxuXHQgICAgICAgICAgICAgICAgbCA9IHRoaXMubWVhc3VyZXMubGVuZ3RoLFxuXHQgICAgICAgICAgICAgICAgY29sRWxlbWVudCxcblx0ICAgICAgICAgICAgICAgIGFzY2VuZGluZ1NvcnRCdG4sXG5cdCAgICAgICAgICAgICAgICBkZXNjZW5kaW5nU29ydEJ0bixcblx0ICAgICAgICAgICAgICAgIGhlYWRpbmdUZXh0LFxuXHQgICAgICAgICAgICAgICAgaGVhZGluZ1RleHRTcGFuLFxuXHQgICAgICAgICAgICAgICAgbWVhc3VyZUhlYWRpbmcsXG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLFxuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LFxuXHQgICAgICAgICAgICAgICAgZHJhZ0Rpdjtcblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjbGFzc1N0ciA9ICcnLFxuXHQgICAgICAgICAgICAgICAgICAgIGZpZWxkQ29tcG9uZW50ID0gbWVhc3VyZU9yZGVyW2ldLFxuXHQgICAgICAgICAgICAgICAgICAgIG1lYXN1cmVVbml0ID0gJycsXG5cdCAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRpb25Ob2RlID0gdm9pZCAwO1xuXHQgICAgICAgICAgICAgICAgLy8gZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XTtcblx0ICAgICAgICAgICAgICAgIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcblx0ICAgICAgICAgICAgICAgIGRyYWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICAgICAgICAgIGRyYWdEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZWFzdXJlLWRyYWctaGFuZGxlJyk7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLmhlaWdodCA9ICc1cHgnO1xuXHQgICAgICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nVG9wID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMXB4Jztcblx0ICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kRHJhZ0hhbmRsZShkcmFnRGl2LCAyNSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnNldEF0dHJpYnV0ZSgnZGF0YS1tZWFzdXJlJywgZmllbGRDb21wb25lbnQpO1xuXHRcblx0ICAgICAgICAgICAgICAgIG1lYXN1cmVVbml0ID0gdGhpcy5tZWFzdXJlVW5pdHNbdGhpcy5tZWFzdXJlcy5pbmRleE9mKGZpZWxkQ29tcG9uZW50KV07XG5cdCAgICAgICAgICAgICAgICBpZiAobWVhc3VyZVVuaXQubGVuZ3RoID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgIG1lYXN1cmVIZWFkaW5nID0gZmllbGRDb21wb25lbnQgKyAnICcgKyB0aGlzLnVuaXRGdW5jdGlvbihtZWFzdXJlVW5pdCk7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIG1lYXN1cmVIZWFkaW5nID0gZmllbGRDb21wb25lbnQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgaGVhZGluZ1RleHRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHQgICAgICAgICAgICAgICAgaGVhZGluZ1RleHRTcGFuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVhc3VyZS1zcGFuJyk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaGVhZGluZ1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICAgICAgICAgIGhlYWRpbmdUZXh0LmlubmVySFRNTCA9IG1lYXN1cmVIZWFkaW5nO1xuXHQgICAgICAgICAgICAgICAgaGVhZGluZ1RleHQuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZWFzdXJlLXRleHQnKTtcblx0ICAgICAgICAgICAgICAgIGhlYWRpbmdUZXh0U3Bhbi5hcHBlbmRDaGlsZChoZWFkaW5nVGV4dCk7XG5cdFxuXHQgICAgICAgICAgICAgICAgYWdncmVnYXRpb25Ob2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgICAgICAgICAgICAgICBhZ2dyZWdhdGlvbk5vZGUuaW5uZXJIVE1MID0gdGhpcy5hZ2dyZWdhdGlvbi5zcGxpdCgnJykucmVkdWNlKGZ1bmN0aW9uIChhLCBiLCBpZHgpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWR4ID09PSAxID8gYS50b1VwcGVyQ2FzZSgpICsgYiA6IGEgKyBiO1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICBhZ2dyZWdhdGlvbk5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZWFzdXJlLWFnZ3JlZ2F0aW9uJyk7XG5cdCAgICAgICAgICAgICAgICBoZWFkaW5nVGV4dFNwYW4uYXBwZW5kQ2hpbGQoYWdncmVnYXRpb25Ob2RlKTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBoZWFkaW5nVGV4dFNwYW4gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShmaWVsZENvbXBvbmVudCk7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhSXNTb3J0YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGFzY2VuZGluZ1NvcnRCdG4gPSB0aGlzLmNyZWF0ZVNvcnRCdXR0b24oJ2FzY2VuZGluZy1zb3J0Jyk7XG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbFJlZi5hcHBlbmRDaGlsZChhc2NlbmRpbmdTb3J0QnRuKTtcblx0XG5cdCAgICAgICAgICAgICAgICAgICAgZGVzY2VuZGluZ1NvcnRCdG4gPSB0aGlzLmNyZWF0ZVNvcnRCdXR0b24oJ2Rlc2NlbmRpbmctc29ydCcpO1xuXHQgICAgICAgICAgICAgICAgICAgIGh0bWxSZWYuYXBwZW5kQ2hpbGQoZGVzY2VuZGluZ1NvcnRCdG4pO1xuXHRcblx0ICAgICAgICAgICAgICAgICAgICBodG1sUmVmLmFwcGVuZENoaWxkKGFzY2VuZGluZ1NvcnRCdG4pO1xuXHQgICAgICAgICAgICAgICAgICAgIGh0bWxSZWYuYXBwZW5kQ2hpbGQoaGVhZGluZ1RleHRTcGFuKTtcblx0ICAgICAgICAgICAgICAgICAgICBodG1sUmVmLmFwcGVuZENoaWxkKGRlc2NlbmRpbmdTb3J0QnRuKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbFJlZi5hcHBlbmRDaGlsZChoZWFkaW5nVGV4dFNwYW4pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICc1cHgnO1xuXHQgICAgICAgICAgICAgICAgLy8gaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGggLSAxNSkgLyAyKSArICdweCc7XG5cdCAgICAgICAgICAgICAgICAvLyBodG1sUmVmLmFwcGVuZENoaWxkKGFnZ3JlZ2F0aW9uTm9kZSk7XG5cdCAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuXHRcblx0ICAgICAgICAgICAgICAgIGNsYXNzU3RyICs9ICdjb2x1bW4tbWVhc3VyZXMgJyArIHRoaXMubWVhc3VyZXNbaV0udG9Mb3dlckNhc2UoKSArICcgbm8tc2VsZWN0Jztcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZUhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc1N0ciArPSAnIGRyYWdnYWJsZSc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvcm5lckhlaWdodCA9IGh0bWxSZWYub2Zmc2V0SGVpZ2h0O1xuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChodG1sUmVmKTtcblx0XG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoZHJhZ0Rpdik7XG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG5cdCAgICAgICAgICAgICAgICBjb2xFbGVtZW50ID0ge1xuXHQgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29ybmVySGVpZ2h0ICsgNSxcblx0ICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbDogaGVhZGVyRGl2Lm91dGVySFRNTCxcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY29sdW1uS2V5QXJyLnB1c2godGhpcy5tZWFzdXJlc1tpXSk7XG5cdCAgICAgICAgICAgICAgICB0YWJsZVswXS5wdXNoKGNvbEVsZW1lbnQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBjb2xzcGFuO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjcmVhdGVEaW1lbnNpb25IZWFkaW5ncycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURpbWVuc2lvbkhlYWRpbmdzKGNvbE9yZGVyTGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIHZhciBjb3JuZXJDZWxsQXJyID0gW10sXG5cdCAgICAgICAgICAgICAgICBpID0gMCxcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYsXG5cdCAgICAgICAgICAgICAgICBjbGFzc1N0ciA9ICcnLFxuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LFxuXHQgICAgICAgICAgICAgICAgZHJhZ0Rpdjtcblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICAgICAgICAgIGhlYWRlckRpdi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGltZW5zaW9uLWRyYWctaGFuZGxlJyk7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLmhlaWdodCA9ICc1cHgnO1xuXHQgICAgICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nVG9wID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMXB4Jztcblx0ICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kRHJhZ0hhbmRsZShkcmFnRGl2LCAyNSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gdGhpcy5kaW1lbnNpb25zW2ldWzBdLnRvVXBwZXJDYXNlKCkgKyB0aGlzLmRpbWVuc2lvbnNbaV0uc3Vic3RyKDEpO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gJzVweCc7XG5cdCAgICAgICAgICAgICAgICBjbGFzc1N0ciA9ICdkaW1lbnNpb24taGVhZGVyICcgKyB0aGlzLmRpbWVuc2lvbnNbaV0udG9Mb3dlckNhc2UoKSArICcgbm8tc2VsZWN0Jztcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZUhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc1N0ciArPSAnIGRyYWdnYWJsZSc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoZHJhZ0Rpdik7XG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG5cdCAgICAgICAgICAgICAgICBjb3JuZXJDZWxsQXJyLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmRpbWVuc2lvbnNbaV0ubGVuZ3RoICogMTAsXG5cdCAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzNSxcblx0ICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbDogaGVhZGVyRGl2Lm91dGVySFRNTCxcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gY29ybmVyQ2VsbEFycjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlVmVydGljYWxBeGlzSGVhZGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlVmVydGljYWxBeGlzSGVhZGVyKCkge1xuXHQgICAgICAgICAgICB2YXIgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSAnJztcblx0ICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcblx0ICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG5cdCAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXhpcy1oZWFkZXItY2VsbCdcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlQ2FwdGlvbicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUNhcHRpb24obWF4TGVuZ3RoKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBbe1xuXHQgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MCxcblx0ICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICBjb2xzcGFuOiBtYXhMZW5ndGgsXG5cdCAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdjYXB0aW9uLWNoYXJ0Jyxcblx0ICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLm1jLmNoYXJ0KHtcblx0ICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdjYXB0aW9uJyxcblx0ICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcblx0ICAgICAgICAgICAgICAgICAgICAnY29uZmlnJzoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FwdGlvbic6ICdTYWxlIG9mIENlcmVhbCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViY2FwdGlvbic6ICdBY3Jvc3MgU3RhdGVzLCBBY3Jvc3MgWWVhcnMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6ICcwJ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgfV07XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUNyb3NzdGFiJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ3Jvc3N0YWIoKSB7XG5cdCAgICAgICAgICAgIHZhciBvYmogPSB0aGlzLmdsb2JhbERhdGEsXG5cdCAgICAgICAgICAgICAgICByb3dPcmRlciA9IHRoaXMuZGltZW5zaW9ucy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodmFsICE9PSBhcnJbYXJyLmxlbmd0aCAtIDFdKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pLFxuXHQgICAgICAgICAgICAgICAgY29sT3JkZXIgPSB0aGlzLm1lYXN1cmVzLmZpbHRlcihmdW5jdGlvbiAodmFsLCBpLCBhcnIpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoXSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KSxcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gW10sXG5cdCAgICAgICAgICAgICAgICB4QXhpc1JvdyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSAwO1xuXHQgICAgICAgICAgICBpZiAob2JqKSB7XG5cdCAgICAgICAgICAgICAgICAvLyBJbnNlcnQgZGltZW5zaW9uIGhlYWRpbmdzXG5cdCAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHRoaXMuY3JlYXRlRGltZW5zaW9uSGVhZGluZ3ModGFibGUsIGNvbE9yZGVyLmxlbmd0aCkpO1xuXHQgICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHZlcnRpY2FsIGF4aXMgaGVhZGVyXG5cdCAgICAgICAgICAgICAgICB0YWJsZVswXS5wdXNoKHRoaXMuY3JlYXRlVmVydGljYWxBeGlzSGVhZGVyKCkpO1xuXHQgICAgICAgICAgICAgICAgLy8gSW5zZXJ0IG1lYXN1cmUgaGVhZGluZ3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlTWVhc3VyZUhlYWRpbmdzKHRhYmxlLCBvYmosIHRoaXMubWVhc3VyZXMpO1xuXHQgICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHJvd3Ncblx0ICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUm93KHRhYmxlLCBvYmosIHJvd09yZGVyLCAwLCAnJyk7XG5cdCAgICAgICAgICAgICAgICAvLyBGaW5kIHJvdyB3aXRoIG1heCBsZW5ndGggaW4gdGhlIHRhYmxlXG5cdCAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSBtYXhMZW5ndGggPCB0YWJsZVtpXS5sZW5ndGggPyB0YWJsZVtpXS5sZW5ndGggOiBtYXhMZW5ndGg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvLyBQdXNoIGJsYW5rIHBhZGRpbmcgY2VsbHMgdW5kZXIgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIHNhbWUgcm93IGFzIHRoZSBob3Jpem9udGFsIGF4aXNcblx0ICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2JsYW5rLWNlbGwnXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgLy8gRXh0cmEgY2VsbCBmb3IgeSBheGlzLiBFc3NlbnRpYWxseSBZIGF4aXMgZm9vdGVyLlxuXHQgICAgICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG5cdCAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQwLFxuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F4aXMtZm9vdGVyLWNlbGwnXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgICAgICAgICAvLyBQdXNoIGhvcml6b250YWwgYXhlcyBpbnRvIHRoZSBsYXN0IHJvdyBvZiB0aGUgdGFibGVcblx0ICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXhMZW5ndGggLSB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaG9yaXpvbnRhbC1heGlzJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLm1jLmNoYXJ0KHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdheGlzJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnJzoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXNIb3Jpem9udGFsJzogMVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaG9yaXpvbnRhbC1heGlzJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLm1jLmNoYXJ0KHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdheGlzJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlnJzoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0TGVmdE1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFJpZ2h0TWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydFJpZ2h0TWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlUGFkZGluZyc6IDAuNVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2F0ZWdvcmllcyc6IHRoaXMuY2F0ZWdvcmllc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHhBeGlzUm93KTtcblx0ICAgICAgICAgICAgICAgIC8vIFBsYWNlIHRoZSBjYXB0aW9uIGNlbGwgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgdGFibGVcblx0ICAgICAgICAgICAgICAgIHRhYmxlLnVuc2hpZnQodGhpcy5jcmVhdGVDYXB0aW9uKG1heExlbmd0aCkpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5fY29sdW1uS2V5QXJyID0gW107XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAvLyBObyBkYXRhIGZvciBjcm9zc3RhYi4gOihcblx0ICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3tcblx0ICAgICAgICAgICAgICAgICAgICBodG1sOiAnPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj4nICsgdGhpcy5ub0RhdGFNZXNzYWdlICsgJzwvcD4nLFxuXHQgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoXG5cdCAgICAgICAgICAgICAgICB9XSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRhYmxlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjcmVhdGVGaWx0ZXJzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRmlsdGVycygpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHZhciBmaWx0ZXJzID0gW10sXG5cdCAgICAgICAgICAgICAgICBkaW1lbnNpb25zID0gdGhpcy5kaW1lbnNpb25zLnNsaWNlKDAsIHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxKSxcblx0ICAgICAgICAgICAgICAgIG1hdGNoZWRWYWx1ZXMgPSB2b2lkIDA7XG5cdFxuXHQgICAgICAgICAgICBkaW1lbnNpb25zLmZvckVhY2goZnVuY3Rpb24gKGRpbWVuc2lvbikge1xuXHQgICAgICAgICAgICAgICAgbWF0Y2hlZFZhbHVlcyA9IF90aGlzLmdsb2JhbERhdGFbZGltZW5zaW9uXTtcblx0ICAgICAgICAgICAgICAgIG1hdGNoZWRWYWx1ZXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IF90aGlzLmZpbHRlckdlbihkaW1lbnNpb24sIHZhbHVlLnRvU3RyaW5nKCkpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWYWw6IHZhbHVlXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICByZXR1cm4gZmlsdGVycztcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlRGF0YUNvbWJvcycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURhdGFDb21ib3MoKSB7XG5cdCAgICAgICAgICAgIHZhciByID0gW10sXG5cdCAgICAgICAgICAgICAgICBnbG9iYWxBcnJheSA9IHRoaXMubWFrZUdsb2JhbEFycmF5KCksXG5cdCAgICAgICAgICAgICAgICBtYXggPSBnbG9iYWxBcnJheS5sZW5ndGggLSAxO1xuXHRcblx0ICAgICAgICAgICAgZnVuY3Rpb24gcmVjdXJzZShhcnIsIGkpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBsID0gZ2xvYmFsQXJyYXlbaV0ubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBhcnIuc2xpY2UoMCk7XG5cdCAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGdsb2JhbEFycmF5W2ldW2pdKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbWF4KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHIucHVzaChhKTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNlKGEsIGkgKyAxKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmVjdXJzZShbXSwgMCk7XG5cdCAgICAgICAgICAgIHJldHVybiByO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdtYWtlR2xvYmFsQXJyYXknLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlR2xvYmFsQXJyYXkoKSB7XG5cdCAgICAgICAgICAgIHZhciB0ZW1wT2JqID0ge30sXG5cdCAgICAgICAgICAgICAgICB0ZW1wQXJyID0gW107XG5cdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5nbG9iYWxEYXRhKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5nbG9iYWxEYXRhLmhhc093blByb3BlcnR5KGtleSkgJiYgdGhpcy5kaW1lbnNpb25zLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiYga2V5ICE9PSB0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGVtcE9ialtrZXldID0gdGhpcy5nbG9iYWxEYXRhW2tleV07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGVtcEFyciA9IE9iamVjdC5rZXlzKHRlbXBPYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGVtcE9ialtrZXldO1xuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgcmV0dXJuIHRlbXBBcnI7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldEZpbHRlckhhc2hNYXAnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWx0ZXJIYXNoTWFwKCkge1xuXHQgICAgICAgICAgICB2YXIgZmlsdGVycyA9IHRoaXMuY3JlYXRlRmlsdGVycygpLFxuXHQgICAgICAgICAgICAgICAgZGF0YUNvbWJvcyA9IHRoaXMuY3JlYXRlRGF0YUNvbWJvcygpLFxuXHQgICAgICAgICAgICAgICAgaGFzaE1hcCA9IHt9O1xuXHRcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBkYXRhQ29tYm9zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGRhdGFDb21ibyA9IGRhdGFDb21ib3NbaV0sXG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gJycsXG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBbXTtcblx0XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbGVuID0gZGF0YUNvbWJvLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgayA9IDAsIGxlbmd0aCA9IGZpbHRlcnMubGVuZ3RoOyBrIDwgbGVuZ3RoOyBrKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbHRlclZhbCA9IGZpbHRlcnNba10uZmlsdGVyVmFsO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUNvbWJvW2pdID09PSBmaWx0ZXJWYWwpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IGRhdGFDb21ib1tqXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9ICd8JyArIGRhdGFDb21ib1tqXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goZmlsdGVyc1trXS5maWx0ZXIpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGhhc2hNYXA7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2FwcGVuZERyYWdIYW5kbGUnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmREcmFnSGFuZGxlKG5vZGUsIG51bUhhbmRsZXMpIHtcblx0ICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDAsXG5cdCAgICAgICAgICAgICAgICBoYW5kbGVTcGFuID0gdm9pZCAwO1xuXHQgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtSGFuZGxlczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBoYW5kbGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHQgICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzFweCc7XG5cdCAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLmZvbnRTaXplID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLmxpbmVIZWlnaHQgPSAnMSc7XG5cdCAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAndG9wJztcblx0ICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoaGFuZGxlU3Bhbik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlU29ydEJ1dHRvbicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVNvcnRCdXR0b24oY2xhc3NOYW1lKSB7XG5cdCAgICAgICAgICAgIHZhciBzb3J0QnRuID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgY2xhc3NTdHIgPSAnc29ydC1idG4nICsgJyAnICsgKGNsYXNzTmFtZSB8fCAnJyk7XG5cdCAgICAgICAgICAgIHNvcnRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG5cdCAgICAgICAgICAgIHNvcnRCdG4uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzU3RyLnRyaW0oKSk7XG5cdCAgICAgICAgICAgIHNvcnRCdG4uc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuXHQgICAgICAgICAgICBzb3J0QnRuLnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lLWJsb2NrJztcblx0ICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gJ2FzY2VuZGluZy1zb3J0Jykge1xuXHQgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRBc2NlbmRpbmdTdGVwcyhzb3J0QnRuLCA0KTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT09ICdkZXNjZW5kaW5nLXNvcnQnKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZERlc2NlbmRpbmdTdGVwcyhzb3J0QnRuLCA0KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gc29ydEJ0bjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnYXBwZW5kQXNjZW5kaW5nU3RlcHMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmRBc2NlbmRpbmdTdGVwcyhidG4sIG51bVN0ZXBzKSB7XG5cdCAgICAgICAgICAgIHZhciBpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgbm9kZSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIG1hcmdpblZhbHVlID0gMixcblx0ICAgICAgICAgICAgICAgIGRpdldpZHRoID0gMTtcblx0ICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8PSBudW1TdGVwczsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuXHQgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0ICAgICAgICAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gJ3NvcnQtc3RlcHMgYXNjZW5kaW5nJztcblx0ICAgICAgICAgICAgICAgIGRpdldpZHRoID0gZGl2V2lkdGggKyBpIC8gZGl2V2lkdGggKiA0O1xuXHQgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IGRpdldpZHRoLnRvRml4ZWQoKSArICdweCc7XG5cdCAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbnVtU3RlcHMgLSAxKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5tYXJnaW5Ub3AgPSBtYXJnaW5WYWx1ZSArICdweCc7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUubWFyZ2luVG9wID0gbWFyZ2luVmFsdWUgKyAncHgnO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgYnRuLmFwcGVuZENoaWxkKG5vZGUpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2FwcGVuZERlc2NlbmRpbmdTdGVwcycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGVuZERlc2NlbmRpbmdTdGVwcyhidG4sIG51bVN0ZXBzKSB7XG5cdCAgICAgICAgICAgIHZhciBpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgbm9kZSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIG1hcmdpblZhbHVlID0gMixcblx0ICAgICAgICAgICAgICAgIGRpdldpZHRoID0gMTA7XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPD0gbnVtU3RlcHM7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0ICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdCAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9ICdzb3J0LXN0ZXBzIGRlc2NlbmRpbmcnO1xuXHQgICAgICAgICAgICAgICAgZGl2V2lkdGggPSBkaXZXaWR0aCAtIGkgLyBkaXZXaWR0aCAqIDU7XG5cdCAgICAgICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gZGl2V2lkdGgudG9GaXhlZCgpICsgJ3B4Jztcblx0ICAgICAgICAgICAgICAgIGlmIChpID09PSBudW1TdGVwcyAtIDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLm1hcmdpblRvcCA9IG1hcmdpblZhbHVlICsgJ3B4Jztcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5tYXJnaW5Ub3AgPSBtYXJnaW5WYWx1ZSArICdweCc7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBidG4uYXBwZW5kQ2hpbGQobm9kZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAncmVuZGVyQ3Jvc3N0YWInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJDcm9zc3RhYigpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgZ2xvYmFsTWF4ID0gLUluZmluaXR5LFxuXHQgICAgICAgICAgICAgICAgZ2xvYmFsTWluID0gSW5maW5pdHksXG5cdCAgICAgICAgICAgICAgICB5QXhpcyA9IHZvaWQgMDtcblx0XG5cdCAgICAgICAgICAgIC8vIEdlbmVyYXRlIHRoZSBjcm9zc3RhYiBhcnJheVxuXHQgICAgICAgICAgICB0aGlzLmNyb3NzdGFiID0gdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuXHRcblx0ICAgICAgICAgICAgLy8gRmluZCB0aGUgZ2xvYmFsIG1heGltdW0gYW5kIG1pbmltdW0gZm9yIHRoZSBheGVzXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvd0xhc3RDaGFydCA9IHRoaXMuY3Jvc3N0YWJbaV1bdGhpcy5jcm9zc3RhYltpXS5sZW5ndGggLSAxXTtcblx0ICAgICAgICAgICAgICAgIGlmIChyb3dMYXN0Q2hhcnQubWF4IHx8IHJvd0xhc3RDaGFydC5taW4pIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWF4IDwgcm93TGFzdENoYXJ0Lm1heCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSByb3dMYXN0Q2hhcnQubWF4O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWluID4gcm93TGFzdENoYXJ0Lm1pbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSByb3dMYXN0Q2hhcnQubWluO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBZIGF4aXMgY2hhcnRzIGluIHRoZSBjcm9zc3RhYiBhcnJheSB3aXRoIHRoZSBnbG9iYWwgbWF4aW11bSBhbmQgbWluaW11bVxuXHQgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9paSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBfaSA8IF9paTsgX2krKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuY3Jvc3N0YWJbX2ldLFxuXHQgICAgICAgICAgICAgICAgICAgIHJvd0F4aXMgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjcm9zc3RhYkVsZW1lbnQgPSByb3dbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzdGFiRWxlbWVudC5jaGFydCAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm93QXhpcyA9IGNyb3NzdGFiRWxlbWVudDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0F4aXMuY2hhcnQuY29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXNDaGFydCA9IHJvd0F4aXMuY2hhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gYXhpc0NoYXJ0LmNvbmY7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY29uZmlnLmNoYXJ0ID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1heCc6IGdsb2JhbE1heCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0Qm90dG9tTWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRUb3BNYXJnaW5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY29uZmlnLmNoYXJ0ID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1pbic6IGdsb2JhbE1pbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1heCc6IGdsb2JhbE1heCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0TGVmdE1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0UmlnaHRNYXJnaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpc0hvcml6b250YWwnOiAxXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNDaGFydCA9IHRoaXMubWMuY2hhcnQoY29uZmlnKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0F4aXMuY2hhcnQgPSBheGlzQ2hhcnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIC8vIERyYXcgdGhlIGNyb3NzdGFiIHdpdGggb25seSB0aGUgYXhlcywgY2FwdGlvbiBhbmQgaHRtbCB0ZXh0LlxuXHQgICAgICAgICAgICAvLyBSZXF1aXJlZCBzaW5jZSBheGVzIGNhbm5vdCByZXR1cm4gbGltaXRzIHVubGVzcyB0aGV5IGFyZSBkcmF3blxuXHQgICAgICAgICAgICB0aGlzLmNyZWF0ZU11bHRpQ2hhcnQodGhpcy5jcm9zc3RhYik7XG5cdFxuXHQgICAgICAgICAgICAvLyBGaW5kIGEgWSBBeGlzIGNoYXJ0XG5cdCAgICAgICAgICAgIHlBeGlzID0geUF4aXMgfHwgdGhpcy5maW5kWUF4aXNDaGFydCgpO1xuXHRcblx0ICAgICAgICAgICAgLy8gUGxhY2UgYSBjaGFydCBvYmplY3Qgd2l0aCBsaW1pdHMgZnJvbSB0aGUgWSBBeGlzIGluIHRoZSBjb3JyZWN0IGNlbGxcblx0ICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX2lpMiA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBfaTIgPCBfaWkyOyBfaTIrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9yb3cgPSB0aGlzLmNyb3NzdGFiW19pMl07XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBfaiA9IDAsIF9qaiA9IF9yb3cubGVuZ3RoOyBfaiA8IF9qajsgX2orKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfY3Jvc3N0YWJFbGVtZW50ID0gX3Jvd1tfal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHlBeGlzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2Nyb3NzdGFiRWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnaHRtbCcpICYmICFfY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdjaGFydCcpICYmIF9jcm9zc3RhYkVsZW1lbnQuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcgJiYgX2Nyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdheGlzLWZvb3Rlci1jZWxsJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJ0ID0geUF4aXMuY2hhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRJbnN0YW5jZSA9IGNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSBjaGFydEluc3RhbmNlLmdldExpbWl0cygpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbWl0ID0gbGltaXRzWzBdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExpbWl0ID0gbGltaXRzWzFdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0T2JqID0gdGhpcy5nZXRDaGFydE9iaih0aGlzLmRhdGFTdG9yZSwgdGhpcy5jYXRlZ29yaWVzLCBfY3Jvc3N0YWJFbGVtZW50LnJvd0hhc2gsIF9jcm9zc3RhYkVsZW1lbnQuY29sSGFzaCwgbWluTGltaXQsIG1heExpbWl0KVsxXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jcm9zc3RhYkVsZW1lbnQuY2hhcnQgPSBjaGFydE9iajtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBjcm9zc3RhYlxuXHQgICAgICAgICAgICB0aGlzLmNyZWF0ZU11bHRpQ2hhcnQodGhpcy5jcm9zc3RhYik7XG5cdFxuXHQgICAgICAgICAgICAvLyBVcGRhdGUgY3Jvc3N0YWIgd2hlbiB0aGUgbW9kZWwgdXBkYXRlc1xuXHQgICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnRMaXN0Lm1vZGVsVXBkYXRlZCwgZnVuY3Rpb24gKGUsIGQpIHtcblx0ICAgICAgICAgICAgICAgIF90aGlzMi5nbG9iYWxEYXRhID0gX3RoaXMyLmJ1aWxkR2xvYmFsRGF0YSgpO1xuXHQgICAgICAgICAgICAgICAgX3RoaXMyLnVwZGF0ZUNyb3NzdGFiKCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICAgICAgLy8gQXR0YWNoIGV2ZW50IGxpc3RlbmVycyB0byBjb25jdXJyZW50bHkgaGlnaGxpZ2h0IHBsb3RzIHdoZW4gaG92ZXJlZCBpblxuXHQgICAgICAgICAgICB0aGlzLm1jLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyaW4nLCBmdW5jdGlvbiAoZXZ0LCBkYXRhKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kzID0gMCwgX2lpMyA9IF90aGlzMi5jcm9zc3RhYi5sZW5ndGg7IF9pMyA8IF9paTM7IF9pMysrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfcm93MiA9IF90aGlzMi5jcm9zc3RhYltfaTNdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9yb3cyLmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3JvdzJbal0uY2hhcnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfcm93MltqXS5jaGFydC5jb25mLnR5cGUgPT09ICdjYXB0aW9uJyB8fCBfcm93MltqXS5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxBZGFwdGVyID0gX3JvdzJbal0uY2hhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeSA9IF90aGlzMi5kaW1lbnNpb25zW190aGlzMi5kaW1lbnNpb25zLmxlbmd0aCAtIDFdLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlWYWwgPSBkYXRhLmRhdGFbY2F0ZWdvcnldO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoY2F0ZWdvcnlWYWwpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICAvLyBBdHRhY2ggZXZlbnQgbGlzdGVuZXJzIHRvIGNvbmN1cnJlbnRseSByZW1vdmUgaGlnaGxpZ2h0cyBmcm9tIHBsb3RzIHdoZW4gaG92ZXJlZCBvdXRcblx0ICAgICAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3Zlcm91dCcsIGZ1bmN0aW9uIChldnQsIGRhdGEpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF9paTQgPSBfdGhpczIuY3Jvc3N0YWIubGVuZ3RoOyBfaTQgPCBfaWk0OyBfaTQrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfcm93MyA9IF90aGlzMi5jcm9zc3RhYltfaTRdO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX3JvdzMubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9yb3czW2pdLmNoYXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfcm93M1tqXS5jaGFydC5jb25mLnR5cGUgPT09ICdjYXB0aW9uJyB8fCBfcm93M1tqXS5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbEFkYXB0ZXIgPSBfcm93M1tqXS5jaGFydDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3VwZGF0ZUNyb3NzdGFiJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlQ3Jvc3N0YWIoKSB7XG5cdCAgICAgICAgICAgIHZhciBmaWx0ZXJlZENyb3NzdGFiID0gdGhpcy5jcmVhdGVDcm9zc3RhYigpLFxuXHQgICAgICAgICAgICAgICAgaSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGlpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgaiA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGpqID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgb2xkQ2hhcnRzID0gW10sXG5cdCAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSAtSW5maW5pdHksXG5cdCAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSBJbmZpbml0eSxcblx0ICAgICAgICAgICAgICAgIGF4aXNMaW1pdHMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuXHQgICAgICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gcm93W2pdO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLmNoYXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFydENvbmYgPSBjZWxsLmNoYXJ0LmdldENvbmYoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJ0Q29uZi50eXBlICE9PSAnY2FwdGlvbicgJiYgY2hhcnRDb25mLnR5cGUgIT09ICdheGlzJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ2hhcnRzLnB1c2goY2VsbCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gZmlsdGVyZWRDcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgX3JvdzQgPSBmaWx0ZXJlZENyb3NzdGFiW2ldO1xuXHQgICAgICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSBfcm93NC5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIF9jZWxsID0gX3JvdzRbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKF9jZWxsLnJvd0hhc2ggJiYgX2NlbGwuY29sSGFzaCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2xkQ2hhcnQgPSB0aGlzLmdldE9sZENoYXJ0KG9sZENoYXJ0cywgX2NlbGwucm93SGFzaCwgX2NlbGwuY29sSGFzaCksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSB7fTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvbGRDaGFydCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJ0T2JqID0gdGhpcy5nZXRDaGFydE9iaih0aGlzLmRhdGFTdG9yZSwgdGhpcy5jYXRlZ29yaWVzLCBfY2VsbC5yb3dIYXNoLCBfY2VsbC5jb2xIYXNoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZENoYXJ0ID0gY2hhcnRPYmpbMV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSBjaGFydE9ialswXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBfY2VsbC5jaGFydCA9IG9sZENoYXJ0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobGltaXRzKS5sZW5ndGggIT09IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jZWxsLm1heCA9IGxpbWl0cy5tYXg7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2VsbC5taW4gPSBsaW1pdHMubWluO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGZpbHRlcmVkQ3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9yb3c1ID0gZmlsdGVyZWRDcm9zc3RhYltpXTtcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gX3JvdzUubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfY2VsbDIgPSBfcm93NVtqXTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoX2NlbGwyLm1heCB8fCBfY2VsbDIubWluKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxNYXggPCBfY2VsbDIubWF4KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSBfY2VsbDIubWF4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxNaW4gPiBfY2VsbDIubWluKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSBfY2VsbDIubWluO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGZpbHRlcmVkQ3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9yb3c2ID0gZmlsdGVyZWRDcm9zc3RhYltpXTtcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gX3JvdzYubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfY2VsbDMgPSBfcm93NltqXTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoX2NlbGwzLmNoYXJ0ICYmIF9jZWxsMy5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93QXhpcyA9IF9jZWxsMztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0F4aXMuY2hhcnQuY29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF4aXNDaGFydCA9IHJvd0F4aXMuY2hhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gYXhpc0NoYXJ0LmNvbmY7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY29uZmlnLmNoYXJ0ID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1heCc6IGdsb2JhbE1heCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0Qm90dG9tTWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRUb3BNYXJnaW5cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY29uZmlnLmNoYXJ0ID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1pbic6IGdsb2JhbE1pbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1heCc6IGdsb2JhbE1heCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0TGVmdE1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0UmlnaHRNYXJnaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpc0hvcml6b250YWwnOiAxXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNDaGFydCA9IHRoaXMubWMuY2hhcnQoY29uZmlnKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0F4aXMuY2hhcnQgPSBheGlzQ2hhcnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHRoaXMuY3Jvc3N0YWIgPSBmaWx0ZXJlZENyb3NzdGFiO1xuXHQgICAgICAgICAgICB0aGlzLmNyZWF0ZU11bHRpQ2hhcnQoKTtcblx0ICAgICAgICAgICAgYXhpc0xpbWl0cyA9IHRoaXMuZ2V0WUF4aXNMaW1pdHMoKTtcblx0XG5cdCAgICAgICAgICAgIGZvciAodmFyIF9pNSA9IDAsIF9paTUgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgX2k1IDwgX2lpNTsgX2k1KyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBfcm93NyA9IHRoaXMuY3Jvc3N0YWJbX2k1XTtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIF9qMiA9IDAsIF9qajIgPSBfcm93Ny5sZW5ndGg7IF9qMiA8IF9qajI7IF9qMisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNyb3NzdGFiRWxlbWVudCA9IF9yb3c3W19qMl07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFjcm9zc3RhYkVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2h0bWwnKSAmJiBjcm9zc3RhYkVsZW1lbnQuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcgJiYgY3Jvc3N0YWJFbGVtZW50LmNsYXNzTmFtZSAhPT0gJ2F4aXMtZm9vdGVyLWNlbGwnICYmIGNyb3NzdGFiRWxlbWVudC5jaGFydC5nZXRDb25mKCkudHlwZSAhPT0gJ2NhcHRpb24nICYmIGNyb3NzdGFiRWxlbWVudC5jaGFydC5nZXRDb25mKCkudHlwZSAhPT0gJ2F4aXMnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfY2hhcnRPYmogPSB0aGlzLmdldENoYXJ0T2JqKHRoaXMuZGF0YVN0b3JlLCB0aGlzLmNhdGVnb3JpZXMsIGNyb3NzdGFiRWxlbWVudC5yb3dIYXNoLCBjcm9zc3RhYkVsZW1lbnQuY29sSGFzaCwgYXhpc0xpbWl0c1swXSwgYXhpc0xpbWl0c1sxXSlbMV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydC51cGRhdGUoX2NoYXJ0T2JqLmdldENvbmYoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2ZpbmRZQXhpc0NoYXJ0Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmluZFlBeGlzQ2hhcnQoKSB7XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjcm9zc3RhYkVsZW1lbnQgPSByb3dbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzdGFiRWxlbWVudC5jaGFydCAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuY29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3Jvc3N0YWJFbGVtZW50O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXRZQXhpc0xpbWl0cycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFlBeGlzTGltaXRzKCkge1xuXHQgICAgICAgICAgICB2YXIgaSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGlpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgaiA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGpqID0gdm9pZCAwO1xuXHQgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG5cdCAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGwgPSByb3dbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwuY2hhcnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJ0Q29uZiA9IGNlbGwuY2hhcnQuZ2V0Q29uZigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcnRDb25mLnR5cGUgPT09ICdheGlzJyAmJiBjaGFydENvbmYuY29uZmlnLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsLmNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKS5nZXRMaW1pdHMoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXRPbGRDaGFydCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9sZENoYXJ0KG9sZENoYXJ0cywgcm93SGFzaCwgY29sSGFzaCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gb2xkQ2hhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAob2xkQ2hhcnRzW2ldLnJvd0hhc2ggPT09IHJvd0hhc2ggJiYgb2xkQ2hhcnRzW2ldLmNvbEhhc2ggPT09IGNvbEhhc2gpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkQ2hhcnRzW2ldLmNoYXJ0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3NvcnRDaGFydHMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzb3J0Q2hhcnRzKGtleSwgb3JkZXIpIHtcblx0ICAgICAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cdFxuXHQgICAgICAgICAgICB2YXIgc29ydFByb2Nlc3NvciA9IHRoaXMubWMuY3JlYXRlRGF0YVByb2Nlc3NvcigpLFxuXHQgICAgICAgICAgICAgICAgc29ydEZuID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgc29ydGVkRGF0YSA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgaWYgKG9yZGVyID09PSAnYXNjZW5kaW5nJykge1xuXHQgICAgICAgICAgICAgICAgc29ydEZuID0gZnVuY3Rpb24gc29ydEZuKGEsIGIpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gYVtrZXldIC0gYltrZXldO1xuXHQgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChvcmRlciA9PT0gJ2Rlc2NlbmRpbmcnKSB7XG5cdCAgICAgICAgICAgICAgICBzb3J0Rm4gPSBmdW5jdGlvbiBzb3J0Rm4oYSwgYikge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBiW2tleV0gLSBhW2tleV07XG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgc29ydEZuID0gZnVuY3Rpb24gc29ydEZuKGEsIGIpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcblx0ICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgc29ydFByb2Nlc3Nvci5zb3J0KHNvcnRGbik7XG5cdCAgICAgICAgICAgIHNvcnRlZERhdGEgPSB0aGlzLmRhdGFTdG9yZS5nZXRDaGlsZE1vZGVsKHNvcnRQcm9jZXNzb3IpO1xuXHQgICAgICAgICAgICB0aGlzLmNyb3NzdGFiLmZvckVhY2goZnVuY3Rpb24gKHJvdykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvd0NhdGVnb3JpZXMgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgICAgICByb3cuZm9yRWFjaChmdW5jdGlvbiAoY2VsbCkge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLmNoYXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFydCA9IGNlbGwuY2hhcnQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydENvbmYgPSBjaGFydC5nZXRDb25mKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFydENvbmYudHlwZSAhPT0gJ2NhcHRpb24nICYmIGNoYXJ0Q29uZi50eXBlICE9PSAnYXhpcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFydE9iaiA9IF90aGlzMy5nZXRDaGFydE9iaihzb3J0ZWREYXRhLCBfdGhpczMuY2F0ZWdvcmllcywgY2VsbC5yb3dIYXNoLCBjZWxsLmNvbEhhc2gpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQudXBkYXRlKGNoYXJ0T2JqWzFdLmdldENvbmYoKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dDYXRlZ29yaWVzID0gY2hhcnQuZ2V0Q29uZigpLmNhdGVnb3JpZXM7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIHJvdy5mb3JFYWNoKGZ1bmN0aW9uIChjZWxsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwuY2hhcnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJ0ID0gY2VsbC5jaGFydCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q29uZiA9IGNoYXJ0LmdldENvbmYoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJ0Q29uZi50eXBlID09PSAnYXhpcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBheGlzVHlwZSA9IGNoYXJ0Q29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXhpc1R5cGUgPT09ICd4Jykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczMuY2hhcnRUeXBlID09PSAnYmFyMmQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q29uZi5jb25maWcuY2F0ZWdvcmllcyA9IHJvd0NhdGVnb3JpZXMucmV2ZXJzZSgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q29uZi5jb25maWcuY2F0ZWdvcmllcyA9IHJvd0NhdGVnb3JpZXM7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0LnVwZGF0ZShjaGFydENvbmYpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjcmVhdGVNdWx0aUNoYXJ0Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTXVsdGlDaGFydCgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMubXVsdGljaGFydE9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QgPSB0aGlzLm1jLmNyZWF0ZU1hdHJpeCh0aGlzLmNyb3NzdGFiQ29udGFpbmVyLCB0aGlzLmNyb3NzdGFiKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdC5kcmF3KCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QudXBkYXRlKHRoaXMuY3Jvc3N0YWIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZUhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0xpc3RlbmVyKHRoaXMubXVsdGljaGFydE9iamVjdC5wbGFjZUhvbGRlcik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgaWYgKHRoaXMuZGF0YUlzU29ydGFibGUpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBTb3J0QnV0dG9ucyh0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXI7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3Blcm11dGVBcnInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwZXJtdXRlQXJyKGFycikge1xuXHQgICAgICAgICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBwZXJtdXRlKGFyciwgbWVtKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgICAgIG1lbSA9IG1lbSB8fCBbXTtcblx0XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBhcnIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBhcnIuc3BsaWNlKGksIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChtZW0uY29uY2F0KGN1cnJlbnQpLmpvaW4oJ3wnKSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIHBlcm11dGUoYXJyLnNsaWNlKCksIG1lbS5jb25jYXQoY3VycmVudCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIGFyci5zcGxpY2UoaSwgMCwgY3VycmVudFswXSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB2YXIgcGVybXV0ZVN0cnMgPSBwZXJtdXRlKGFycik7XG5cdCAgICAgICAgICAgIHJldHVybiBwZXJtdXRlU3Rycy5qb2luKCcqISVeJyk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ21hdGNoSGFzaCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1hdGNoSGFzaChmaWx0ZXJTdHIsIGhhc2gpIHtcblx0ICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGhhc2gpIHtcblx0ICAgICAgICAgICAgICAgIGlmIChoYXNoLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IGtleS5zcGxpdCgnfCcpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBrZXlQZXJtdXRhdGlvbnMgPSB0aGlzLnBlcm11dGVBcnIoa2V5cykuc3BsaXQoJyohJV4nKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoa2V5UGVybXV0YXRpb25zLmluZGV4T2YoZmlsdGVyU3RyKSAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleVBlcm11dGF0aW9uc1swXTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXRDaGFydE9iaicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoYXJ0T2JqKGRhdGFTdG9yZSwgY2F0ZWdvcmllcywgcm93RmlsdGVyLCBjb2xGaWx0ZXIsIG1pbkxpbWl0LCBtYXhMaW1pdCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHZhciBmaWx0ZXJzID0gW10sXG5cdCAgICAgICAgICAgICAgICBmaWx0ZXJTdHIgPSAnJyxcblx0ICAgICAgICAgICAgICAgIHJvd0ZpbHRlcnMgPSByb3dGaWx0ZXIuc3BsaXQoJ3wnKSxcblx0ICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzID0gW10sXG5cdCAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29yID0ge30sXG5cdCAgICAgICAgICAgICAgICBtYXRjaGVkSGFzaGVzID0gW10sXG5cdFxuXHQgICAgICAgICAgICAvLyBmaWx0ZXJlZEpTT04gPSBbXSxcblx0ICAgICAgICAgICAgLy8gbWF4ID0gLUluZmluaXR5LFxuXHQgICAgICAgICAgICAvLyBtaW4gPSBJbmZpbml0eSxcblx0ICAgICAgICAgICAgZmlsdGVyZWREYXRhID0ge30sXG5cdFxuXHQgICAgICAgICAgICAvLyBhZGFwdGVyID0ge30sXG5cdCAgICAgICAgICAgIGxpbWl0cyA9IHt9LFxuXHQgICAgICAgICAgICAgICAgY2hhcnQgPSB7fTtcblx0XG5cdCAgICAgICAgICAgIHJvd0ZpbHRlcnMucHVzaC5hcHBseShyb3dGaWx0ZXJzKTtcblx0ICAgICAgICAgICAgZmlsdGVycyA9IHJvd0ZpbHRlcnMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gYSAhPT0gJyc7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBmaWx0ZXJTdHIgPSBmaWx0ZXJzLmpvaW4oJ3wnKTtcblx0ICAgICAgICAgICAgbWF0Y2hlZEhhc2hlcyA9IHRoaXMuaGFzaFt0aGlzLm1hdGNoSGFzaChmaWx0ZXJTdHIsIHRoaXMuaGFzaCldO1xuXHQgICAgICAgICAgICBpZiAobWF0Y2hlZEhhc2hlcykge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbWF0Y2hlZEhhc2hlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0YVByb2Nlc3NvciA9IHRoaXMubWMuY3JlYXRlRGF0YVByb2Nlc3NvcigpO1xuXHQgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IuZmlsdGVyKG1hdGNoZWRIYXNoZXNbaV0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzLnB1c2goZGF0YVByb2Nlc3Nvcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSBkYXRhU3RvcmUuZ2V0Q2hpbGRNb2RlbChkYXRhUHJvY2Vzc29ycyk7XG5cdCAgICAgICAgICAgICAgICBpZiAobWluTGltaXQgIT09IHVuZGVmaW5lZCAmJiBtYXhMaW1pdCAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydENvbmZpZy5jaGFydC55QXhpc01pblZhbHVlID0gbWluTGltaXQ7XG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydENvbmZpZy5jaGFydC55QXhpc01heFZhbHVlID0gbWF4TGltaXQ7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXRhSXNTb3J0YWJsZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZEpTT04gPSBmaWx0ZXJlZERhdGEuZ2V0SlNPTigpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkQ2F0ZWdvcmllcyA9IFtdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJlZEpTT04uZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2F0ZWdvcnkgPSB2YWxbX3RoaXM0LmRpbWVuc2lvbnNbX3RoaXM0LmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRlZENhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSkgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkQ2F0ZWdvcmllcy5wdXNoKGNhdGVnb3J5KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXMgPSBzb3J0ZWRDYXRlZ29yaWVzLnNsaWNlKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSkoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGNoYXJ0ID0gdGhpcy5tYy5jaGFydCh7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogZmlsdGVyZWREYXRhLFxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuY2hhcnRUeXBlLFxuXHQgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uOiBbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG5cdCAgICAgICAgICAgICAgICAgICAgbWVhc3VyZTogW2NvbEZpbHRlcl0sXG5cdCAgICAgICAgICAgICAgICAgICAgc2VyaWVzVHlwZTogJ1NTJyxcblx0ICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVNb2RlOiB0aGlzLmFnZ3JlZ2F0aW9uLFxuXHQgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG5cdCAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB0aGlzLmNoYXJ0Q29uZmlnXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgIGxpbWl0cyA9IGNoYXJ0LmdldExpbWl0KCk7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gW3tcblx0ICAgICAgICAgICAgICAgICAgICAnbWF4JzogbGltaXRzLm1heCxcblx0ICAgICAgICAgICAgICAgICAgICAnbWluJzogbGltaXRzLm1pblxuXHQgICAgICAgICAgICAgICAgfSwgY2hhcnRdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3NldHVwU29ydEJ1dHRvbnMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXR1cFNvcnRCdXR0b25zKCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblx0XG5cdCAgICAgICAgICAgIHZhciBhc2NlbmRpbmdCdG5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXNjZW5kaW5nLXNvcnQnKSxcblx0ICAgICAgICAgICAgICAgIGlpID0gYXNjZW5kaW5nQnRucy5sZW5ndGgsXG5cdCAgICAgICAgICAgICAgICBpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgZGVzY2VuZGluZ0J0bnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkZXNjZW5kaW5nLXNvcnQnKSxcblx0ICAgICAgICAgICAgICAgIGpqID0gYXNjZW5kaW5nQnRucy5sZW5ndGgsXG5cdCAgICAgICAgICAgICAgICBqID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgc29ydEJ0bnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzb3J0LWJ0bicpO1xuXHQgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIGJ0biA9IGFzY2VuZGluZ0J0bnNbaV07XG5cdCAgICAgICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2xpY2tFbGVtID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlTmFtZSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NTdHIgPSB2b2lkIDA7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoJ3NvcnQtc3RlcHMnKSAhPT0gLTEpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tFbGVtID0gZS50YXJnZXQucGFyZW50Tm9kZTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGlja0VsZW0gPSBlLnRhcmdldDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgbWVhc3VyZU5hbWUgPSBjbGlja0VsZW0ucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVhc3VyZScpO1xuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzU3RyID0gY2xpY2tFbGVtLmNsYXNzTmFtZSArICcgYWN0aXZlJztcblx0ICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBzb3J0QnRucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUucmVtb3ZlQWN0aXZlQ2xhc3Moc29ydEJ0bnNbaV0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBjbGlja0VsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzU3RyKTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZC5ib29sKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc0xpc3QgPSBjbGlja0VsZW0uY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlTmFtZSA9PT0gX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZC5tZWFzdXJlICYmIGNsYXNzTGlzdC5pbmRleE9mKF90aGlzNS5jaGFydHNBcmVTb3J0ZWQub3JkZXIpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnNvcnRDaGFydHMoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5jaGFydHNBcmVTb3J0ZWQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbDogZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICcnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6ICcnXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnJlbW92ZUFjdGl2ZUNsYXNzKGNsaWNrRWxlbSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuc29ydENoYXJ0cyhtZWFzdXJlTmFtZSwgJ2FzY2VuZGluZycpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnYXNjZW5kaW5nLXNvcnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IG1lYXN1cmVOYW1lXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LnNvcnRDaGFydHMobWVhc3VyZU5hbWUsICdhc2NlbmRpbmcnKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2w6IHRydWUsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJ2FzY2VuZGluZy1zb3J0Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IG1lYXN1cmVOYW1lXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqajsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgX2J0biA9IGRlc2NlbmRpbmdCdG5zW2pdO1xuXHQgICAgICAgICAgICAgICAgX2J0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjbGlja0VsZW0gPSB2b2lkIDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmVOYW1lID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc1N0ciA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lLnNwbGl0KCcgJykuaW5kZXhPZignc29ydC1zdGVwcycpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGlja0VsZW0gPSBlLnRhcmdldC5wYXJlbnROb2RlO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrRWxlbSA9IGUudGFyZ2V0O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICBtZWFzdXJlTmFtZSA9IGNsaWNrRWxlbS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1tZWFzdXJlJyk7XG5cdCAgICAgICAgICAgICAgICAgICAgY2xhc3NTdHIgPSBjbGlja0VsZW0uY2xhc3NOYW1lICsgJyBhY3RpdmUnO1xuXHQgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHNvcnRCdG5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5yZW1vdmVBY3RpdmVDbGFzcyhzb3J0QnRuc1tpXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIGNsaWNrRWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NTdHIpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpczUuY2hhcnRzQXJlU29ydGVkLmJvb2wpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTGlzdCA9IGNsaWNrRWxlbS5jbGFzc05hbWUuc3BsaXQoJyAnKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lYXN1cmVOYW1lID09PSBfdGhpczUuY2hhcnRzQXJlU29ydGVkLm1lYXN1cmUgJiYgY2xhc3NMaXN0LmluZGV4T2YoX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZC5vcmRlcikgIT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuc29ydENoYXJ0cygpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sOiBmYWxzZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZTogJydcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUucmVtb3ZlQWN0aXZlQ2xhc3MoY2xpY2tFbGVtKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5zb3J0Q2hhcnRzKG1lYXN1cmVOYW1lLCAnZGVzY2VuZGluZycpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXM1LmNoYXJ0c0FyZVNvcnRlZCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sOiB0cnVlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnZGVzY2VuZGluZy1zb3J0Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlOiBtZWFzdXJlTmFtZVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzNS5zb3J0Q2hhcnRzKG1lYXN1cmVOYW1lLCAnZGVzY2VuZGluZycpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBfdGhpczUuY2hhcnRzQXJlU29ydGVkID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbDogdHJ1ZSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnZGVzY2VuZGluZy1zb3J0Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IG1lYXN1cmVOYW1lXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ3JlbW92ZUFjdGl2ZUNsYXNzJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWN0aXZlQ2xhc3MoZWxlbSkge1xuXHQgICAgICAgICAgICB2YXIgY2xhc3NObSA9IGVsZW0uY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGZ1bmN0aW9uICh2YWwpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiB2YWwgIT09ICdhY3RpdmUnO1xuXHQgICAgICAgICAgICB9KS5qb2luKCcgJyk7XG5cdCAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTm0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdhZGRBY3RpdmVDbGFzcycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEFjdGl2ZUNsYXNzKGVsZW0pIHtcblx0ICAgICAgICAgICAgdmFyIGNsYXNzTm0gPSBlbGVtLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuXHQgICAgICAgICAgICBjbGFzc05tLnB1c2goJ2FjdGl2ZScpO1xuXHQgICAgICAgICAgICBjbGFzc05tID0gY2xhc3NObS5qb2luKCcgJyk7XG5cdCAgICAgICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTm0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdkcmFnTGlzdGVuZXInLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkcmFnTGlzdGVuZXIocGxhY2VIb2xkZXIpIHtcblx0ICAgICAgICAgICAgLy8gR2V0dGluZyBvbmx5IGxhYmVsc1xuXHQgICAgICAgICAgICB2YXIgb3JpZ0NvbmZpZyA9IHRoaXMuc3RvcmVQYXJhbXMuY29uZmlnLFxuXHQgICAgICAgICAgICAgICAgZGltZW5zaW9ucyA9IG9yaWdDb25maWcuZGltZW5zaW9ucyB8fCBbXSxcblx0ICAgICAgICAgICAgICAgIG1lYXN1cmVzID0gb3JpZ0NvbmZpZy5tZWFzdXJlcyB8fCBbXSxcblx0ICAgICAgICAgICAgICAgIG1lYXN1cmVzTGVuZ3RoID0gbWVhc3VyZXMubGVuZ3RoLFxuXHQgICAgICAgICAgICAgICAgZGltZW5zaW9uc0xlbmd0aCA9IDAsXG5cdCAgICAgICAgICAgICAgICBkaW1lbnNpb25zSG9sZGVyID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgbWVhc3VyZXNIb2xkZXIgPSB2b2lkIDAsXG5cdCAgICAgICAgICAgICAgICBzZWxmID0gdGhpcztcblx0ICAgICAgICAgICAgLy8gbGV0IGVuZFxuXHQgICAgICAgICAgICBwbGFjZUhvbGRlciA9IHBsYWNlSG9sZGVyWzFdO1xuXHQgICAgICAgICAgICAvLyBPbWl0dGluZyBsYXN0IGRpbWVuc2lvblxuXHQgICAgICAgICAgICBkaW1lbnNpb25zID0gZGltZW5zaW9ucy5zbGljZSgwLCBkaW1lbnNpb25zLmxlbmd0aCAtIDEpO1xuXHQgICAgICAgICAgICBkaW1lbnNpb25zTGVuZ3RoID0gZGltZW5zaW9ucy5sZW5ndGg7XG5cdCAgICAgICAgICAgIC8vIFNldHRpbmcgdXAgZGltZW5zaW9uIGhvbGRlclxuXHQgICAgICAgICAgICBkaW1lbnNpb25zSG9sZGVyID0gcGxhY2VIb2xkZXIuc2xpY2UoMCwgZGltZW5zaW9uc0xlbmd0aCk7XG5cdCAgICAgICAgICAgIC8vIFNldHRpbmcgdXAgbWVhc3VyZXMgaG9sZGVyXG5cdCAgICAgICAgICAgIC8vIE9uZSBzaGlmdCBmb3IgYmxhbmsgYm94XG5cdCAgICAgICAgICAgIG1lYXN1cmVzSG9sZGVyID0gcGxhY2VIb2xkZXIuc2xpY2UoZGltZW5zaW9uc0xlbmd0aCArIDEsIGRpbWVuc2lvbnNMZW5ndGggKyBtZWFzdXJlc0xlbmd0aCArIDEpO1xuXHQgICAgICAgICAgICBzZXR1cExpc3RlbmVyKGRpbWVuc2lvbnNIb2xkZXIsIGRpbWVuc2lvbnMsIGRpbWVuc2lvbnNMZW5ndGgsIHRoaXMuZGltZW5zaW9ucyk7XG5cdCAgICAgICAgICAgIHNldHVwTGlzdGVuZXIobWVhc3VyZXNIb2xkZXIsIG1lYXN1cmVzLCBtZWFzdXJlc0xlbmd0aCwgdGhpcy5tZWFzdXJlcyk7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHNldHVwTGlzdGVuZXIoaG9sZGVyLCBhcnIsIGFyckxlbiwgZ2xvYmFsQXJyKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgbGltaXRMZWZ0ID0gMCxcblx0ICAgICAgICAgICAgICAgICAgICBsaW1pdFJpZ2h0ID0gMCxcblx0ICAgICAgICAgICAgICAgICAgICBsYXN0ID0gYXJyTGVuIC0gMSxcblx0ICAgICAgICAgICAgICAgICAgICBsbiA9IE1hdGgubG9nMjtcblx0XG5cdCAgICAgICAgICAgICAgICBpZiAoaG9sZGVyWzBdKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgbGltaXRMZWZ0ID0gcGFyc2VJbnQoaG9sZGVyWzBdLmdyYXBoaWNzLnN0eWxlLmxlZnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGxpbWl0UmlnaHQgPSBwYXJzZUludChob2xkZXJbbGFzdF0uZ3JhcGhpY3Muc3R5bGUubGVmdCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoaSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IGhvbGRlcltpXS5ncmFwaGljcyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGhvbGRlcltpXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLmNlbGxWYWx1ZSA9IGFycltpXTtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLm9yaWdMZWZ0ID0gcGFyc2VJbnQoZWwuc3R5bGUubGVmdCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5yZWRab25lID0gaXRlbS5vcmlnTGVmdCArIHBhcnNlSW50KGVsLnN0eWxlLndpZHRoKSAvIDI7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5pbmRleCA9IGk7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGp1c3QgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ1ogPSBlbC5zdHlsZS56SW5kZXg7XG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZi5fc2V0dXBEcmFnKGl0ZW0uZ3JhcGhpY3MsIGZ1bmN0aW9uIGRyYWdTdGFydChkeCwgZHkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSBpdGVtLm9yaWdMZWZ0ICsgZHggKyBpdGVtLmFkanVzdDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5MZWZ0IDwgbGltaXRMZWZ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbGltaXRMZWZ0IC0gbkxlZnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTGVmdCA9IGxpbWl0TGVmdCAtIGxuKGRpZmYpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuTGVmdCA+IGxpbWl0UmlnaHQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSBuTGVmdCAtIGxpbWl0UmlnaHQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuTGVmdCA9IGxpbWl0UmlnaHQgKyBsbihkaWZmKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gbkxlZnQgKyAncHgnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS56SW5kZXggPSAxMDAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtYW5hZ2VTaGlmdGluZyhpdGVtLmluZGV4LCBmYWxzZSwgaG9sZGVyKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlU2hpZnRpbmcoaXRlbS5pbmRleCwgdHJ1ZSwgaG9sZGVyKTtcblx0ICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBkcmFnRW5kKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlID0gZmFsc2UsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBqID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGp1c3QgPSAwO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS56SW5kZXggPSBpdGVtLm9yaWdaO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gaXRlbS5vcmlnTGVmdCArICdweCc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBqIDwgYXJyTGVuOyArK2opIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxBcnJbal0gIT09IGhvbGRlcltqXS5jZWxsVmFsdWUpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxBcnJbal0gPSBob2xkZXJbal0uY2VsbFZhbHVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZSA9IHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZ2xvYmFsRGF0YSA9IHNlbGYuYnVpbGRHbG9iYWxEYXRhKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVDcm9zc3RhYigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyTGVuOyArK2kpIHtcblx0ICAgICAgICAgICAgICAgICAgICBfbG9vcChpKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgZnVuY3Rpb24gbWFuYWdlU2hpZnRpbmcoaW5kZXgsIGlzUmlnaHQsIGhvbGRlcikge1xuXHQgICAgICAgICAgICAgICAgdmFyIHN0YWNrID0gW10sXG5cdCAgICAgICAgICAgICAgICAgICAgZHJhZ0l0ZW0gPSBob2xkZXJbaW5kZXhdLFxuXHQgICAgICAgICAgICAgICAgICAgIG5leHRQb3MgPSBpc1JpZ2h0ID8gaW5kZXggKyAxIDogaW5kZXggLSAxLFxuXHQgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtID0gaG9sZGVyW25leHRQb3NdO1xuXHQgICAgICAgICAgICAgICAgLy8gU2F2aW5nIGRhdGEgZm9yIGxhdGVyIHVzZVxuXHQgICAgICAgICAgICAgICAgaWYgKG5leHRJdGVtKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaCghaXNSaWdodCAmJiBwYXJzZUludChkcmFnSXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0KSA8IG5leHRJdGVtLnJlZFpvbmUpO1xuXHQgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goc3RhY2sucG9wKCkgfHwgaXNSaWdodCAmJiBwYXJzZUludChkcmFnSXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0KSA+IG5leHRJdGVtLm9yaWdMZWZ0KTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2sucG9wKCkpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5yZWRab25lKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5vcmlnTGVmdCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0uaW5kZXgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmlnaHQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLmFkanVzdCArPSBwYXJzZUludChuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS53aWR0aCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5hZGp1c3QgLT0gcGFyc2VJbnQobmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUud2lkdGgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLm9yaWdMZWZ0ID0gZHJhZ0l0ZW0ub3JpZ0xlZnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLnJlZFpvbmUgPSBkcmFnSXRlbS5yZWRab25lO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5pbmRleCA9IGRyYWdJdGVtLmluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0ID0gbmV4dEl0ZW0ub3JpZ0xlZnQgKyAncHgnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGhvbGRlcltuZXh0UG9zXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlcltuZXh0UG9zXSA9IGhvbGRlcltpbmRleF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlcltpbmRleF0gPSBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAvLyBTZXR0aW5nIG5ldyB2YWx1ZXMgZm9yIGRyYWdpdGVtXG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZHJhZ0l0ZW0uaW5kZXggPSBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5vcmlnTGVmdCA9IHN0YWNrLnBvcCgpO1xuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLnJlZFpvbmUgPSBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdfc2V0dXBEcmFnJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwRHJhZyhlbCwgaGFuZGxlciwgaGFuZGxlcjIpIHtcblx0ICAgICAgICAgICAgdmFyIHggPSAwLFxuXHQgICAgICAgICAgICAgICAgeSA9IDA7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGN1c3RvbUhhbmRsZXIoZSkge1xuXHQgICAgICAgICAgICAgICAgaGFuZGxlcihlLmNsaWVudFggLSB4LCBlLmNsaWVudFkgLSB5KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0LFxuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldENsYXNzU3RyID0gdGFyZ2V0LmNsYXNzTmFtZTtcblx0ICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2xhc3NOYW1lID09PSAnJyB8fCB0YXJnZXRDbGFzc1N0ci5zcGxpdCgnICcpLmluZGV4T2YoJ3NvcnQtYnRuJykgPT09IC0xKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgeCA9IGUuY2xpZW50WDtcblx0ICAgICAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZO1xuXHQgICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwLjg7XG5cdCAgICAgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcblx0ICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgY3VzdG9tSGFuZGxlcik7XG5cdCAgICAgICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBtb3VzZVVwSGFuZGxlcihlKSB7XG5cdCAgICAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcblx0ICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJyk7XG5cdCAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgY3VzdG9tSGFuZGxlcik7XG5cdCAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXBIYW5kbGVyKTtcblx0ICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGhhbmRsZXIyLCAxMCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnZmlsdGVyR2VuJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsdGVyR2VuKGtleSwgdmFsKSB7XG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XSA9PT0gdmFsO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgIH1dKTtcblx0XG5cdCAgICByZXR1cm4gQ3Jvc3N0YWJFeHQ7XG5cdH0oKTtcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gQ3Jvc3N0YWJFeHQ7XG5cbi8qKiovIH0sXG4vKiAyICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IFt7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDIsXG5cdCAgICAnUHJvZml0JzogMTIsXG5cdCAgICAnVmlzaXRvcnMnOiA2XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA4LFxuXHQgICAgJ1Byb2ZpdCc6IDEsXG5cdCAgICAnVmlzaXRvcnMnOiAxMlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDMsXG5cdCAgICAnVmlzaXRvcnMnOiAxOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDcsXG5cdCAgICAnUHJvZml0JzogMTEsXG5cdCAgICAnVmlzaXRvcnMnOiAxN1xuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdBdWcnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDgsXG5cdCAgICAnUHJvZml0JzogNixcblx0ICAgICdWaXNpdG9ycyc6IDE0XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiAxLFxuXHQgICAgJ1Byb2ZpdCc6IDExLFxuXHQgICAgJ1Zpc2l0b3JzJzogNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA5LFxuXHQgICAgJ1Byb2ZpdCc6IDE0LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTNcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA1LFxuXHQgICAgJ1Byb2ZpdCc6IDEwLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTZcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA2LFxuXHQgICAgJ1Byb2ZpdCc6IDMsXG5cdCAgICAnVmlzaXRvcnMnOiA1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA2LFxuXHQgICAgJ1Byb2ZpdCc6IDcsXG5cdCAgICAnVmlzaXRvcnMnOiA4XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDIsXG5cdCAgICAnUHJvZml0JzogMTQsXG5cdCAgICAnVmlzaXRvcnMnOiAxNlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDEsXG5cdCAgICAnUHJvZml0JzogMixcblx0ICAgICdWaXNpdG9ycyc6IDlcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAzLFxuXHQgICAgJ1Byb2ZpdCc6IDEsXG5cdCAgICAnVmlzaXRvcnMnOiA5XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA4LFxuXHQgICAgJ1Byb2ZpdCc6IDUsXG5cdCAgICAnVmlzaXRvcnMnOiA4XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDgsXG5cdCAgICAnUHJvZml0JzogMTIsXG5cdCAgICAnVmlzaXRvcnMnOiAxNFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDYsXG5cdCAgICAnUHJvZml0JzogMTMsXG5cdCAgICAnVmlzaXRvcnMnOiAxNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAzLFxuXHQgICAgJ1Byb2ZpdCc6IDEsXG5cdCAgICAnVmlzaXRvcnMnOiA3XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNCxcblx0ICAgICdQcm9maXQnOiA2LFxuXHQgICAgJ1Zpc2l0b3JzJzogMFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMTAsXG5cdCAgICAnUHJvZml0JzogNCxcblx0ICAgICdWaXNpdG9ycyc6IDEwXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDgsXG5cdCAgICAnUHJvZml0JzogMCxcblx0ICAgICdWaXNpdG9ycyc6IDE3XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdBdWcnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDksXG5cdCAgICAnUHJvZml0JzogOSxcblx0ICAgICdWaXNpdG9ycyc6IDhcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA5LFxuXHQgICAgJ1Byb2ZpdCc6IDgsXG5cdCAgICAnVmlzaXRvcnMnOiAxOVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogOSxcblx0ICAgICdQcm9maXQnOiA1LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTdcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNSxcblx0ICAgICdQcm9maXQnOiAwLFxuXHQgICAgJ1Zpc2l0b3JzJzogMThcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogOCxcblx0ICAgICdQcm9maXQnOiAzLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA1LFxuXHQgICAgJ1Byb2ZpdCc6IDYsXG5cdCAgICAnVmlzaXRvcnMnOiAxOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMSxcblx0ICAgICdQcm9maXQnOiA5LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTZcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNSxcblx0ICAgICdQcm9maXQnOiA0LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTdcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMTAsXG5cdCAgICAnUHJvZml0JzogMTEsXG5cdCAgICAnVmlzaXRvcnMnOiA1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdBdWcnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiA1LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDUsXG5cdCAgICAnUHJvZml0JzogMTQsXG5cdCAgICAnVmlzaXRvcnMnOiA0XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDcsXG5cdCAgICAnUHJvZml0JzogNSxcblx0ICAgICdWaXNpdG9ycyc6IDEyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDMsXG5cdCAgICAnUHJvZml0JzogNyxcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiAyLFxuXHQgICAgJ1Byb2ZpdCc6IDUsXG5cdCAgICAnVmlzaXRvcnMnOiAxMlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMTAsXG5cdCAgICAnUHJvZml0JzogOCxcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiAxNCxcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMixcblx0ICAgICdQcm9maXQnOiAwLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTRcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiAzLFxuXHQgICAgJ1Byb2ZpdCc6IDEsXG5cdCAgICAnVmlzaXRvcnMnOiAxMlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNSxcblx0ICAgICdQcm9maXQnOiA4LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTRcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogMSxcblx0ICAgICdQcm9maXQnOiAxMixcblx0ICAgICdWaXNpdG9ycyc6IDExXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDUsXG5cdCAgICAnUHJvZml0JzogMixcblx0ICAgICdWaXNpdG9ycyc6IDE3XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogMTAsXG5cdCAgICAnUHJvZml0JzogMTEsXG5cdCAgICAnVmlzaXRvcnMnOiAwXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDE0LFxuXHQgICAgJ1Zpc2l0b3JzJzogMThcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNCxcblx0ICAgICdQcm9maXQnOiAxMCxcblx0ICAgICdWaXNpdG9ycyc6IDhcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMSxcblx0ICAgICdQcm9maXQnOiAxMixcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA5LFxuXHQgICAgJ1Byb2ZpdCc6IDQsXG5cdCAgICAnVmlzaXRvcnMnOiAxNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiA5LFxuXHQgICAgJ1Zpc2l0b3JzJzogMlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA0LFxuXHQgICAgJ1Byb2ZpdCc6IDAsXG5cdCAgICAnVmlzaXRvcnMnOiAxMlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNixcblx0ICAgICdQcm9maXQnOiA2LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTBcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNCxcblx0ICAgICdQcm9maXQnOiA1LFxuXHQgICAgJ1Zpc2l0b3JzJzogNFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDksXG5cdCAgICAnUHJvZml0JzogMyxcblx0ICAgICdWaXNpdG9ycyc6IDE4XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA2LFxuXHQgICAgJ1Byb2ZpdCc6IDEwLFxuXHQgICAgJ1Zpc2l0b3JzJzogMFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiA0LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTNcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdBdWcnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogMixcblx0ICAgICdQcm9maXQnOiAxMyxcblx0ICAgICdWaXNpdG9ycyc6IDEwXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNSxcblx0ICAgICdQcm9maXQnOiAxNCxcblx0ICAgICdWaXNpdG9ycyc6IDFcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDcsXG5cdCAgICAnUHJvZml0JzogMTEsXG5cdCAgICAnVmlzaXRvcnMnOiAxMVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNCxcblx0ICAgICdQcm9maXQnOiAxLFxuXHQgICAgJ1Zpc2l0b3JzJzogNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA0LFxuXHQgICAgJ1Byb2ZpdCc6IDgsXG5cdCAgICAnVmlzaXRvcnMnOiAxOVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDEwLFxuXHQgICAgJ1Byb2ZpdCc6IDYsXG5cdCAgICAnVmlzaXRvcnMnOiAyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDAsXG5cdCAgICAnVmlzaXRvcnMnOiA1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA4LFxuXHQgICAgJ1Byb2ZpdCc6IDksXG5cdCAgICAnVmlzaXRvcnMnOiAxN1xuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA2LFxuXHQgICAgJ1Byb2ZpdCc6IDUsXG5cdCAgICAnVmlzaXRvcnMnOiAxOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDEwLFxuXHQgICAgJ1Byb2ZpdCc6IDksXG5cdCAgICAnVmlzaXRvcnMnOiAxNFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiA3LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTZcblx0fV07XG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBjcm9zc3RhYi1leHQtZXM1Lm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDE5MWY0MTJmNzM4ODYyYTQzMTc0IiwiY29uc3QgQ3Jvc3N0YWJFeHQgPSByZXF1aXJlKCcuL2Nyb3NzdGFiRXh0JyksXG4gICAgZGF0YSA9IHJlcXVpcmUoJy4vbGFyZ2VEYXRhJyk7XG5cbnZhciBjb25maWcgPSB7XG4gICAgZGltZW5zaW9uczogWydQcm9kdWN0JywgJ1N0YXRlJywgJ01vbnRoJ10sXG4gICAgbWVhc3VyZXM6IFsnU2FsZScsICdQcm9maXQnLCAnVmlzaXRvcnMnXSxcbiAgICBtZWFzdXJlVW5pdHM6IFsnSU5SJywgJyQnLCAnJ10sXG4gICAgdW5pdEZ1bmN0aW9uOiAodW5pdCkgPT4gJygnICsgdW5pdCArICcpJyxcbiAgICBjaGFydFR5cGU6ICdiYXIyZCcsXG4gICAgbm9EYXRhTWVzc2FnZTogJ05vIGRhdGEgdG8gZGlzcGxheS4nLFxuICAgIGNyb3NzdGFiQ29udGFpbmVyOiAnY3Jvc3N0YWItZGl2JyxcbiAgICBkYXRhSXNTb3J0YWJsZTogdHJ1ZSxcbiAgICBjZWxsV2lkdGg6IDE1MCxcbiAgICBjZWxsSGVpZ2h0OiA4MCxcbiAgICAvLyBzaG93RmlsdGVyOiB0cnVlLFxuICAgIGRyYWdnYWJsZUhlYWRlcnM6IHRydWUsXG4gICAgYWdncmVnYXRpb246ICdtaW4nLFxuICAgIGNoYXJ0Q29uZmlnOiB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAnc2hvd0JvcmRlcic6ICcwJyxcbiAgICAgICAgICAgICdzaG93VmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ2RpdkxpbmVBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdudW1iZXJQcmVmaXgnOiAn4oK5JyxcbiAgICAgICAgICAgICdyb3RhdGVWYWx1ZXMnOiAnMScsXG4gICAgICAgICAgICAncm9sbE92ZXJCYW5kQ29sb3InOiAnI2JhZGFmMCcsXG4gICAgICAgICAgICAnY29sdW1uSG92ZXJDb2xvcic6ICcjMWI4M2NjJyxcbiAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6ICcyJyxcbiAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6ICcyJyxcbiAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiAnNScsXG4gICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6ICc3JyxcbiAgICAgICAgICAgICd6ZXJvUGxhbmVUaGlja25lc3MnOiAnMCcsXG4gICAgICAgICAgICAnemVyb1BsYW5lQWxwaGEnOiAnMTAwJyxcbiAgICAgICAgICAgICdiZ0NvbG9yJzogJyNGRkZGRkYnLFxuICAgICAgICAgICAgJ3Nob3dYQXhpc0xpbmUnOiAnMScsXG4gICAgICAgICAgICAncGxvdEJvcmRlckFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3Nob3dYYXhpc1ZhbHVlcyc6ICcwJyxcbiAgICAgICAgICAgICdzaG93WUF4aXNWYWx1ZXMnOiAnMCcsXG4gICAgICAgICAgICAnYW5pbWF0aW9uJzogJzEnLFxuICAgICAgICAgICAgJ3RyYW5zcG9zZUFuaW1hdGlvbic6ICcxJyxcbiAgICAgICAgICAgICdhbHRlcm5hdGVIR3JpZEFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3Bsb3RDb2xvckluVG9vbHRpcCc6ICcwJyxcbiAgICAgICAgICAgICdjYW52YXNCb3JkZXJBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdhbHRlcm5hdGVWR3JpZEFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3BhbGV0dGVDb2xvcnMnOiAnIzVCNUI1QicsXG4gICAgICAgICAgICAndXNlUGxvdEdyYWRpZW50Q29sb3InOiAnMCcsXG4gICAgICAgICAgICAndmFsdWVGb250Q29sb3InOiAnI0ZGRkZGRicsXG4gICAgICAgICAgICAnY2FudmFzQm9yZGVyVGhpY2tuZXNzJzogJzAnLFxuICAgICAgICAgICAgJ2RyYXdUcmVuZFJlZ2lvbic6ICcxJ1xuICAgICAgICB9XG4gICAgfVxufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgd2luZG93LmNyb3NzdGFiID0gbmV3IENyb3NzdGFiRXh0KGRhdGEsIGNvbmZpZyk7XG4gICAgd2luZG93LmNyb3NzdGFiLnJlbmRlckNyb3NzdGFiKCk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQ3Jvc3N0YWJFeHQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiLCIvKipcbiAqIFJlcHJlc2VudHMgYSBjcm9zc3RhYi5cbiAqL1xuY2xhc3MgQ3Jvc3N0YWJFeHQge1xuICAgIGNvbnN0cnVjdG9yIChkYXRhLCBjb25maWcpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgLy8gTGlzdCBvZiBwb3NzaWJsZSBldmVudHMgcmFpc2VkIGJ5IHRoZSBkYXRhIHN0b3JlLlxuICAgICAgICB0aGlzLmV2ZW50TGlzdCA9IHtcbiAgICAgICAgICAgICdtb2RlbFVwZGF0ZWQnOiAnbW9kZWx1cGRhdGVkJyxcbiAgICAgICAgICAgICdtb2RlbERlbGV0ZWQnOiAnbW9kZWxkZWxldGVkJyxcbiAgICAgICAgICAgICdtZXRhSW5mb1VwZGF0ZSc6ICdtZXRhaW5mb3VwZGF0ZWQnLFxuICAgICAgICAgICAgJ3Byb2Nlc3NvclVwZGF0ZWQnOiAncHJvY2Vzc29ydXBkYXRlZCcsXG4gICAgICAgICAgICAncHJvY2Vzc29yRGVsZXRlZCc6ICdwcm9jZXNzb3JkZWxldGVkJ1xuICAgICAgICB9O1xuICAgICAgICAvLyBQb3RlbnRpYWxseSB1bm5lY2Vzc2FyeSBtZW1iZXIuXG4gICAgICAgIC8vIFRPRE86IFJlZmFjdG9yIGNvZGUgZGVwZW5kZW50IG9uIHZhcmlhYmxlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgdmFyaWFibGUuXG4gICAgICAgIHRoaXMuc3RvcmVQYXJhbXMgPSB7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgfTtcbiAgICAgICAgLy8gQXJyYXkgb2YgY29sdW1uIG5hbWVzIChtZWFzdXJlcykgdXNlZCB3aGVuIGJ1aWxkaW5nIHRoZSBjcm9zc3RhYiBhcnJheS5cbiAgICAgICAgdGhpcy5fY29sdW1uS2V5QXJyID0gW107XG4gICAgICAgIC8vIFNhdmluZyBwcm92aWRlZCBjb25maWd1cmF0aW9uIGludG8gaW5zdGFuY2UuXG4gICAgICAgIHRoaXMubWVhc3VyZXMgPSBjb25maWcubWVhc3VyZXM7XG4gICAgICAgIHRoaXMuY2hhcnRUeXBlID0gY29uZmlnLmNoYXJ0VHlwZTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gY29uZmlnLmRpbWVuc2lvbnM7XG4gICAgICAgIHRoaXMuY2hhcnRDb25maWcgPSBjb25maWcuY2hhcnRDb25maWc7XG4gICAgICAgIHRoaXMubWVhc3VyZVVuaXRzID0gY29uZmlnLm1lYXN1cmVVbml0cztcbiAgICAgICAgdGhpcy5kYXRhSXNTb3J0YWJsZSA9IGNvbmZpZy5kYXRhSXNTb3J0YWJsZTtcbiAgICAgICAgdGhpcy5jcm9zc3RhYkNvbnRhaW5lciA9IGNvbmZpZy5jcm9zc3RhYkNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5jZWxsV2lkdGggPSBjb25maWcuY2VsbFdpZHRoIHx8IDIxMDtcbiAgICAgICAgdGhpcy5jZWxsSGVpZ2h0ID0gY29uZmlnLmNlbGxIZWlnaHQgfHwgMTEzO1xuICAgICAgICB0aGlzLnNob3dGaWx0ZXIgPSBjb25maWcuc2hvd0ZpbHRlciB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5hZ2dyZWdhdGlvbiA9IGNvbmZpZy5hZ2dyZWdhdGlvbiB8fCAnc3VtJztcbiAgICAgICAgdGhpcy5kcmFnZ2FibGVIZWFkZXJzID0gY29uZmlnLmRyYWdnYWJsZUhlYWRlcnMgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMubm9EYXRhTWVzc2FnZSA9IGNvbmZpZy5ub0RhdGFNZXNzYWdlIHx8ICdObyBkYXRhIHRvIGRpc3BsYXkuJztcbiAgICAgICAgdGhpcy51bml0RnVuY3Rpb24gPSBjb25maWcudW5pdEZ1bmN0aW9uIHx8IGZ1bmN0aW9uICh1bml0KSB7IHJldHVybiAnKCcgKyB1bml0ICsgJyknOyB9O1xuICAgICAgICBpZiAodHlwZW9mIE11bHRpQ2hhcnRpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMubWMgPSBuZXcgTXVsdGlDaGFydGluZygpO1xuICAgICAgICAgICAgLy8gQ3JlYXRpbmcgYW4gZW1wdHkgZGF0YSBzdG9yZVxuICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUgPSB0aGlzLm1jLmNyZWF0ZURhdGFTdG9yZSgpO1xuICAgICAgICAgICAgLy8gQWRkaW5nIGRhdGEgdG8gdGhlIGRhdGEgc3RvcmVcbiAgICAgICAgICAgIHRoaXMuZGF0YVN0b3JlLnNldERhdGEoeyBkYXRhU291cmNlOiB0aGlzLmRhdGEgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011bHRpQ2hhcnRuZyBtb2R1bGUgbm90IGZvdW5kLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNob3dGaWx0ZXIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgRkNEYXRhRmlsdGVyRXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbGV0IGZpbHRlckNvbmZpZyA9IHt9O1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YUZpbHRlckV4dCA9IG5ldyBGQ0RhdGFGaWx0ZXJFeHQodGhpcy5kYXRhU3RvcmUsIGZpbHRlckNvbmZpZywgJ2NvbnRyb2wtYm94Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRGF0YUZpbHRlciBtb2R1bGUgbm90IGZvdW5kLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEJ1aWxkaW5nIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGludGVybmFsIHVzZS5cbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgLy8gQnVpbGRpbmcgYSBoYXNoIG1hcCBvZiBhcHBsaWNhYmxlIGZpbHRlcnMgYW5kIHRoZSBjb3JyZXNwb25kaW5nIGZpbHRlciBmdW5jdGlvbnNcbiAgICAgICAgdGhpcy5oYXNoID0gdGhpcy5nZXRGaWx0ZXJIYXNoTWFwKCk7XG4gICAgICAgIHRoaXMuY2hhcnRzQXJlU29ydGVkID0ge1xuICAgICAgICAgICAgYm9vbDogZmFsc2UsXG4gICAgICAgICAgICBvcmRlcjogJycsXG4gICAgICAgICAgICBtZWFzdXJlOiAnJ1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIGFuIGFycmF5IG9mIGFycmF5cyBkYXRhIHN0cnVjdHVyZSBmcm9tIHRoZSBkYXRhIHN0b3JlIGZvciBpbnRlcm5hbCB1c2UuXG4gICAgICogQHJldHVybiB7QXJyYXl9IEFuIGFycmF5IG9mIGFycmF5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgZGF0YVN0b3JlJ3MgYXJyYXkgb2Ygb2JqZWN0c1xuICAgICAqL1xuICAgIGJ1aWxkR2xvYmFsRGF0YSAoKSB7XG4gICAgICAgIGxldCBkYXRhU3RvcmUgPSB0aGlzLmRhdGFTdG9yZSxcbiAgICAgICAgICAgIGZpZWxkcyA9IGRhdGFTdG9yZS5nZXRLZXlzKCk7XG4gICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgIGxldCBnbG9iYWxEYXRhID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWVsZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGdsb2JhbERhdGFbZmllbGRzW2ldXSA9IGRhdGFTdG9yZS5nZXRVbmlxdWVWYWx1ZXMoZmllbGRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERlZmF1bHQgY2F0ZWdvcmllcyBmb3IgY2hhcnRzIChpLmUuIG5vIHNvcnRpbmcgYXBwbGllZClcbiAgICAgICAgICAgIHRoaXMuY2F0ZWdvcmllcyA9IGdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsRGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGdlbmVyYXRlIGtleXMgZnJvbSBkYXRhIHN0b3JlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVSb3cgKHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuICAgICAgICB2YXIgcm93c3BhbiA9IDAsXG4gICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IHJvd09yZGVyW2N1cnJlbnRJbmRleF0sXG4gICAgICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuICAgICAgICAgICAgaSwgbCA9IGZpZWxkVmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgIHJvd0VsZW1lbnQsXG4gICAgICAgICAgICBoYXNGdXJ0aGVyRGVwdGggPSBjdXJyZW50SW5kZXggPCAocm93T3JkZXIubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuICAgICAgICAgICAgY29sTGVuZ3RoID0gdGhpcy5fY29sdW1uS2V5QXJyLmxlbmd0aCxcbiAgICAgICAgICAgIGh0bWxSZWYsXG4gICAgICAgICAgICBtaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgIG1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIG1pbm1heE9iaiA9IHt9O1xuXG4gICAgICAgIGlmIChjdXJyZW50SW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIHRhYmxlLnB1c2goW10pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJyc7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZFZhbHVlc1tpXTtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICgodGhpcy5jZWxsSGVpZ2h0IC0gMTApIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgY2xhc3NTdHIgKz0gJ3Jvdy1kaW1lbnNpb25zJyArXG4gICAgICAgICAgICAgICAgJyAnICsgdGhpcy5kaW1lbnNpb25zW2N1cnJlbnRJbmRleF0udG9Mb3dlckNhc2UoKSArXG4gICAgICAgICAgICAgICAgJyAnICsgZmllbGRWYWx1ZXNbaV0udG9Mb3dlckNhc2UoKSArICcgbm8tc2VsZWN0JztcbiAgICAgICAgICAgIC8vIGlmIChjdXJyZW50SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAvLyAgICAgaHRtbFJlZi5jbGFzc0xpc3QuYWRkKHRoaXMuZGltZW5zaW9uc1tjdXJyZW50SW5kZXggLSAxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIHRoaXMuY29ybmVyV2lkdGggPSBmaWVsZFZhbHVlc1tpXS5sZW5ndGggKiAxMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICByb3dFbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNvcm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5ID0gZmlsdGVyZWREYXRhU3RvcmUgKyBmaWVsZFZhbHVlc1tpXSArICd8JztcbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUucHVzaChbcm93RWxlbWVudF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXS5wdXNoKHJvd0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0Z1cnRoZXJEZXB0aCkge1xuICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQucm93c3BhbiA9IHRoaXMuY3JlYXRlUm93KHRhYmxlLCBkYXRhLCByb3dPcmRlcixcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4ICsgMSwgZmlsdGVyZWREYXRhSGFzaEtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAndmVydGljYWwtYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXNIb3Jpem9udGFsJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRUb3BNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0Qm90dG9tTWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlUGFkZGluZyc6IDAuNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2F0ZWdvcmllcyc6IHRoaXMuY2F0ZWdvcmllcy5yZXZlcnNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAndmVydGljYWwtYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xMZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDZWxsT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNlbGxIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0hhc2g6IGZpbHRlcmVkRGF0YUhhc2hLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xIYXNoOiB0aGlzLl9jb2x1bW5LZXlBcnJbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjaGFydDogdGhpcy5nZXRDaGFydE9iaihmaWx0ZXJlZERhdGFIYXNoS2V5LCB0aGlzLl9jb2x1bW5LZXlBcnJbal0pWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2hhcnQtY2VsbCAnICsgKGogKyAxKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gY29sTGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLmNsYXNzTmFtZSA9ICdjaGFydC1jZWxsIGxhc3QtY29sJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXS5wdXNoKGNoYXJ0Q2VsbE9iaik7XG4gICAgICAgICAgICAgICAgICAgIG1pbm1heE9iaiA9IHRoaXMuZ2V0Q2hhcnRPYmoodGhpcy5kYXRhU3RvcmUsIHRoaXMuY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuX2NvbHVtbktleUFycltqXSlbMF07XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IChwYXJzZUludChtaW5tYXhPYmoubWF4KSA+IG1heCkgPyBtaW5tYXhPYmoubWF4IDogbWF4O1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSAocGFyc2VJbnQobWlubWF4T2JqLm1pbikgPCBtaW4pID8gbWlubWF4T2JqLm1pbiA6IG1pbjtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLm1heCA9IG1heDtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLm1pbiA9IG1pbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzcGFuICs9IHJvd0VsZW1lbnQucm93c3BhbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93c3BhbjtcbiAgICB9XG5cbiAgICBjcmVhdGVNZWFzdXJlSGVhZGluZ3MgKHRhYmxlLCBkYXRhLCBtZWFzdXJlT3JkZXIpIHtcbiAgICAgICAgdmFyIGNvbHNwYW4gPSAwLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGwgPSB0aGlzLm1lYXN1cmVzLmxlbmd0aCxcbiAgICAgICAgICAgIGNvbEVsZW1lbnQsXG4gICAgICAgICAgICBhc2NlbmRpbmdTb3J0QnRuLFxuICAgICAgICAgICAgZGVzY2VuZGluZ1NvcnRCdG4sXG4gICAgICAgICAgICBoZWFkaW5nVGV4dCxcbiAgICAgICAgICAgIGhlYWRpbmdUZXh0U3BhbixcbiAgICAgICAgICAgIG1lYXN1cmVIZWFkaW5nLFxuICAgICAgICAgICAgaHRtbFJlZixcbiAgICAgICAgICAgIGhlYWRlckRpdixcbiAgICAgICAgICAgIGRyYWdEaXY7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJycsXG4gICAgICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSBtZWFzdXJlT3JkZXJbaV0sXG4gICAgICAgICAgICAgICAgbWVhc3VyZVVuaXQgPSAnJyxcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGlvbk5vZGU7XG4gICAgICAgICAgICAgICAgLy8gZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XTtcbiAgICAgICAgICAgIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXG4gICAgICAgICAgICBkcmFnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkcmFnRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVhc3VyZS1kcmFnLWhhbmRsZScpO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5oZWlnaHQgPSAnNXB4JztcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUucGFkZGluZ1RvcCA9ICczcHgnO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nQm90dG9tID0gJzFweCc7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZERyYWdIYW5kbGUoZHJhZ0RpdiwgMjUpO1xuXG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgICAgIGh0bWxSZWYuc2V0QXR0cmlidXRlKCdkYXRhLW1lYXN1cmUnLCBmaWVsZENvbXBvbmVudCk7XG5cbiAgICAgICAgICAgIG1lYXN1cmVVbml0ID0gdGhpcy5tZWFzdXJlVW5pdHNbdGhpcy5tZWFzdXJlcy5pbmRleE9mKGZpZWxkQ29tcG9uZW50KV07XG4gICAgICAgICAgICBpZiAobWVhc3VyZVVuaXQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVIZWFkaW5nID0gZmllbGRDb21wb25lbnQgKyAnICcgKyB0aGlzLnVuaXRGdW5jdGlvbihtZWFzdXJlVW5pdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVIZWFkaW5nID0gZmllbGRDb21wb25lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhlYWRpbmdUZXh0U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIGhlYWRpbmdUZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21lYXN1cmUtc3BhbicpO1xuXG4gICAgICAgICAgICBoZWFkaW5nVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGluZ1RleHQuaW5uZXJIVE1MID0gbWVhc3VyZUhlYWRpbmc7XG4gICAgICAgICAgICBoZWFkaW5nVGV4dC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ21lYXN1cmUtdGV4dCcpO1xuICAgICAgICAgICAgaGVhZGluZ1RleHRTcGFuLmFwcGVuZENoaWxkKGhlYWRpbmdUZXh0KTtcblxuICAgICAgICAgICAgYWdncmVnYXRpb25Ob2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBhZ2dyZWdhdGlvbk5vZGUuaW5uZXJIVE1MID0gdGhpcy5hZ2dyZWdhdGlvbi5zcGxpdCgnJykucmVkdWNlKChhLCBiLCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWR4ID09PSAxID8gYS50b1VwcGVyQ2FzZSgpICsgYiA6IGEgKyBiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhZ2dyZWdhdGlvbk5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZWFzdXJlLWFnZ3JlZ2F0aW9uJyk7XG4gICAgICAgICAgICBoZWFkaW5nVGV4dFNwYW4uYXBwZW5kQ2hpbGQoYWdncmVnYXRpb25Ob2RlKTtcblxuICAgICAgICAgICAgLy8gaGVhZGluZ1RleHRTcGFuID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZmllbGRDb21wb25lbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YUlzU29ydGFibGUpIHtcbiAgICAgICAgICAgICAgICBhc2NlbmRpbmdTb3J0QnRuID0gdGhpcy5jcmVhdGVTb3J0QnV0dG9uKCdhc2NlbmRpbmctc29ydCcpO1xuICAgICAgICAgICAgICAgIGh0bWxSZWYuYXBwZW5kQ2hpbGQoYXNjZW5kaW5nU29ydEJ0bik7XG5cbiAgICAgICAgICAgICAgICBkZXNjZW5kaW5nU29ydEJ0biA9IHRoaXMuY3JlYXRlU29ydEJ1dHRvbignZGVzY2VuZGluZy1zb3J0Jyk7XG4gICAgICAgICAgICAgICAgaHRtbFJlZi5hcHBlbmRDaGlsZChkZXNjZW5kaW5nU29ydEJ0bik7XG5cbiAgICAgICAgICAgICAgICBodG1sUmVmLmFwcGVuZENoaWxkKGFzY2VuZGluZ1NvcnRCdG4pO1xuICAgICAgICAgICAgICAgIGh0bWxSZWYuYXBwZW5kQ2hpbGQoaGVhZGluZ1RleHRTcGFuKTtcbiAgICAgICAgICAgICAgICBodG1sUmVmLmFwcGVuZENoaWxkKGRlc2NlbmRpbmdTb3J0QnRuKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaHRtbFJlZi5hcHBlbmRDaGlsZChoZWFkaW5nVGV4dFNwYW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAnNXB4JztcbiAgICAgICAgICAgIC8vIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gKCgzMCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoIC0gMTUpIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgLy8gaHRtbFJlZi5hcHBlbmRDaGlsZChhZ2dyZWdhdGlvbk5vZGUpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcblxuICAgICAgICAgICAgY2xhc3NTdHIgKz0gJ2NvbHVtbi1tZWFzdXJlcyAnICsgdGhpcy5tZWFzdXJlc1tpXS50b0xvd2VyQ2FzZSgpICsgJyBuby1zZWxlY3QnO1xuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ2dhYmxlSGVhZGVycykge1xuICAgICAgICAgICAgICAgIGNsYXNzU3RyICs9ICcgZHJhZ2dhYmxlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY29ybmVySGVpZ2h0ID0gaHRtbFJlZi5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuXG4gICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoZHJhZ0Rpdik7XG4gICAgICAgICAgICBoZWFkZXJEaXYuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBjb2xFbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29ybmVySGVpZ2h0ICsgNSxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaHRtbDogaGVhZGVyRGl2Lm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5fY29sdW1uS2V5QXJyLnB1c2godGhpcy5tZWFzdXJlc1tpXSk7XG4gICAgICAgICAgICB0YWJsZVswXS5wdXNoKGNvbEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZURpbWVuc2lvbkhlYWRpbmdzIChjb2xPcmRlckxlbmd0aCkge1xuICAgICAgICB2YXIgY29ybmVyQ2VsbEFyciA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBodG1sUmVmLFxuICAgICAgICAgICAgY2xhc3NTdHIgPSAnJyxcbiAgICAgICAgICAgIGhlYWRlckRpdixcbiAgICAgICAgICAgIGRyYWdEaXY7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXG4gICAgICAgICAgICBkcmFnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkcmFnRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGltZW5zaW9uLWRyYWctaGFuZGxlJyk7XG4gICAgICAgICAgICBkcmFnRGl2LnN0eWxlLmhlaWdodCA9ICc1cHgnO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nVG9wID0gJzNweCc7XG4gICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMXB4JztcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kRHJhZ0hhbmRsZShkcmFnRGl2LCAyNSk7XG5cbiAgICAgICAgICAgIGh0bWxSZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICBodG1sUmVmLmlubmVySFRNTCA9IHRoaXMuZGltZW5zaW9uc1tpXVswXS50b1VwcGVyQ2FzZSgpICsgdGhpcy5kaW1lbnNpb25zW2ldLnN1YnN0cigxKTtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICc1cHgnO1xuICAgICAgICAgICAgY2xhc3NTdHIgPSAnZGltZW5zaW9uLWhlYWRlciAnICsgdGhpcy5kaW1lbnNpb25zW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGRyYWdEaXYpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgY29ybmVyQ2VsbEFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25zW2ldLmxlbmd0aCAqIDEwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGhlYWRlckRpdi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcm5lckNlbGxBcnI7XG4gICAgfVxuXG4gICAgY3JlYXRlVmVydGljYWxBeGlzSGVhZGVyICgpIHtcbiAgICAgICAgbGV0IGh0bWxSZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDM1LFxuICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F4aXMtaGVhZGVyLWNlbGwnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY3JlYXRlQ2FwdGlvbiAobWF4TGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbe1xuICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICBjb2xzcGFuOiBtYXhMZW5ndGgsXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdjYXB0aW9uLWNoYXJ0JyxcbiAgICAgICAgICAgIGNoYXJ0OiB0aGlzLm1jLmNoYXJ0KHtcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjYXB0aW9uJyxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAnY29uZmlnJzoge1xuICAgICAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnY2FwdGlvbic6ICdTYWxlIG9mIENlcmVhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3ViY2FwdGlvbic6ICdBY3Jvc3MgU3RhdGVzLCBBY3Jvc3MgWWVhcnMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6ICcwJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfV07XG4gICAgfVxuXG4gICAgY3JlYXRlQ3Jvc3N0YWIgKCkge1xuICAgICAgICB2YXIgb2JqID0gdGhpcy5nbG9iYWxEYXRhLFxuICAgICAgICAgICAgcm93T3JkZXIgPSB0aGlzLmRpbWVuc2lvbnMuZmlsdGVyKGZ1bmN0aW9uICh2YWwsIGksIGFycikge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjb2xPcmRlciA9IHRoaXMubWVhc3VyZXMuZmlsdGVyKGZ1bmN0aW9uICh2YWwsIGksIGFycikge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhYmxlID0gW10sXG4gICAgICAgICAgICB4QXhpc1JvdyA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBtYXhMZW5ndGggPSAwO1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICAvLyBJbnNlcnQgZGltZW5zaW9uIGhlYWRpbmdzXG4gICAgICAgICAgICB0YWJsZS5wdXNoKHRoaXMuY3JlYXRlRGltZW5zaW9uSGVhZGluZ3ModGFibGUsIGNvbE9yZGVyLmxlbmd0aCkpO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IHZlcnRpY2FsIGF4aXMgaGVhZGVyXG4gICAgICAgICAgICB0YWJsZVswXS5wdXNoKHRoaXMuY3JlYXRlVmVydGljYWxBeGlzSGVhZGVyKCkpO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IG1lYXN1cmUgaGVhZGluZ3NcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTWVhc3VyZUhlYWRpbmdzKHRhYmxlLCBvYmosIHRoaXMubWVhc3VyZXMpO1xuICAgICAgICAgICAgLy8gSW5zZXJ0IHJvd3NcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUm93KHRhYmxlLCBvYmosIHJvd09yZGVyLCAwLCAnJyk7XG4gICAgICAgICAgICAvLyBGaW5kIHJvdyB3aXRoIG1heCBsZW5ndGggaW4gdGhlIHRhYmxlXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSAobWF4TGVuZ3RoIDwgdGFibGVbaV0ubGVuZ3RoKSA/IHRhYmxlW2ldLmxlbmd0aCA6IG1heExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFB1c2ggYmxhbmsgcGFkZGluZyBjZWxscyB1bmRlciB0aGUgZGltZW5zaW9ucyBpbiB0aGUgc2FtZSByb3cgYXMgdGhlIGhvcml6b250YWwgYXhpc1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYmxhbmstY2VsbCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXh0cmEgY2VsbCBmb3IgeSBheGlzLiBFc3NlbnRpYWxseSBZIGF4aXMgZm9vdGVyLlxuICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F4aXMtZm9vdGVyLWNlbGwnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gUHVzaCBob3Jpem9udGFsIGF4ZXMgaW50byB0aGUgbGFzdCByb3cgb2YgdGhlIHRhYmxlXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWF4TGVuZ3RoIC0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnRUeXBlID09PSAnYmFyMmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2hvcml6b250YWwtYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2hvcml6b250YWwtYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRMZWZ0TWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydExlZnRNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRSaWdodE1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZVBhZGRpbmcnOiAwLjVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhdGVnb3JpZXMnOiB0aGlzLmNhdGVnb3JpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhYmxlLnB1c2goeEF4aXNSb3cpO1xuICAgICAgICAgICAgLy8gUGxhY2UgdGhlIGNhcHRpb24gY2VsbCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSB0YWJsZVxuICAgICAgICAgICAgdGFibGUudW5zaGlmdCh0aGlzLmNyZWF0ZUNhcHRpb24obWF4TGVuZ3RoKSk7XG4gICAgICAgICAgICB0aGlzLl9jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vIGRhdGEgZm9yIGNyb3NzdGFiLiA6KFxuICAgICAgICAgICAgdGFibGUucHVzaChbe1xuICAgICAgICAgICAgICAgIGh0bWw6ICc8cCBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiPicgKyB0aGlzLm5vRGF0YU1lc3NhZ2UgKyAnPC9wPicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoICogdGhpcy5tZWFzdXJlcy5sZW5ndGhcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlRmlsdGVycyAoKSB7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gW10sXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gdGhpcy5kaW1lbnNpb25zLnNsaWNlKDAsIHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxKSxcbiAgICAgICAgICAgIG1hdGNoZWRWYWx1ZXM7XG5cbiAgICAgICAgZGltZW5zaW9ucy5mb3JFYWNoKGRpbWVuc2lvbiA9PiB7XG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzID0gdGhpcy5nbG9iYWxEYXRhW2RpbWVuc2lvbl07XG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXJHZW4oZGltZW5zaW9uLCB2YWx1ZS50b1N0cmluZygpKSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyVmFsOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH1cblxuICAgIGNyZWF0ZURhdGFDb21ib3MgKCkge1xuICAgICAgICBsZXQgciA9IFtdLFxuICAgICAgICAgICAgZ2xvYmFsQXJyYXkgPSB0aGlzLm1ha2VHbG9iYWxBcnJheSgpLFxuICAgICAgICAgICAgbWF4ID0gZ2xvYmFsQXJyYXkubGVuZ3RoIC0gMTtcblxuICAgICAgICBmdW5jdGlvbiByZWN1cnNlIChhcnIsIGkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsID0gZ2xvYmFsQXJyYXlbaV0ubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBhcnIuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgYS5wdXNoKGdsb2JhbEFycmF5W2ldW2pdKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHIucHVzaChhKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWN1cnNlKGEsIGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVjdXJzZShbXSwgMCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIG1ha2VHbG9iYWxBcnJheSAoKSB7XG4gICAgICAgIGxldCB0ZW1wT2JqID0ge30sXG4gICAgICAgICAgICB0ZW1wQXJyID0gW107XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuZ2xvYmFsRGF0YSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmXG4gICAgICAgICAgICAgICAgdGhpcy5kaW1lbnNpb25zLmluZGV4T2Yoa2V5KSAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICBrZXkgIT09IHRoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICB0ZW1wT2JqW2tleV0gPSB0aGlzLmdsb2JhbERhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZW1wQXJyID0gT2JqZWN0LmtleXModGVtcE9iaikubWFwKGtleSA9PiB0ZW1wT2JqW2tleV0pO1xuICAgICAgICByZXR1cm4gdGVtcEFycjtcbiAgICB9XG5cbiAgICBnZXRGaWx0ZXJIYXNoTWFwICgpIHtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSB0aGlzLmNyZWF0ZUZpbHRlcnMoKSxcbiAgICAgICAgICAgIGRhdGFDb21ib3MgPSB0aGlzLmNyZWF0ZURhdGFDb21ib3MoKSxcbiAgICAgICAgICAgIGhhc2hNYXAgPSB7fTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGRhdGFDb21ib3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZGF0YUNvbWJvID0gZGF0YUNvbWJvc1tpXSxcbiAgICAgICAgICAgICAgICBrZXkgPSAnJyxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbGVuID0gZGF0YUNvbWJvLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbmd0aCA9IGZpbHRlcnMubGVuZ3RoOyBrIDwgbGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlclZhbCA9IGZpbHRlcnNba10uZmlsdGVyVmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUNvbWJvW2pdID09PSBmaWx0ZXJWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IGRhdGFDb21ib1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9ICd8JyArIGRhdGFDb21ib1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goZmlsdGVyc1trXS5maWx0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2hNYXA7XG4gICAgfVxuXG4gICAgYXBwZW5kRHJhZ0hhbmRsZSAobm9kZSwgbnVtSGFuZGxlcykge1xuICAgICAgICBsZXQgaSxcbiAgICAgICAgICAgIGhhbmRsZVNwYW47XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1IYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgIGhhbmRsZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLm1hcmdpbkxlZnQgPSAnMXB4JztcbiAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUuZm9udFNpemUgPSAnM3B4JztcbiAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUubGluZUhlaWdodCA9ICcxJztcbiAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUudmVydGljYWxBbGlnbiA9ICd0b3AnO1xuICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChoYW5kbGVTcGFuKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVNvcnRCdXR0b24gKGNsYXNzTmFtZSkge1xuICAgICAgICBsZXQgc29ydEJ0bixcbiAgICAgICAgICAgIGNsYXNzU3RyID0gJ3NvcnQtYnRuJyArICcgJyArIChjbGFzc05hbWUgfHwgJycpO1xuICAgICAgICBzb3J0QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICBzb3J0QnRuLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbGFzc1N0ci50cmltKCkpO1xuICAgICAgICBzb3J0QnRuLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgc29ydEJ0bi5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgIGlmIChjbGFzc05hbWUgPT09ICdhc2NlbmRpbmctc29ydCcpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQXNjZW5kaW5nU3RlcHMoc29ydEJ0biwgNCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09PSAnZGVzY2VuZGluZy1zb3J0Jykge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmREZXNjZW5kaW5nU3RlcHMoc29ydEJ0biwgNCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvcnRCdG47XG4gICAgfVxuXG4gICAgYXBwZW5kQXNjZW5kaW5nU3RlcHMgKGJ0biwgbnVtU3RlcHMpIHtcbiAgICAgICAgbGV0IGksXG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgbWFyZ2luVmFsdWUgPSAyLFxuICAgICAgICAgICAgZGl2V2lkdGggPSAxO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IG51bVN0ZXBzOyBpKyspIHtcbiAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSAnc29ydC1zdGVwcyBhc2NlbmRpbmcnO1xuICAgICAgICAgICAgZGl2V2lkdGggPSBkaXZXaWR0aCArICgoaSAvIGRpdldpZHRoKSAqIDQpO1xuICAgICAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IChkaXZXaWR0aC50b0ZpeGVkKCkpICsgJ3B4JztcbiAgICAgICAgICAgIGlmIChpID09PSAobnVtU3RlcHMgLSAxKSkge1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUubWFyZ2luVG9wID0gbWFyZ2luVmFsdWUgKyAncHgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLm1hcmdpblRvcCA9IG1hcmdpblZhbHVlICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ0bi5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFwcGVuZERlc2NlbmRpbmdTdGVwcyAoYnRuLCBudW1TdGVwcykge1xuICAgICAgICBsZXQgaSxcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBtYXJnaW5WYWx1ZSA9IDIsXG4gICAgICAgICAgICBkaXZXaWR0aCA9IDEwO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IG51bVN0ZXBzOyBpKyspIHtcbiAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSAnc29ydC1zdGVwcyBkZXNjZW5kaW5nJztcbiAgICAgICAgICAgIGRpdldpZHRoID0gZGl2V2lkdGggLSAoKGkgLyBkaXZXaWR0aCkgKiA1KTtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSAoZGl2V2lkdGgudG9GaXhlZCgpKSArICdweCc7XG4gICAgICAgICAgICBpZiAoaSA9PT0gKG51bVN0ZXBzIC0gMSkpIHtcbiAgICAgICAgICAgICAgICBub2RlLnN0eWxlLm1hcmdpblRvcCA9IG1hcmdpblZhbHVlICsgJ3B4JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5tYXJnaW5Ub3AgPSBtYXJnaW5WYWx1ZSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidG4uYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJDcm9zc3RhYiAoKSB7XG4gICAgICAgIGxldCBnbG9iYWxNYXggPSAtSW5maW5pdHksXG4gICAgICAgICAgICBnbG9iYWxNaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgIHlBeGlzO1xuXG4gICAgICAgIC8vIEdlbmVyYXRlIHRoZSBjcm9zc3RhYiBhcnJheVxuICAgICAgICB0aGlzLmNyb3NzdGFiID0gdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuXG4gICAgICAgIC8vIEZpbmQgdGhlIGdsb2JhbCBtYXhpbXVtIGFuZCBtaW5pbXVtIGZvciB0aGUgYXhlc1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3dMYXN0Q2hhcnQgPSB0aGlzLmNyb3NzdGFiW2ldW3RoaXMuY3Jvc3N0YWJbaV0ubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAocm93TGFzdENoYXJ0Lm1heCB8fCByb3dMYXN0Q2hhcnQubWluKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbE1heCA8IHJvd0xhc3RDaGFydC5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWF4ID0gcm93TGFzdENoYXJ0Lm1heDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdsb2JhbE1pbiA+IHJvd0xhc3RDaGFydC5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWluID0gcm93TGFzdENoYXJ0Lm1pbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIFkgYXhpcyBjaGFydHMgaW4gdGhlIGNyb3NzdGFiIGFycmF5IHdpdGggdGhlIGdsb2JhbCBtYXhpbXVtIGFuZCBtaW5pbXVtXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV0sXG4gICAgICAgICAgICAgICAgcm93QXhpcztcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNyb3NzdGFiRWxlbWVudCA9IHJvd1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3N0YWJFbGVtZW50LmNoYXJ0ICYmIGNyb3NzdGFiRWxlbWVudC5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykge1xuICAgICAgICAgICAgICAgICAgICByb3dBeGlzID0gY3Jvc3N0YWJFbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93QXhpcy5jaGFydC5jb25mLmNvbmZpZy5jaGFydC5heGlzVHlwZSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXhpc0NoYXJ0ID0gcm93QXhpcy5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBheGlzQ2hhcnQuY29uZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jb25maWcuY2hhcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNaW4nOiBnbG9iYWxNaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRCb3R0b21NYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydFRvcE1hcmdpblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jb25maWcuY2hhcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRMZWZ0TWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRSaWdodE1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0NoYXJ0ID0gdGhpcy5tYy5jaGFydChjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93QXhpcy5jaGFydCA9IGF4aXNDaGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERyYXcgdGhlIGNyb3NzdGFiIHdpdGggb25seSB0aGUgYXhlcywgY2FwdGlvbiBhbmQgaHRtbCB0ZXh0LlxuICAgICAgICAvLyBSZXF1aXJlZCBzaW5jZSBheGVzIGNhbm5vdCByZXR1cm4gbGltaXRzIHVubGVzcyB0aGV5IGFyZSBkcmF3blxuICAgICAgICB0aGlzLmNyZWF0ZU11bHRpQ2hhcnQodGhpcy5jcm9zc3RhYik7XG5cbiAgICAgICAgLy8gRmluZCBhIFkgQXhpcyBjaGFydFxuICAgICAgICB5QXhpcyA9IHlBeGlzIHx8IHRoaXMuZmluZFlBeGlzQ2hhcnQoKTtcblxuICAgICAgICAvLyBQbGFjZSBhIGNoYXJ0IG9iamVjdCB3aXRoIGxpbWl0cyBmcm9tIHRoZSBZIEF4aXMgaW4gdGhlIGNvcnJlY3QgY2VsbFxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY3Jvc3N0YWJFbGVtZW50ID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmICh5QXhpcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNyb3NzdGFiRWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnaHRtbCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdjaGFydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdheGlzLWZvb3Rlci1jZWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0ID0geUF4aXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRJbnN0YW5jZSA9IGNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSBjaGFydEluc3RhbmNlLmdldExpbWl0cygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbWl0ID0gbGltaXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExpbWl0ID0gbGltaXRzWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0T2JqID0gdGhpcy5nZXRDaGFydE9iaih0aGlzLmRhdGFTdG9yZSwgdGhpcy5jYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQucm93SGFzaCwgY3Jvc3N0YWJFbGVtZW50LmNvbEhhc2gsIG1pbkxpbWl0LCBtYXhMaW1pdClbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQgPSBjaGFydE9iajtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgY3Jvc3N0YWJcbiAgICAgICAgdGhpcy5jcmVhdGVNdWx0aUNoYXJ0KHRoaXMuY3Jvc3N0YWIpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBjcm9zc3RhYiB3aGVuIHRoZSBtb2RlbCB1cGRhdGVzXG4gICAgICAgIHRoaXMuZGF0YVN0b3JlLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudExpc3QubW9kZWxVcGRhdGVkLCAoZSwgZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3Jvc3N0YWIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQXR0YWNoIGV2ZW50IGxpc3RlbmVycyB0byBjb25jdXJyZW50bHkgaGlnaGxpZ2h0IHBsb3RzIHdoZW4gaG92ZXJlZCBpblxuICAgICAgICB0aGlzLm1jLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyaW4nLCAoZXZ0LCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1tqXS5jaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJvd1tqXS5jaGFydC5jb25mLnR5cGUgPT09ICdjYXB0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dbal0uY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsQWRhcHRlciA9IHJvd1tqXS5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5ID0gdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5VmFsID0gZGF0YS5kYXRhW2NhdGVnb3J5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFkYXB0ZXIuaGlnaGxpZ2h0KGNhdGVnb3J5VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEF0dGFjaCBldmVudCBsaXN0ZW5lcnMgdG8gY29uY3VycmVudGx5IHJlbW92ZSBoaWdobGlnaHRzIGZyb20gcGxvdHMgd2hlbiBob3ZlcmVkIG91dFxuICAgICAgICB0aGlzLm1jLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyb3V0JywgKGV2dCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1tqXS5jaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocm93W2pdLmNoYXJ0LmNvbmYudHlwZSA9PT0gJ2NhcHRpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93W2pdLmNoYXJ0LmNvbmYudHlwZSA9PT0gJ2F4aXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsQWRhcHRlciA9IHJvd1tqXS5jaGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ3Jvc3N0YWIgKCkge1xuICAgICAgICBsZXQgZmlsdGVyZWRDcm9zc3RhYiA9IHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKSxcbiAgICAgICAgICAgIGksIGlpLFxuICAgICAgICAgICAgaiwgamosXG4gICAgICAgICAgICBvbGRDaGFydHMgPSBbXSxcbiAgICAgICAgICAgIGdsb2JhbE1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIGdsb2JhbE1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgYXhpc0xpbWl0cyA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSByb3dbal07XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0Q29uZiA9IGNlbGwuY2hhcnQuZ2V0Q29uZigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcnRDb25mLnR5cGUgIT09ICdjYXB0aW9uJyAmJiBjaGFydENvbmYudHlwZSAhPT0gJ2F4aXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRDaGFydHMucHVzaChjZWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gZmlsdGVyZWRDcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gZmlsdGVyZWRDcm9zc3RhYltpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHJvd1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5yb3dIYXNoICYmIGNlbGwuY29sSGFzaCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgb2xkQ2hhcnQgPSB0aGlzLmdldE9sZENoYXJ0KG9sZENoYXJ0cywgY2VsbC5yb3dIYXNoLCBjZWxsLmNvbEhhc2gpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRzID0ge307XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkQ2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjaGFydE9iaiA9IHRoaXMuZ2V0Q2hhcnRPYmoodGhpcy5kYXRhU3RvcmUsIHRoaXMuY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd0hhc2gsIGNlbGwuY29sSGFzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRDaGFydCA9IGNoYXJ0T2JqWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRzID0gY2hhcnRPYmpbMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jaGFydCA9IG9sZENoYXJ0O1xuICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMobGltaXRzKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwubWF4ID0gbGltaXRzLm1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwubWluID0gbGltaXRzLm1pbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gZmlsdGVyZWRDcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gZmlsdGVyZWRDcm9zc3RhYltpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHJvd1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5tYXggfHwgY2VsbC5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbE1heCA8IGNlbGwubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSBjZWxsLm1heDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWluID4gY2VsbC5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbE1pbiA9IGNlbGwubWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBmaWx0ZXJlZENyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSBmaWx0ZXJlZENyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmIChjZWxsLmNoYXJ0ICYmIGNlbGwuY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvd0F4aXMgPSBjZWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93QXhpcy5jaGFydC5jb25mLmNvbmZpZy5jaGFydC5heGlzVHlwZSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXhpc0NoYXJ0ID0gcm93QXhpcy5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBheGlzQ2hhcnQuY29uZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jb25maWcuY2hhcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNaW4nOiBnbG9iYWxNaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRCb3R0b21NYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydFRvcE1hcmdpblxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jb25maWcuY2hhcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRMZWZ0TWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRSaWdodE1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0NoYXJ0ID0gdGhpcy5tYy5jaGFydChjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93QXhpcy5jaGFydCA9IGF4aXNDaGFydDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3Jvc3N0YWIgPSBmaWx0ZXJlZENyb3NzdGFiO1xuICAgICAgICB0aGlzLmNyZWF0ZU11bHRpQ2hhcnQoKTtcbiAgICAgICAgYXhpc0xpbWl0cyA9IHRoaXMuZ2V0WUF4aXNMaW1pdHMoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY3Jvc3N0YWJFbGVtZW50ID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmICghY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdodG1sJykgJiZcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNsYXNzTmFtZSAhPT0gJ2JsYW5rLWNlbGwnICYmXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdheGlzLWZvb3Rlci1jZWxsJyAmJlxuICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuZ2V0Q29uZigpLnR5cGUgIT09ICdjYXB0aW9uJyAmJlxuICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuZ2V0Q29uZigpLnR5cGUgIT09ICdheGlzJykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRPYmogPSB0aGlzLmdldENoYXJ0T2JqKHRoaXMuZGF0YVN0b3JlLCB0aGlzLmNhdGVnb3JpZXMsIGNyb3NzdGFiRWxlbWVudC5yb3dIYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNvbEhhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzTGltaXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0xpbWl0c1sxXSlbMV07XG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydC51cGRhdGUoY2hhcnRPYmouZ2V0Q29uZigpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kWUF4aXNDaGFydCAoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjcm9zc3RhYkVsZW1lbnQgPSByb3dbal07XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzdGFiRWxlbWVudC5jaGFydCAmJlxuICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuY29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3Jvc3N0YWJFbGVtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFlBeGlzTGltaXRzICgpIHtcbiAgICAgICAgbGV0IGksIGlpLFxuICAgICAgICAgICAgaiwgamo7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gdGhpcy5jcm9zc3RhYltpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHJvd1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5jaGFydCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDb25mID0gY2VsbC5jaGFydC5nZXRDb25mKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFydENvbmYudHlwZSA9PT0gJ2F4aXMnICYmIGNoYXJ0Q29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjZWxsLmNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKS5nZXRMaW1pdHMoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRPbGRDaGFydCAob2xkQ2hhcnRzLCByb3dIYXNoLCBjb2xIYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBvbGRDaGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChvbGRDaGFydHNbaV0ucm93SGFzaCA9PT0gcm93SGFzaCAmJiBvbGRDaGFydHNbaV0uY29sSGFzaCA9PT0gY29sSGFzaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbGRDaGFydHNbaV0uY2hhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0Q2hhcnRzIChrZXksIG9yZGVyKSB7XG4gICAgICAgIGxldCBzb3J0UHJvY2Vzc29yID0gdGhpcy5tYy5jcmVhdGVEYXRhUHJvY2Vzc29yKCksXG4gICAgICAgICAgICBzb3J0Rm4sXG4gICAgICAgICAgICBzb3J0ZWREYXRhO1xuICAgICAgICBpZiAob3JkZXIgPT09ICdhc2NlbmRpbmcnKSB7XG4gICAgICAgICAgICBzb3J0Rm4gPSAoYSwgYikgPT4gYVtrZXldIC0gYltrZXldO1xuICAgICAgICB9IGVsc2UgaWYgKG9yZGVyID09PSAnZGVzY2VuZGluZycpIHtcbiAgICAgICAgICAgIHNvcnRGbiA9IChhLCBiKSA9PiBiW2tleV0gLSBhW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzb3J0Rm4gPSAoYSwgYikgPT4gMDtcbiAgICAgICAgfVxuICAgICAgICBzb3J0UHJvY2Vzc29yLnNvcnQoc29ydEZuKTtcbiAgICAgICAgc29ydGVkRGF0YSA9IHRoaXMuZGF0YVN0b3JlLmdldENoaWxkTW9kZWwoc29ydFByb2Nlc3Nvcik7XG4gICAgICAgIHRoaXMuY3Jvc3N0YWIuZm9yRWFjaChyb3cgPT4ge1xuICAgICAgICAgICAgbGV0IHJvd0NhdGVnb3JpZXM7XG4gICAgICAgICAgICByb3cuZm9yRWFjaChjZWxsID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5jaGFydCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnQgPSBjZWxsLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRDb25mID0gY2hhcnQuZ2V0Q29uZigpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcnRDb25mLnR5cGUgIT09ICdjYXB0aW9uJyAmJiBjaGFydENvbmYudHlwZSAhPT0gJ2F4aXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRPYmogPSB0aGlzLmdldENoYXJ0T2JqKHNvcnRlZERhdGEsIHRoaXMuY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd0hhc2gsIGNlbGwuY29sSGFzaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydC51cGRhdGUoY2hhcnRPYmpbMV0uZ2V0Q29uZigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0NhdGVnb3JpZXMgPSBjaGFydC5nZXRDb25mKCkuY2F0ZWdvcmllcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm93LmZvckVhY2goY2VsbCA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0ID0gY2VsbC5jaGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q29uZiA9IGNoYXJ0LmdldENvbmYoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJ0Q29uZi50eXBlID09PSAnYXhpcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBheGlzVHlwZSA9IGNoYXJ0Q29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXhpc1R5cGUgPT09ICd4Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydENvbmYuY29uZmlnLmNhdGVnb3JpZXMgPSByb3dDYXRlZ29yaWVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydENvbmYuY29uZmlnLmNhdGVnb3JpZXMgPSByb3dDYXRlZ29yaWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydC51cGRhdGUoY2hhcnRDb25mKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVNdWx0aUNoYXJ0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGljaGFydE9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QgPSB0aGlzLm1jLmNyZWF0ZU1hdHJpeCh0aGlzLmNyb3NzdGFiQ29udGFpbmVyLCB0aGlzLmNyb3NzdGFiKTtcbiAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdC5kcmF3KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QudXBkYXRlKHRoaXMuY3Jvc3N0YWIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZUhlYWRlcnMpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhZ0xpc3RlbmVyKHRoaXMubXVsdGljaGFydE9iamVjdC5wbGFjZUhvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGF0YUlzU29ydGFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0dXBTb3J0QnV0dG9ucyh0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXI7XG4gICAgfVxuXG4gICAgcGVybXV0ZUFyciAoYXJyKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHBlcm11dGUgKGFyciwgbWVtKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgICAgIG1lbSA9IG1lbSB8fCBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobWVtLmNvbmNhdChjdXJyZW50KS5qb2luKCd8JykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZXJtdXRlKGFyci5zbGljZSgpLCBtZW0uY29uY2F0KGN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGksIDAsIGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBlcm11dGVTdHJzID0gcGVybXV0ZShhcnIpO1xuICAgICAgICByZXR1cm4gcGVybXV0ZVN0cnMuam9pbignKiElXicpO1xuICAgIH1cblxuICAgIG1hdGNoSGFzaCAoZmlsdGVyU3RyLCBoYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBoYXNoKSB7XG4gICAgICAgICAgICBpZiAoaGFzaC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBrZXkuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgICAgICAgICAga2V5UGVybXV0YXRpb25zID0gdGhpcy5wZXJtdXRlQXJyKGtleXMpLnNwbGl0KCcqISVeJyk7XG4gICAgICAgICAgICAgICAgaWYgKGtleVBlcm11dGF0aW9ucy5pbmRleE9mKGZpbHRlclN0cikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlQZXJtdXRhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDaGFydE9iaiAoZGF0YVN0b3JlLCBjYXRlZ29yaWVzLCByb3dGaWx0ZXIsIGNvbEZpbHRlciwgbWluTGltaXQsIG1heExpbWl0KSB7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gW10sXG4gICAgICAgICAgICBmaWx0ZXJTdHIgPSAnJyxcbiAgICAgICAgICAgIHJvd0ZpbHRlcnMgPSByb3dGaWx0ZXIuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzID0gW10sXG4gICAgICAgICAgICBkYXRhUHJvY2Vzc29yID0ge30sXG4gICAgICAgICAgICBtYXRjaGVkSGFzaGVzID0gW10sXG4gICAgICAgICAgICAvLyBmaWx0ZXJlZEpTT04gPSBbXSxcbiAgICAgICAgICAgIC8vIG1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIC8vIG1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgZmlsdGVyZWREYXRhID0ge30sXG4gICAgICAgICAgICAvLyBhZGFwdGVyID0ge30sXG4gICAgICAgICAgICBsaW1pdHMgPSB7fSxcbiAgICAgICAgICAgIGNoYXJ0ID0ge307XG5cbiAgICAgICAgcm93RmlsdGVycy5wdXNoLmFwcGx5KHJvd0ZpbHRlcnMpO1xuICAgICAgICBmaWx0ZXJzID0gcm93RmlsdGVycy5maWx0ZXIoKGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoYSAhPT0gJycpO1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyU3RyID0gZmlsdGVycy5qb2luKCd8Jyk7XG4gICAgICAgIG1hdGNoZWRIYXNoZXMgPSB0aGlzLmhhc2hbdGhpcy5tYXRjaEhhc2goZmlsdGVyU3RyLCB0aGlzLmhhc2gpXTtcbiAgICAgICAgaWYgKG1hdGNoZWRIYXNoZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdGNoZWRIYXNoZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IgPSB0aGlzLm1jLmNyZWF0ZURhdGFQcm9jZXNzb3IoKTtcbiAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29yLmZpbHRlcihtYXRjaGVkSGFzaGVzW2ldKTtcbiAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29ycy5wdXNoKGRhdGFQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsdGVyZWREYXRhID0gZGF0YVN0b3JlLmdldENoaWxkTW9kZWwoZGF0YVByb2Nlc3NvcnMpO1xuICAgICAgICAgICAgaWYgKG1pbkxpbWl0ICE9PSB1bmRlZmluZWQgJiYgbWF4TGltaXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRDb25maWcuY2hhcnQueUF4aXNNaW5WYWx1ZSA9IG1pbkxpbWl0O1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRDb25maWcuY2hhcnQueUF4aXNNYXhWYWx1ZSA9IG1heExpbWl0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YUlzU29ydGFibGUpIHtcbiAgICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRKU09OID0gZmlsdGVyZWREYXRhLmdldEpTT04oKSxcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkQ2F0ZWdvcmllcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkSlNPTi5mb3JFYWNoKHZhbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yeSA9IHZhbFt0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvcnRlZENhdGVnb3JpZXMuaW5kZXhPZihjYXRlZ29yeSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRDYXRlZ29yaWVzLnB1c2goY2F0ZWdvcnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllcyA9IHNvcnRlZENhdGVnb3JpZXMuc2xpY2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYXJ0ID0gdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogZmlsdGVyZWREYXRhLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuY2hhcnRUeXBlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uOiBbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgbWVhc3VyZTogW2NvbEZpbHRlcl0sXG4gICAgICAgICAgICAgICAgc2VyaWVzVHlwZTogJ1NTJyxcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVNb2RlOiB0aGlzLmFnZ3JlZ2F0aW9uLFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB0aGlzLmNoYXJ0Q29uZmlnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbWl0cyA9IGNoYXJ0LmdldExpbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICAnbWF4JzogbGltaXRzLm1heCxcbiAgICAgICAgICAgICAgICAnbWluJzogbGltaXRzLm1pblxuICAgICAgICAgICAgfSwgY2hhcnRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0dXBTb3J0QnV0dG9ucyAoKSB7XG4gICAgICAgIGxldCBhc2NlbmRpbmdCdG5zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYXNjZW5kaW5nLXNvcnQnKSxcbiAgICAgICAgICAgIGlpID0gYXNjZW5kaW5nQnRucy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZGVzY2VuZGluZ0J0bnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdkZXNjZW5kaW5nLXNvcnQnKSxcbiAgICAgICAgICAgIGpqID0gYXNjZW5kaW5nQnRucy5sZW5ndGgsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgc29ydEJ0bnMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdzb3J0LWJ0bicpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IGJ0biA9IGFzY2VuZGluZ0J0bnNbaV07XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNsaWNrRWxlbSxcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzU3RyO1xuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbGFzc05hbWUuc3BsaXQoJyAnKS5pbmRleE9mKCdzb3J0LXN0ZXBzJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrRWxlbSA9IGUudGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2tFbGVtID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG1lYXN1cmVOYW1lID0gY2xpY2tFbGVtLnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLW1lYXN1cmUnKTtcbiAgICAgICAgICAgICAgICBjbGFzc1N0ciA9IGNsaWNrRWxlbS5jbGFzc05hbWUgKyAnIGFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gc29ydEJ0bnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBY3RpdmVDbGFzcyhzb3J0QnRuc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsaWNrRWxlbS5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xhc3NTdHIpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0c0FyZVNvcnRlZC5ib29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjbGFzc0xpc3QgPSBjbGlja0VsZW0uY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZWFzdXJlTmFtZSA9PT0gdGhpcy5jaGFydHNBcmVTb3J0ZWQubWVhc3VyZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NMaXN0LmluZGV4T2YodGhpcy5jaGFydHNBcmVTb3J0ZWQub3JkZXIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0Q2hhcnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0c0FyZVNvcnRlZCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib29sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZTogJydcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUFjdGl2ZUNsYXNzKGNsaWNrRWxlbSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRDaGFydHMobWVhc3VyZU5hbWUsICdhc2NlbmRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRzQXJlU29ydGVkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvb2w6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICdhc2NlbmRpbmctc29ydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZTogbWVhc3VyZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRDaGFydHMobWVhc3VyZU5hbWUsICdhc2NlbmRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydHNBcmVTb3J0ZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib29sOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICdhc2NlbmRpbmctc29ydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZWFzdXJlOiBtZWFzdXJlTmFtZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgbGV0IGJ0biA9IGRlc2NlbmRpbmdCdG5zW2pdO1xuICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGUgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBjbGlja0VsZW0sXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc1N0cjtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lLnNwbGl0KCcgJykuaW5kZXhPZignc29ydC1zdGVwcycpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjbGlja0VsZW0gPSBlLnRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrRWxlbSA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtZWFzdXJlTmFtZSA9IGNsaWNrRWxlbS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1tZWFzdXJlJyk7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgPSBjbGlja0VsZW0uY2xhc3NOYW1lICsgJyBhY3RpdmUnO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHNvcnRCdG5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQWN0aXZlQ2xhc3Moc29ydEJ0bnNbaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjbGlja0VsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzU3RyKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydHNBcmVTb3J0ZWQuYm9vbCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2xhc3NMaXN0ID0gY2xpY2tFbGVtLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVhc3VyZU5hbWUgPT09IHRoaXMuY2hhcnRzQXJlU29ydGVkLm1lYXN1cmUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5pbmRleE9mKHRoaXMuY2hhcnRzQXJlU29ydGVkLm9yZGVyKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc29ydENoYXJ0cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydHNBcmVTb3J0ZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVBY3RpdmVDbGFzcyhjbGlja0VsZW0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3J0Q2hhcnRzKG1lYXN1cmVOYW1lLCAnZGVzY2VuZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydHNBcmVTb3J0ZWQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9vbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogJ2Rlc2NlbmRpbmctc29ydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVhc3VyZTogbWVhc3VyZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRDaGFydHMobWVhc3VyZU5hbWUsICdkZXNjZW5kaW5nJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRzQXJlU29ydGVkID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9vbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVyOiAnZGVzY2VuZGluZy1zb3J0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IG1lYXN1cmVOYW1lXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVtb3ZlQWN0aXZlQ2xhc3MgKGVsZW0pIHtcbiAgICAgICAgbGV0IGNsYXNzTm0gPSBlbGVtLmNsYXNzTmFtZVxuICAgICAgICAgICAgLnNwbGl0KCcgJylcbiAgICAgICAgICAgIC5maWx0ZXIoKHZhbCkgPT4gdmFsICE9PSAnYWN0aXZlJylcbiAgICAgICAgICAgIC5qb2luKCcgJyk7XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTm0pO1xuICAgIH1cblxuICAgIGFkZEFjdGl2ZUNsYXNzIChlbGVtKSB7XG4gICAgICAgIGxldCBjbGFzc05tID0gZWxlbS5jbGFzc05hbWVcbiAgICAgICAgICAgIC5zcGxpdCgnICcpO1xuICAgICAgICBjbGFzc05tLnB1c2goJ2FjdGl2ZScpO1xuICAgICAgICBjbGFzc05tID0gY2xhc3NObS5qb2luKCcgJyk7XG4gICAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIGNsYXNzTm0pO1xuICAgIH1cblxuICAgIGRyYWdMaXN0ZW5lciAocGxhY2VIb2xkZXIpIHtcbiAgICAgICAgLy8gR2V0dGluZyBvbmx5IGxhYmVsc1xuICAgICAgICBsZXQgb3JpZ0NvbmZpZyA9IHRoaXMuc3RvcmVQYXJhbXMuY29uZmlnLFxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IG9yaWdDb25maWcuZGltZW5zaW9ucyB8fCBbXSxcbiAgICAgICAgICAgIG1lYXN1cmVzID0gb3JpZ0NvbmZpZy5tZWFzdXJlcyB8fCBbXSxcbiAgICAgICAgICAgIG1lYXN1cmVzTGVuZ3RoID0gbWVhc3VyZXMubGVuZ3RoLFxuICAgICAgICAgICAgZGltZW5zaW9uc0xlbmd0aCA9IDAsXG4gICAgICAgICAgICBkaW1lbnNpb25zSG9sZGVyLFxuICAgICAgICAgICAgbWVhc3VyZXNIb2xkZXIsXG4gICAgICAgICAgICBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gbGV0IGVuZFxuICAgICAgICBwbGFjZUhvbGRlciA9IHBsYWNlSG9sZGVyWzFdO1xuICAgICAgICAvLyBPbWl0dGluZyBsYXN0IGRpbWVuc2lvblxuICAgICAgICBkaW1lbnNpb25zID0gZGltZW5zaW9ucy5zbGljZSgwLCBkaW1lbnNpb25zLmxlbmd0aCAtIDEpO1xuICAgICAgICBkaW1lbnNpb25zTGVuZ3RoID0gZGltZW5zaW9ucy5sZW5ndGg7XG4gICAgICAgIC8vIFNldHRpbmcgdXAgZGltZW5zaW9uIGhvbGRlclxuICAgICAgICBkaW1lbnNpb25zSG9sZGVyID0gcGxhY2VIb2xkZXIuc2xpY2UoMCwgZGltZW5zaW9uc0xlbmd0aCk7XG4gICAgICAgIC8vIFNldHRpbmcgdXAgbWVhc3VyZXMgaG9sZGVyXG4gICAgICAgIC8vIE9uZSBzaGlmdCBmb3IgYmxhbmsgYm94XG4gICAgICAgIG1lYXN1cmVzSG9sZGVyID0gcGxhY2VIb2xkZXIuc2xpY2UoZGltZW5zaW9uc0xlbmd0aCArIDEsXG4gICAgICAgICAgICBkaW1lbnNpb25zTGVuZ3RoICsgbWVhc3VyZXNMZW5ndGggKyAxKTtcbiAgICAgICAgc2V0dXBMaXN0ZW5lcihkaW1lbnNpb25zSG9sZGVyLCBkaW1lbnNpb25zLCBkaW1lbnNpb25zTGVuZ3RoLCB0aGlzLmRpbWVuc2lvbnMpO1xuICAgICAgICBzZXR1cExpc3RlbmVyKG1lYXN1cmVzSG9sZGVyLCBtZWFzdXJlcywgbWVhc3VyZXNMZW5ndGgsIHRoaXMubWVhc3VyZXMpO1xuICAgICAgICBmdW5jdGlvbiBzZXR1cExpc3RlbmVyIChob2xkZXIsIGFyciwgYXJyTGVuLCBnbG9iYWxBcnIpIHtcbiAgICAgICAgICAgIGxldCBsaW1pdExlZnQgPSAwLFxuICAgICAgICAgICAgICAgIGxpbWl0UmlnaHQgPSAwLFxuICAgICAgICAgICAgICAgIGxhc3QgPSBhcnJMZW4gLSAxLFxuICAgICAgICAgICAgICAgIGxuID0gTWF0aC5sb2cyO1xuXG4gICAgICAgICAgICBpZiAoaG9sZGVyWzBdKSB7XG4gICAgICAgICAgICAgICAgbGltaXRMZWZ0ID0gcGFyc2VJbnQoaG9sZGVyWzBdLmdyYXBoaWNzLnN0eWxlLmxlZnQpO1xuICAgICAgICAgICAgICAgIGxpbWl0UmlnaHQgPSBwYXJzZUludChob2xkZXJbbGFzdF0uZ3JhcGhpY3Muc3R5bGUubGVmdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyTGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICBsZXQgZWwgPSBob2xkZXJbaV0uZ3JhcGhpY3MsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBob2xkZXJbaV0sXG4gICAgICAgICAgICAgICAgICAgIG5MZWZ0ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgZGlmZiA9IDA7XG4gICAgICAgICAgICAgICAgaXRlbS5jZWxsVmFsdWUgPSBhcnJbaV07XG4gICAgICAgICAgICAgICAgaXRlbS5vcmlnTGVmdCA9IHBhcnNlSW50KGVsLnN0eWxlLmxlZnQpO1xuICAgICAgICAgICAgICAgIGl0ZW0ucmVkWm9uZSA9IGl0ZW0ub3JpZ0xlZnQgKyBwYXJzZUludChlbC5zdHlsZS53aWR0aCkgLyAyO1xuICAgICAgICAgICAgICAgIGl0ZW0uaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGl0ZW0uYWRqdXN0ID0gMDtcbiAgICAgICAgICAgICAgICBpdGVtLm9yaWdaID0gZWwuc3R5bGUuekluZGV4O1xuICAgICAgICAgICAgICAgIHNlbGYuX3NldHVwRHJhZyhpdGVtLmdyYXBoaWNzLCBmdW5jdGlvbiBkcmFnU3RhcnQgKGR4LCBkeSkge1xuICAgICAgICAgICAgICAgICAgICBuTGVmdCA9IGl0ZW0ub3JpZ0xlZnQgKyBkeCArIGl0ZW0uYWRqdXN0O1xuICAgICAgICAgICAgICAgICAgICBpZiAobkxlZnQgPCBsaW1pdExlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSBsaW1pdExlZnQgLSBuTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5MZWZ0ID0gbGltaXRMZWZ0IC0gbG4oZGlmZik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG5MZWZ0ID4gbGltaXRSaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IG5MZWZ0IC0gbGltaXRSaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5MZWZ0ID0gbGltaXRSaWdodCArIGxuKGRpZmYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmxlZnQgPSBuTGVmdCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnpJbmRleCA9IDEwMDA7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZVNoaWZ0aW5nKGl0ZW0uaW5kZXgsIGZhbHNlLCBob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICBtYW5hZ2VTaGlmdGluZyhpdGVtLmluZGV4LCB0cnVlLCBob2xkZXIpO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGRyYWdFbmQgKCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhbmdlID0gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBqID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5hZGp1c3QgPSAwO1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS56SW5kZXggPSBpdGVtLm9yaWdaO1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gaXRlbS5vcmlnTGVmdCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOyBqIDwgYXJyTGVuOyArK2opIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxBcnJbal0gIT09IGhvbGRlcltqXS5jZWxsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxBcnJbal0gPSBob2xkZXJbal0uY2VsbFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuZ2xvYmFsRGF0YSA9IHNlbGYuYnVpbGRHbG9iYWxEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVDcm9zc3RhYigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYW5hZ2VTaGlmdGluZyAoaW5kZXgsIGlzUmlnaHQsIGhvbGRlcikge1xuICAgICAgICAgICAgbGV0IHN0YWNrID0gW10sXG4gICAgICAgICAgICAgICAgZHJhZ0l0ZW0gPSBob2xkZXJbaW5kZXhdLFxuICAgICAgICAgICAgICAgIG5leHRQb3MgPSBpc1JpZ2h0ID8gaW5kZXggKyAxIDogaW5kZXggLSAxLFxuICAgICAgICAgICAgICAgIG5leHRJdGVtID0gaG9sZGVyW25leHRQb3NdO1xuICAgICAgICAgICAgLy8gU2F2aW5nIGRhdGEgZm9yIGxhdGVyIHVzZVxuICAgICAgICAgICAgaWYgKG5leHRJdGVtKSB7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaCghaXNSaWdodCAmJlxuICAgICAgICAgICAgICAgICAgICAocGFyc2VJbnQoZHJhZ0l0ZW0uZ3JhcGhpY3Muc3R5bGUubGVmdCkgPCBuZXh0SXRlbS5yZWRab25lKSk7XG4gICAgICAgICAgICAgICAgc3RhY2sucHVzaChzdGFjay5wb3AoKSB8fFxuICAgICAgICAgICAgICAgICAgICAoaXNSaWdodCAmJiBwYXJzZUludChkcmFnSXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0KSA+IG5leHRJdGVtLm9yaWdMZWZ0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHN0YWNrLnBvcCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0ucmVkWm9uZSk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0ub3JpZ0xlZnQpO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5leHRJdGVtLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5hZGp1c3QgKz0gcGFyc2VJbnQobmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0l0ZW0uYWRqdXN0IC09IHBhcnNlSW50KG5leHRJdGVtLmdyYXBoaWNzLnN0eWxlLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5vcmlnTGVmdCA9IGRyYWdJdGVtLm9yaWdMZWZ0O1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5yZWRab25lID0gZHJhZ0l0ZW0ucmVkWm9uZTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0uaW5kZXggPSBkcmFnSXRlbS5pbmRleDtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUubGVmdCA9IG5leHRJdGVtLm9yaWdMZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChob2xkZXJbbmV4dFBvc10pO1xuICAgICAgICAgICAgICAgICAgICBob2xkZXJbbmV4dFBvc10gPSBob2xkZXJbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBob2xkZXJbaW5kZXhdID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gU2V0dGluZyBuZXcgdmFsdWVzIGZvciBkcmFnaXRlbVxuICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMykge1xuICAgICAgICAgICAgICAgIGRyYWdJdGVtLmluZGV4ID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgZHJhZ0l0ZW0ub3JpZ0xlZnQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBkcmFnSXRlbS5yZWRab25lID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0dXBEcmFnIChlbCwgaGFuZGxlciwgaGFuZGxlcjIpIHtcbiAgICAgICAgbGV0IHggPSAwLFxuICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgIGZ1bmN0aW9uIGN1c3RvbUhhbmRsZXIgKGUpIHtcbiAgICAgICAgICAgIGhhbmRsZXIoZS5jbGllbnRYIC0geCwgZS5jbGllbnRZIC0geSk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxldCB0YXJnZXQgPSBlLnRhcmdldCxcbiAgICAgICAgICAgICAgICB0YXJnZXRDbGFzc1N0ciA9IHRhcmdldC5jbGFzc05hbWU7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsYXNzTmFtZSA9PT0gJycgfHwgdGFyZ2V0Q2xhc3NTdHIuc3BsaXQoJyAnKS5pbmRleE9mKCdzb3J0LWJ0bicpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHggPSBlLmNsaWVudFg7XG4gICAgICAgICAgICAgICAgeSA9IGUuY2xpZW50WTtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMC44O1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGN1c3RvbUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gbW91c2VVcEhhbmRsZXIgKGUpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjdXN0b21IYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoaGFuZGxlcjIsIDEwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbHRlckdlbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhKSA9PiBkYXRhW2tleV0gPT09IHZhbDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3Jvc3N0YWJFeHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY3Jvc3N0YWJFeHQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDYsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDEzXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxMCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogNyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogOVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiAxMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDMsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiA3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiA5LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogNyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDMsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA4LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDEyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDIsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogMTEsXG4gICAgICAgICdWaXNpdG9ycyc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDYsXG4gICAgICAgICdWaXNpdG9ycyc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTNcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDE2XG4gICAgfVxuXTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9sYXJnZURhdGEuanMiXSwic291cmNlUm9vdCI6IiJ9