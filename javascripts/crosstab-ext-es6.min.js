/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={dimensions:['Product','State','Month'],measures:['Sale','Profit','Visitors'],measureUnits:['INR','$',''],unitFunction:a=>'('+a+')',chartType:'bar2d',noDataMessage:'No data to display.',crosstabContainer:'crosstab-div',dataIsSortable:!0,cellWidth:150,cellHeight:80,// showFilter: true,
	draggableHeaders:!0,aggregation:'min',chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',rollOverBandColor:'#badaf0',columnHoverColor:'#1b83cc',chartBottomMargin:'2',chartTopMargin:'2',chartLeftMargin:'5',chartRightMargin:'7',zeroPlaneThickness:'0',zeroPlaneAlpha:'100',bgColor:'#FFFFFF',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'1',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'0',alternateVGridAlpha:'0',paletteColors:'#5B5B5B',usePlotGradientColor:'0',valueFontColor:'#FFFFFF',canvasBorderThickness:'0',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(c,f){if(this.data=c,this.eventList={modelUpdated:'modelupdated',modelDeleted:'modeldeleted',metaInfoUpdate:'metainfoupdated',processorUpdated:'processorupdated',processorDeleted:'processordeleted'},this.storeParams={data:c,config:f},this._columnKeyArr=[],this.measures=f.measures,this.chartType=f.chartType,this.dimensions=f.dimensions,this.chartConfig=f.chartConfig,this.measureUnits=f.measureUnits,this.dataIsSortable=f.dataIsSortable,this.crosstabContainer=f.crosstabContainer,this.cellWidth=f.cellWidth||210,this.cellHeight=f.cellHeight||113,this.showFilter=f.showFilter||!1,this.aggregation=f.aggregation||'sum',this.draggableHeaders=f.draggableHeaders||!1,this.noDataMessage=f.noDataMessage||'No data to display.',this.unitFunction=f.unitFunction||function(g){return'('+g+')'},'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data});else throw new Error('MultiChartng module not found.');if(this.showFilter)if('function'==typeof FCDataFilterExt)this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box');else throw new Error('DataFilter module not found.');// Building a data structure for internal use.
	this.globalData=this.buildGlobalData(),this.hash=this.getFilterHashMap(),this.chartsAreSorted={bool:!1,order:'',measure:''}}/**
	     * Build an array of arrays data structure from the data store for internal use.
	     * @return {Array} An array of arrays generated from the dataStore's array of objects
	     */buildGlobalData(){let c=this.dataStore,f=c.getKeys();if(f){let g={};for(let h=0,m=f.length;h<m;h++)g[f[h]]=c.getUniqueValues(f[h]);// Default categories for charts (i.e. no sorting applied)
	return this.categories=g[this.dimensions[this.dimensions.length-1]],g}throw new Error('Could not generate keys from data store')}createRow(c,f,g,h,m){var q,t,v,z,n=0,o=g[h],p=f[o],s=p.length,u=h<g.length-1,w=this._columnKeyArr.length,A=1/0,B=-(1/0),C={};for(0===h&&c.push([]),q=0;q<s;q+=1){let D='';if(z=document.createElement('p'),z.innerHTML=p[q],z.style.textAlign='center',z.style.marginTop=(this.cellHeight-10)/2+'px',D+='row-dimensions '+this.dimensions[h].toLowerCase()+' '+p[q].toLowerCase()+' no-select',z.style.visibility='hidden',document.body.appendChild(z),this.cornerWidth=10*p[q].length,document.body.removeChild(z),z.style.visibility='visible',t={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:z.outerHTML,className:D},v=m+p[q]+'|',q?c.push([t]):c[c.length-1].push(t),u)t.rowspan=this.createRow(c,f,g,h+1,v);else{'bar2d'===this.chartType?c[c.length-1].push({rowspan:1,colspan:1,width:40,className:'vertical-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'x',borderthickness:0,isHorizontal:0,chartTopMargin:this.chartConfig.chart.chartTopMargin,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,valuePadding:0.5},categories:this.categories.reverse()}})}):c[c.length-1].push({rowspan:1,colspan:1,width:40,className:'vertical-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'y'}}})});for(let E=0;E<w;E+=1){let F={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:v,colHash:this._columnKeyArr[E],// chart: this.getChartObj(filteredDataHashKey, this._columnKeyArr[j])[1],
	className:'chart-cell '+(E+1)};E==w-1&&(F.className='chart-cell last-col'),c[c.length-1].push(F),C=this.getChartObj(this.dataStore,this.categories,v,this._columnKeyArr[E])[0],B=parseInt(C.max)>B?C.max:B,A=parseInt(C.min)<A?C.min:A,F.max=B,F.min=A}}n+=t.rowspan}return n}createMeasureHeadings(c,f,g){var h,n,o,p,q,s,t,u,v,w,m=this.measures.length;for(h=0;h<m;h+=1){let C,z='',A=g[h],B='';// fieldValues = data[fieldComponent];
	v=document.createElement('div'),v.style.textAlign='center',w=document.createElement('div'),w.setAttribute('class','measure-drag-handle'),w.style.height='5px',w.style.paddingTop='3px',w.style.paddingBottom='1px',this.appendDragHandle(w,25),u=document.createElement('div'),u.style.position='relative',u.setAttribute('data-measure',A),B=this.measureUnits[this.measures.indexOf(A)],t=0<B.length?A+' '+this.unitFunction(B):A,s=document.createElement('span'),s.setAttribute('class','measure-span'),q=document.createElement('div'),q.innerHTML=t,q.setAttribute('class','measure-text'),s.appendChild(q),C=document.createElement('div'),C.innerHTML=this.aggregation.split('').reduce((D,E,F)=>{return 1===F?D.toUpperCase()+E:D+E}),C.setAttribute('class','measure-aggregation'),s.appendChild(C),this.dataIsSortable?(o=this.createSortButton('ascending-sort'),u.appendChild(o),p=this.createSortButton('descending-sort'),u.appendChild(p),u.appendChild(o),u.appendChild(s),u.appendChild(p)):u.appendChild(s),u.style.textAlign='center',u.style.marginTop='5px',document.body.appendChild(u),z+='column-measures '+this.measures[h].toLowerCase()+' no-select',this.draggableHeaders&&(z+=' draggable'),this.cornerHeight=u.offsetHeight,document.body.removeChild(u),v.appendChild(w),v.appendChild(u),n={width:this.cellWidth,height:this.cornerHeight+5,rowspan:1,colspan:1,html:v.outerHTML,className:z},this._columnKeyArr.push(this.measures[h]),c[0].push(n)}return 0}createDimensionHeadings(){var g,m,n,c=[],f=0,h='';for(f=0;f<this.dimensions.length-1;f++)m=document.createElement('div'),m.style.textAlign='center',n=document.createElement('div'),n.setAttribute('class','dimension-drag-handle'),n.style.height='5px',n.style.paddingTop='3px',n.style.paddingBottom='1px',this.appendDragHandle(n,25),g=document.createElement('p'),g.innerHTML=this.dimensions[f][0].toUpperCase()+this.dimensions[f].substr(1),g.style.textAlign='center',g.style.marginTop='5px',h='dimension-header '+this.dimensions[f].toLowerCase()+' no-select',this.draggableHeaders&&(h+=' draggable'),m.appendChild(n),m.appendChild(g),c.push({width:10*this.dimensions[f].length,height:35,rowspan:1,colspan:1,html:m.outerHTML,className:h});return c}createVerticalAxisHeader(){let c=document.createElement('p');return c.innerHTML='',c.style.textAlign='center',{width:40,height:35,rowspan:1,colspan:1,html:c.outerHTML,className:'axis-header-cell'}}createCaption(c){return[{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:this.mc.chart({type:'caption',width:'100%',height:'100%',dataFormat:'json',config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}})}]}createCrosstab(){var c=this.globalData,f=this.dimensions.filter(function(p,q,s){if(p!==s[s.length-1])return!0}),g=this.measures.filter(function(p,q,s){if(p!==s[s.length])return!0}),h=[],m=[],n=0,o=0;if(c){// Find row with max length in the table
	for(h.push(this.createDimensionHeadings(h,g.length)),h[0].push(this.createVerticalAxisHeader()),this.createMeasureHeadings(h,c,this.measures),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;// Push blank padding cells under the dimensions in the same row as the horizontal axis
	for(n=0;n<this.dimensions.length-1;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});// Extra cell for y axis. Essentially Y axis footer.
	// Push horizontal axes into the last row of the table
	for(m.push({rowspan:1,colspan:1,height:30,width:40,className:'axis-footer-cell'}),n=0;n<o-this.dimensions.length;n++)'bar2d'===this.chartType?m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'horizontal-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'y',isHorizontal:1}}})}):m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'horizontal-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'x',borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,valuePadding:0.5},categories:this.categories}})});h.push(m),h.unshift(this.createCaption(o)),this._columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return h}createFilters(){let g,c=[],f=this.dimensions.slice(0,this.dimensions.length-1);return f.forEach(h=>{g=this.globalData[h],g.forEach(m=>{c.push({filter:this.filterGen(h,m.toString()),filterVal:m})})}),c}createDataCombos(){function c(m,n){for(let p=0,q=g[n].length;p<q;p++){var o=m.slice(0);o.push(g[n][p]),n===h?f.push(o):c(o,n+1)}}let f=[],g=this.makeGlobalArray(),h=g.length-1;return c([],0),f}makeGlobalArray(){let c={},f=[];for(let g in this.globalData)this.globalData.hasOwnProperty(g)&&-1!==this.dimensions.indexOf(g)&&g!==this.dimensions[this.dimensions.length-1]&&(c[g]=this.globalData[g]);return f=Object.keys(c).map(g=>c[g]),f}getFilterHashMap(){let c=this.createFilters(),f=this.createDataCombos(),g={};for(let h=0,m=f.length;h<m;h++){let n=f[h],o='',p=[];for(let q=0,s=n.length;q<s;q++)for(let t=0,u=c.length;t<u;t++){let v=c[t].filterVal;n[q]===v&&(o+=0===q?n[q]:'|'+n[q],p.push(c[t].filter))}g[o]=p}return g}appendDragHandle(c,f){let g,h;for(g=0;g<f;g++)h=document.createElement('span'),h.style.marginLeft='1px',h.style.fontSize='3px',h.style.lineHeight='1',h.style.verticalAlign='top',c.appendChild(h)}createSortButton(c){let f=document.createElement('span');return f.setAttribute('class',('sort-btn '+(c||'')).trim()),f.style.position='absolute',f.style.display='inline-block','ascending-sort'===c?this.appendAscendingSteps(f,4):'descending-sort'==c&&this.appendDescendingSteps(f,4),f}appendAscendingSteps(c,f){let g,h,m=2,n=1;for(g=1;g<=f;g++)h=document.createElement('span'),h.style.display='block',h.className='sort-steps ascending',n=n+4*(g/n),h.style.width=n.toFixed()+'px',h.style.marginTop=g===f-1?m+'px':m+'px',c.appendChild(h)}appendDescendingSteps(c,f){let g,h,m=2,n=10;for(g=1;g<=f;g++)h=document.createElement('span'),h.style.display='block',h.className='sort-steps descending',n=n-5*(g/n),h.style.width=n.toFixed()+'px',h.style.marginTop=g===f-1?m+'px':m+'px',c.appendChild(h)}renderCrosstab(){let g,c=-(1/0),f=1/0;// Generate the crosstab array
	this.crosstab=this.createCrosstab();// Find the global maximum and minimum for the axes
	for(let h=0,m=this.crosstab.length;h<m;h++){let n=this.crosstab[h][this.crosstab[h].length-1];(n.max||n.min)&&(c<n.max&&(c=n.max),f>n.min&&(f=n.min))}// Update the Y axis charts in the crosstab array with the global maximum and minimum
	for(let h=0,m=this.crosstab.length;h<m;h++){let o,n=this.crosstab[h];for(let p=0,q=n.length;p<q;p++){let s=n[p];if(s.chart&&'axis'===s.chart.conf.type&&(o=s,'y'===o.chart.conf.config.chart.axisType)){let t=o.chart,u=t.conf;u.config.chart={dataMin:f,axisType:'y',dataMax:c,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},'bar2d'===this.chartType&&(u.config.chart={dataMin:f,axisType:'y',dataMax:c,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),t=this.mc.chart(u),o.chart=t}}}// Draw the crosstab with only the axes, caption and html text.
	// Required since axes cannot return limits unless they are drawn
	this.createMultiChart(this.crosstab),g=g||this.findYAxisChart();// Place a chart object with limits from the Y Axis in the correct cell
	for(let h=0,m=this.crosstab.length;h<m;h++){let n=this.crosstab[h];for(let o=0,p=n.length;o<p;o++){let q=n[o];if(g&&!q.hasOwnProperty('html')&&!q.hasOwnProperty('chart')&&'blank-cell'!==q.className&&'axis-footer-cell'!==q.className){let s=g.chart,t=s.getChartInstance(),u=t.getLimits(),v=u[0],w=u[1],z=this.getChartObj(this.dataStore,this.categories,q.rowHash,q.colHash,v,w)[1];q.chart=z}}}// Update the crosstab
	this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,()=>{this.globalData=this.buildGlobalData(),this.updateCrosstab()}),this.mc.addEventListener('hoverin',(h,m)=>{if(m.data)for(let o=0,p=this.crosstab.length;o<p;o++){let q=this.crosstab[o];for(var n=0;n<q.length;n++)if(q[n].chart&&'caption'!==q[n].chart.conf.type&&'axis'!==q[n].chart.conf.type){let s=q[n].chart,t=this.dimensions[this.dimensions.length-1],u=m.data[t];s.highlight(u)}}}),this.mc.addEventListener('hoverout',()=>{for(let m=0,n=this.crosstab.length;m<n;m++){let o=this.crosstab[m];for(var h=0;h<o.length;h++)if(o[h].chart&&'caption'!==o[h].chart.conf.type&&'axis'!==o[h].chart.conf.type){let p=o[h].chart;p.highlight()}}})}updateCrosstab(){let f,g,h,m,c=this.createCrosstab(),n=[],o=-(1/0),p=1/0,q=[];for(f=0,g=this.crosstab.length;f<g;f++){let s=this.crosstab[f];for(h=0,m=s.length;h<m;h++){let t=s[h];if(t.chart){let u=t.chart.getConf();'caption'!==u.type&&'axis'!==u.type&&n.push(t)}}}for(f=0,g=c.length;f<g;f++){let s=c[f];for(h=0,m=s.length;h<m;h++){let t=s[h];if(t.rowHash&&t.colHash){let u=this.getOldChart(n,t.rowHash,t.colHash),v={};if(!u){let w=this.getChartObj(this.dataStore,this.categories,t.rowHash,t.colHash);u=w[1],v=w[0]}t.chart=u,0!==Object.keys(v).length&&(t.max=v.max,t.min=v.min)}}}for(f=0,g=c.length;f<g;f++){let s=c[f];for(h=0,m=s.length;h<m;h++){let t=s[h];(t.max||t.min)&&(o<t.max&&(o=t.max),p>t.min&&(p=t.min))}}for(f=0,g=c.length;f<g;f++){let s=c[f];for(h=0,m=s.length;h<m;h++){let t=s[h];if(t.chart&&'axis'===t.chart.conf.type){let u=t;if('y'===u.chart.conf.config.chart.axisType){let v=u.chart,w=v.conf;w.config.chart={dataMin:p,axisType:'y',dataMax:o,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},'bar2d'===this.chartType&&(w.config.chart={dataMin:p,axisType:'y',dataMax:o,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),v=this.mc.chart(w),u.chart=v}}}}this.crosstab=c,this.createMultiChart(),q=this.getYAxisLimits();for(let s=0,t=this.crosstab.length;s<t;s++){let u=this.crosstab[s];for(let v=0,w=u.length;v<w;v++){let z=u[v];if(!z.hasOwnProperty('html')&&'blank-cell'!==z.className&&'axis-footer-cell'!==z.className&&'caption'!==z.chart.getConf().type&&'axis'!==z.chart.getConf().type){let A=this.getChartObj(this.dataStore,this.categories,z.rowHash,z.colHash,q[0],q[1])[1];z.chart.update(A.getConf())}}}}findYAxisChart(){for(let c=0,f=this.crosstab.length;c<f;c++){let g=this.crosstab[c];for(let h=0,m=g.length;h<m;h++){let n=g[h];if(n.chart&&'y'===n.chart.conf.config.chart.axisType)return n}}}getYAxisLimits(){let c,f,g,h;for(c=0,f=this.crosstab.length;c<f;c++){let m=this.crosstab[c];for(g=0,h=m.length;g<h;g++){let n=m[g];if(n.chart){let o=n.chart.getConf();if('axis'===o.type&&'y'===o.config.chart.axisType)return n.chart.getChartInstance().getLimits()}}}}getOldChart(c,f,g){for(var h=c.length-1;0<=h;h--)if(c[h].rowHash===f&&c[h].colHash===g)return c[h].chart}sortCharts(c,f){let h,m,g=this.mc.createDataProcessor();h='ascending'===f?(n,o)=>n[c]-o[c]:'descending'===f?(n,o)=>o[c]-n[c]:()=>0,g.sort(h),m=this.dataStore.getChildModel(g),this.crosstab.forEach(n=>{let o;n.forEach(p=>{if(p.chart){let q=p.chart,s=q.getConf();if('caption'!==s.type&&'axis'!==s.type){let t=this.getChartObj(m,this.categories,p.rowHash,p.colHash);q.update(t[1].getConf()),o=q.getConf().categories}}}),n.forEach(p=>{if(p.chart){let q=p.chart,s=q.getConf();if('axis'===s.type){let t=s.config.chart.axisType;'x'===t&&(s.config.categories='bar2d'===this.chartType?o.reverse():o,q.update(s))}}})})}createMultiChart(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.dataIsSortable&&this.setupSortButtons(this.multichartObject.placeHolder),this.multichartObject.placeHolder}permuteArr(c){function f(m,n){let o;n=n||[];for(let p=0,q=m.length;p<q;p++)o=m.splice(p,1),0===m.length&&g.push(n.concat(o).join('|')),f(m.slice(),n.concat(o)),m.splice(p,0,o[0]);return g}let g=[];var h=f(c);return h.join('*!%^')}matchHash(c,f){for(var g in f)if(f.hasOwnProperty(g)){let h=g.split('|'),m=this.permuteArr(h).split('*!%^');if(-1!==m.indexOf(c))return m[0];continue}return!1}getChartObj(c,f,g,h,m,n){let o=[],p='',q=g.split('|'),s=[],t={},u=[],// filteredJSON = [],
	// max = -Infinity,
	// min = Infinity,
	v={},// adapter = {},
	w={},z={};if(q.push.apply(q),o=q.filter(A=>{return''!==A}),p=o.join('|'),u=this.hash[this.matchHash(p,this.hash)],u){for(let A=0,B=u.length;A<B;A++)t=this.mc.createDataProcessor(),t.filter(u[A]),s.push(t);if(v=c.getChildModel(s),void 0!==m&&void 0!==n&&(this.chartConfig.chart.yAxisMinValue=m,this.chartConfig.chart.yAxisMaxValue=n),this.dataIsSortable){let A=v.getJSON(),B=[];A.forEach(C=>{let D=C[this.dimensions[this.dimensions.length-1]];-1===B.indexOf(D)&&B.push(D)}),f=B.slice()}return z=this.mc.chart({dataSource:v,type:this.chartType,width:'100%',height:'100%',dimension:[this.dimensions[this.dimensions.length-1]],measure:[h],seriesType:'SS',aggregateMode:this.aggregation,categories:f,config:this.chartConfig}),w=z.getLimit(),[{max:w.max,min:w.min},z]}}setupSortButtons(){let g,n,c=document.getElementsByClassName('ascending-sort'),f=c.length,h=document.getElementsByClassName('descending-sort'),m=c.length,o=document.getElementsByClassName('sort-btn');for(g=0;g<f;g++){let p=c[g];p.addEventListener('mousedown',q=>{let s,t,u;s=-1===q.target.className.split(' ').indexOf('sort-steps')?q.target:q.target.parentNode,t=s.parentNode.getAttribute('data-measure'),u=s.className+' active',q.stopPropagation();for(var v=o.length-1;0<=v;v--)this.removeActiveClass(o[v]);if(s.setAttribute('class',u),this.chartsAreSorted.bool){let w=s.className.split(' ');t===this.chartsAreSorted.measure&&-1!==w.indexOf(this.chartsAreSorted.order)?(this.sortCharts(),this.chartsAreSorted={bool:!1,order:'',measure:''},this.removeActiveClass(s)):(this.sortCharts(t,'ascending'),this.chartsAreSorted={bool:!0,order:'ascending-sort',measure:t})}else this.sortCharts(t,'ascending'),this.chartsAreSorted={bool:!0,order:'ascending-sort',measure:t}})}for(n=0;n<m;n++){let p=h[n];p.addEventListener('mousedown',q=>{let s,t,u;s=-1===q.target.className.split(' ').indexOf('sort-steps')?q.target:q.target.parentNode,t=s.parentNode.getAttribute('data-measure'),u=s.className+' active',q.stopPropagation();for(var v=o.length-1;0<=v;v--)this.removeActiveClass(o[v]);if(s.setAttribute('class',u),this.chartsAreSorted.bool){let w=s.className.split(' ');t===this.chartsAreSorted.measure&&-1!==w.indexOf(this.chartsAreSorted.order)?(this.sortCharts(),this.chartsAreSorted={bool:!1,order:'',measure:''},this.removeActiveClass(s)):(this.sortCharts(t,'descending'),this.chartsAreSorted={bool:!0,order:'descending-sort',measure:t})}else this.sortCharts(t,'descending'),this.chartsAreSorted={bool:!0,order:'descending-sort',measure:t}})}}removeActiveClass(c){let f=c.className.split(' ').filter(g=>'active'!==g).join(' ');c.setAttribute('class',f)}addActiveClass(c){let f=c.className.split(' ');f.push('active'),f=f.join(' '),c.setAttribute('class',f)}dragListener(c){function f(u,v,w,z){let A=0,B=0,C=Math.log2;u[0]&&(A=parseInt(u[0].graphics.style.left),B=parseInt(u[w-1].graphics.style.left));for(let D=0;D<w;++D){let E=u[D].graphics,F=u[D],G=0,H=0;F.cellValue=v[D],F.origLeft=parseInt(E.style.left),F.redZone=F.origLeft+parseInt(E.style.width)/2,F.index=D,F.adjust=0,F.origZ=E.style.zIndex,t._setupDrag(F.graphics,function(J){G=F.origLeft+J+F.adjust,G<A&&(H=A-G,G=A-C(H)),G>B&&(H=G-B,G=B+C(H)),E.style.left=G+'px',E.style.zIndex=1e3,g(F.index,!1,u),g(F.index,!0,u)},function(){let J=!1,K=0;for(F.adjust=0,E.style.zIndex=F.origZ,E.style.left=F.origLeft+'px';K<w;++K)z[K]!==u[K].cellValue&&(z[K]=u[K].cellValue,J=!0);J&&window.setTimeout(function(){t.globalData=t.buildGlobalData(),t.updateCrosstab()},10)})}}function g(u,v,w){let z=[],A=w[u],B=v?u+1:u-1,C=w[B];// Saving data for later use
	C&&(z.push(!v&&parseInt(A.graphics.style.left)<C.redZone),z.push(z.pop()||v&&parseInt(A.graphics.style.left)>C.origLeft),z.pop()&&(z.push(C.redZone),z.push(C.origLeft),z.push(C.index),v?A.adjust-=parseInt(C.graphics.style.width):A.adjust+=parseInt(C.graphics.style.width),C.origLeft=A.origLeft,C.redZone=A.redZone,C.index=A.index,C.graphics.style.left=C.origLeft+'px',z.push(w[B]),w[B]=w[u],w[u]=z.pop())),3===z.length&&(A.index=z.pop(),A.origLeft=z.pop(),A.redZone=z.pop())}// Getting only labels
	let q,s,h=this.storeParams.config,m=h.dimensions||[],n=h.measures||[],o=n.length,p=0,t=this;// let end
	c=c[1],m=m.slice(0,m.length-1),p=m.length,q=c.slice(0,p),s=c.slice(p+1,p+o+1),f(q,m,p,this.dimensions),f(s,n,o,this.measures)}_setupDrag(c,f,g){function h(p){f(p.clientX-n,p.clientY-o)}function m(){c.style.opacity=1,c.classList.remove('dragging'),window.document.removeEventListener('mousemove',h),window.document.removeEventListener('mouseup',m),window.setTimeout(g,10)}let n=0,o=0;c.addEventListener('mousedown',function(p){let q=p.target,s=q.className;(''===q.className||-1===s.split(' ').indexOf('sort-btn'))&&(n=p.clientX,o=p.clientY,c.style.opacity=0.8,c.classList.add('dragging'),window.document.addEventListener('mousemove',h),window.document.addEventListener('mouseup',m))})}filterGen(c,f){return g=>g[c]===f}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,