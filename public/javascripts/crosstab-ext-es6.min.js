/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(3);var config={dimensions:['Product','State','Month'],measures:['Profit','Visitors'],chartType:'column2d',noDataMessage:'No data to display.',crosstabContainer:'crosstab-div',width:800,height:600,cellWidth:150,cellHeight:113,showFilter:!0,draggableHeaders:!0,// aggregation: 'sum',
	chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',rollOverBandColor:'#badaf0',columnHoverColor:'#1b83cc',chartBottomMargin:'10',chartTopMargin:'10',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#FFFFFF',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'0',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#FFFFFF',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	let SpaceManager=__webpack_require__(2);/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.eventList={modelUpdated:'modelupdated',modelDeleted:'modeldeleted',metaInfoUpdate:'metainfoupdated',processorUpdated:'processorupdated',processorDeleted:'processordeleted'},this.data=b,'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data});else return{test:function(f){return f}};this.storeParams={data:b,config:c},this.chartType=c.chartType,this.showFilter=c.showFilter||!1,this.draggableHeaders=c.draggableHeaders||!1,this.chartConfig=c.chartConfig,this.dimensions=c.dimensions,this.measures=c.measures,this.measureOnRow=!1,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.width=c.width||800,this.height=c.height||600,this.cellWidth=c.cellWidth||210,this.cellHeight=c.cellHeight||113,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation||'sum',this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&this.showFilter&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.dataStore.addEventListener(this.eventList.modelUpdated,()=>{this.globalData=this.buildGlobalData(),this.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let f=0,g=b.length;f<g;f++)c[b[f]]=this.dataStore.getUniqueValues(b[f]);return c}return!1}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this.columnKeyArr.length,z=1/0,A=-(1/0),B={};for(p=0;p<q;p+=1){let C='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',C+='row-dimensions '+this.dimensions[g].toLowerCase()+' '+o[p].toLowerCase()+' no-select',w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:C},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{let D={config:{config:{chart:{axisType:'y'}}}},E={};if('bar2d'===this.chartType){let F=this.globalData[this.dimensions[this.dimensions.length-1]];D={config:{config:{chart:{axisType:'x',borderthickness:0,isHorizontal:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:F}}}}E=this.mc.dataAdapter(D),b[b.length-1].push({rowspan:1,colspan:1,width:40,className:'y-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:E}});for(let F=0;F<v;F+=1){let G={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this.columnKeyArr[F],className:'chart-cell'};b[b.length-1].push(G),B=this.getChartObj(u,this.columnKeyArr[F])[0],A=parseInt(B.max)>A?B.max:A,z=parseInt(B.min)<z?B.min:z,G.max=A,G.min=z}}m+=s.rowspan}return m}createCol(b,c,f){var g,m,n,o,p,q,s,h=this.measures.length;for(g=0;g<h;g+=1){let t='',u=f[g];// fieldValues = data[fieldComponent];
	for(p=document.createElement('div'),p.style.textAlign='center',q=document.createElement('div'),q.setAttribute('class','measure-drag-handle'),q.style.height='5px',q.style.paddingTop='3px',q.style.paddingBottom='1px',m=0;25>m;m++)s=document.createElement('span'),s.style.marginLeft='1px',s.style.fontSize='3px',s.style.lineHeight='1',s.style.verticalAlign='top',q.appendChild(s);o=document.createElement('p'),o.innerHTML=u,o.style.textAlign='center',o.style.marginTop='5px',document.body.appendChild(o),t+='column-measures '+this.measures[g].toLowerCase()+' no-select',this.draggableHeaders&&(t+=' draggable'),this.cornerHeight=o.offsetHeight,document.body.removeChild(o),p.appendChild(q),p.appendChild(o),n={width:this.cellWidth,height:35,rowspan:1,colspan:1,html:p.outerHTML,className:t},this.columnKeyArr.push(this.measures[g]),b[0].push(n)}return 0}createRowDimHeading(){var f,g,m,n,o,b=[],c=0,h='';for(c=0;c<this.dimensions.length-1;c++){for(m=document.createElement('div'),m.style.textAlign='center',n=document.createElement('div'),n.setAttribute('class','dimension-drag-handle'),n.style.height='5px',n.style.paddingTop='3px',n.style.paddingBottom='1px',f=0;25>f;f++)o=document.createElement('span'),o.style.marginLeft='1px',o.style.fontSize='3px',o.style.lineHeight='1',o.style.verticalAlign='top',n.appendChild(o);g=document.createElement('p'),g.innerHTML=this.dimensions[c][0].toUpperCase()+this.dimensions[c].substr(1),g.style.textAlign='center',g.style.marginTop='5px',h='corner-cell '+this.dimensions[c].toLowerCase()+' no-select',this.draggableHeaders&&(h+=' draggable'),m.appendChild(n),m.appendChild(g),b.push({width:10*this.dimensions[c],height:35,rowspan:1,colspan:1,html:m.outerHTML,className:h})}return b}createColDimHeading(b,c){for(var g,f=c;f<b.length;f++)g=document.createElement('p'),g.innerHTML='',g.style.textAlign='center',b[f].push({width:40,height:35,rowspan:1,colspan:1,html:g.outerHTML,className:'axis-header-cell'});return b}createCaption(b,c){let f=this.mc.dataAdapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:f}}]),b}createCrosstab(){var b=this,c=this.globalData,f=this.dimensions.filter(function(p,q,s){if(p!==s[s.length-1])return!0}),g=this.measures.filter(function(p,q,s){if(b.measureOnRow)return!0;return p!==s[s.length-1]||void 0}),h=[],m=[],n=0,o=0;if(c){for(h.push(this.createRowDimHeading(h,g.length)),h=this.createColDimHeading(h,0),this.createCol(h,c,this.measures),h.push([]),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;for(n=0;n<this.dimensions.length-1;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});// Extra cell for y axis. Essentially Y axis footer.
	for(m.push({rowspan:1,colspan:1,height:30,width:40,className:'axis-footer-cell'}),n=0;n<o-this.dimensions.length;n++){let p=this.globalData[this.dimensions[this.dimensions.length-1]],q={config:{config:{chart:{axisType:'x',borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:p}}},s={};'bar2d'===this.chartType&&(q={config:{config:{chart:{axisType:'y'}}}}),s=this.mc.dataAdapter(q),m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:s}})}h.push(m),h=this.createCaption(h,o),this.columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return h}rowDimReorder(b,c){var g,f='',h=this.dimensions;if(!0===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}colDimReorder(b,c){var g,f='',h=this.measures;if(!1===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,f=this.dimensions.length;c<f;c++)b.push(this.dimensions[c]);for(let c=0,f=this.measures.length;c<f;c++)b.push(this.measures[c]);return b}createFilters(){let m,b=[],c=0,f=this.dimensions.length-1,g=0,h=0;for(c=0;c<f;c++)for(m=this.globalData[this.dimensions[c]],g=0,h=m.length;g<h;g++)b.push({filter:this.filterGen(this.dimensions[c],m[g].toString()),filterVal:m[g]});return b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&f!==this.measure&&(b[f]=this.globalData[f]);return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}updateMatrix(b,c){let f=-(1/0),g=1/0;for(let h=0,m=b.length;h<m;h++){let n=b[h][b[h].length-1];(n.max||n.min)&&(f<n.max&&(f=n.max),g>n.min&&(g=n.min))}for(let h=0,m=c.length;h<m;h++){let o,n=c[h];for(let p=0,q=n.length;p<q;p++){let s=n[p],t=b[h][p];if(t.chart&&'axis'===t.chart.type&&(o=s,'y'===o.chart.chartConfig.dataSource.chart.axisType)){let u={config:{config:{chart:{dataMin:g,axisType:'y',dataMax:f,borderthickness:0,chartBottomMargin:10,chartTopMargin:10}}}},v=this.mc.dataAdapter(u);o.config.chart.configuration=v,o.update(o.config)}if(o&&!(t.hasOwnProperty('chart')||t.hasOwnProperty('html'))&&'blank-cell'!==t.className){let u=o.chart.chartObj.getLimits(),v=u[0],w=u[1],z=this.getChartObj(t.rowHash,t.colHash)[1];z.configuration.FCjson.chart.yAxisMinValue=v,z.configuration.FCjson.chart.yAxisMaxValue=w,s.config.chart=z,t.chart=z,s.update(s.config)}}}this.mc.addEventListener('hoverin',(h,m)=>{if(m.data)for(let o=0,p=c.length;o<p;o++){let q=b[o];for(var n=0;n<q.length;n++)if(q[n].chart&&'caption'!==q[n].chart.type&&'axis'!==q[n].chart.type){let s=q[n].chart.configuration,t=this.dimensions[this.dimensions.length-1],u=m.data[t];s.highlight(u)}}}),this.mc.addEventListener('hoverout',()=>{for(let m=0,n=c.length;m<n;m++){let o=b[m];for(var h=0;h<o.length;h++)if(o[h].chart&&'caption'!==o[h].chart.type&&'axis'!==o[h].chart.type){let p=o[h].chart.configuration;p.highlight()}}})}renderCrosstab(){let c,b=this.createCrosstab(),f=[];c=new SpaceManager(this.width,this.height),c.manageSpace(b,g=>{f=this.createMultiChart(g),this.updateMatrix(g,f)})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),this.multichartObject.draw()):this.multichartObject.update(b),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c){let f=[],g='',h=b.split('|'),m=[],n={},o=[],// filteredJSON = [],
	// max = -Infinity,
	// min = Infinity,
	p={},q={},s={},t={},u=this.globalData[this.dimensions[this.dimensions.length-1]];if(h.push.apply(h),f=h.filter(v=>{return''!==v}),g=f.join('|'),o=this.hash[this.matchHash(g,this.hash)],o){for(let v=0,w=o.length;v<w;v++)n=this.mc.createDataProcessor(),n.filter(o[v]),m.push(n);return p=this.dataStore.getChildModel(m),q={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[c],seriesType:'SS',aggregateMode:this.aggregation,categories:u,config:this.chartConfig},datastore:p},s=this.mc.dataAdapter(q),t=s.getLimit(),[{max:t.max,min:t.min},{type:this.chartType,width:'100%',height:'100%',configuration:s}]}}dragListener(b){function c(t,u,v,w){let z=0,A=0,B=Math.log2;t[0]&&(z=parseInt(t[0].graphics.style.left),A=parseInt(t[v-1].graphics.style.left));for(let C=0;C<v;++C){let D=t[C].graphics,E=t[C],F=0,G=0;E.cellValue=u[C],E.origLeft=parseInt(D.style.left),E.redZone=E.origLeft+parseInt(D.style.width)/2,E.index=C,E.adjust=0,E.origZ=D.style.zIndex,s._setupDrag(E.graphics,function(I){F=E.origLeft+I+E.adjust,F<z&&(G=z-F,F=z-B(G)),F>A&&(G=F-A,F=A+B(G)),D.style.left=F+'px',D.style.zIndex=1e3,f(E.index,!1,t),f(E.index,!0,t)},function(){let I=!1,J=0;for(E.adjust=0,D.style.zIndex=E.origZ,D.style.left=E.origLeft+'px';J<v;++J)w[J]!==t[J].cellValue&&(w[J]=t[J].cellValue,I=!0);I&&window.setTimeout(function(){s.globalData=s.buildGlobalData(),s.renderCrosstab()},10)})}}function f(t,u,v){let w=[],z=v[t],A=u?t+1:t-1,B=v[A];// Saving data for later use
	B&&(w.push(!u&&parseInt(z.graphics.style.left)<B.redZone),w.push(w.pop()||u&&parseInt(z.graphics.style.left)>B.origLeft),w.pop()&&(w.push(B.redZone),w.push(B.origLeft),w.push(B.index),u?z.adjust-=parseInt(B.graphics.style.width):z.adjust+=parseInt(B.graphics.style.width),B.origLeft=z.origLeft,B.redZone=z.redZone,B.index=z.index,B.graphics.style.left=B.origLeft+'px',w.push(v[A]),v[A]=v[t],v[t]=w.pop())),3===w.length&&(z.index=w.pop(),z.origLeft=w.pop(),z.redZone=w.pop())}// Getting only labels
	let p,q,g=this.storeParams.config,h=g.dimensions||[],m=g.measures||[],n=m.length,o=0,s=this;// let end
	b=b[1],h=h.slice(0,h.length-1),o=h.length,p=b.slice(0,o),q=b.slice(o+1,o+n+1),c(p,h,o,this.dimensions),c(q,m,n,this.measures)}_setupDrag(b,c,f){function g(o){c(o.clientX-m,o.clientY-n)}function h(){b.style.opacity=1,b.classList.remove('dragging'),window.document.removeEventListener('mousemove',g),window.document.removeEventListener('mouseup',h),window.setTimeout(f,10)}let m=0,n=0;b.addEventListener('mousedown',function(o){m=o.clientX,n=o.clientY,b.style.opacity=0.8,b.classList.add('dragging'),window.document.addEventListener('mousemove',g),window.document.addEventListener('mouseup',h)})}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	class SpaceManager{constructor(a,b){this.width=a,this.height=b}manageSpace(a,b){let c=a.slice();b(c),console.log(this.width,this.height),console.log(c)}}module.exports=SpaceManager;

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYTM4ZjFkZDQxMzA2ODA0ODVjOGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jcm9zc3RhYkV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3BhY2VNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL3NyYy9sYXJnZURhdGEuanMiXSwibmFtZXMiOlsiQ3Jvc3N0YWJFeHQiLCJyZXF1aXJlIiwiZGF0YSIsImNvbmZpZyIsImRpbWVuc2lvbnMiLCJtZWFzdXJlcyIsImNoYXJ0VHlwZSIsIm5vRGF0YU1lc3NhZ2UiLCJjcm9zc3RhYkNvbnRhaW5lciIsIndpZHRoIiwiaGVpZ2h0IiwiY2VsbFdpZHRoIiwiY2VsbEhlaWdodCIsInNob3dGaWx0ZXIiLCJkcmFnZ2FibGVIZWFkZXJzIiwiY2hhcnRDb25maWciLCJjaGFydCIsIndpbmRvdyIsImNyb3NzdGFiIiwicmVuZGVyQ3Jvc3N0YWIiLCJtb2R1bGUiLCJleHBvcnRzIiwiU3BhY2VNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJldmVudExpc3QiLCJNdWx0aUNoYXJ0aW5nIiwibWMiLCJkYXRhU3RvcmUiLCJjcmVhdGVEYXRhU3RvcmUiLCJzZXREYXRhIiwiZGF0YVNvdXJjZSIsInRlc3QiLCJhIiwic3RvcmVQYXJhbXMiLCJtZWFzdXJlT25Sb3ciLCJnbG9iYWxEYXRhIiwiYnVpbGRHbG9iYWxEYXRhIiwiY29sdW1uS2V5QXJyIiwiaGFzaCIsImdldEZpbHRlckhhc2hNYXAiLCJjb3VudCIsImFnZ3JlZ2F0aW9uIiwiYXhlcyIsIkZDRGF0YUZpbHRlckV4dCIsImRhdGFGaWx0ZXJFeHQiLCJhZGRFdmVudExpc3RlbmVyIiwibW9kZWxVcGRhdGVkIiwiZ2V0S2V5cyIsImZpZWxkcyIsImkiLCJpaSIsImxlbmd0aCIsImdldFVuaXF1ZVZhbHVlcyIsImNyZWF0ZVJvdyIsInRhYmxlIiwicm93T3JkZXIiLCJjdXJyZW50SW5kZXgiLCJmaWx0ZXJlZERhdGFTdG9yZSIsInJvd0VsZW1lbnQiLCJmaWx0ZXJlZERhdGFIYXNoS2V5IiwiaHRtbFJlZiIsInJvd3NwYW4iLCJmaWVsZENvbXBvbmVudCIsImZpZWxkVmFsdWVzIiwibCIsImhhc0Z1cnRoZXJEZXB0aCIsImNvbExlbmd0aCIsIm1pbiIsIm1heCIsIm1pbm1heE9iaiIsImNsYXNzU3RyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwic3R5bGUiLCJ0ZXh0QWxpZ24iLCJtYXJnaW5Ub3AiLCJ0b0xvd2VyQ2FzZSIsInZpc2liaWxpdHkiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjb3JuZXJXaWR0aCIsInJlbW92ZUNoaWxkIiwiY29sc3BhbiIsImh0bWwiLCJvdXRlckhUTUwiLCJjbGFzc05hbWUiLCJwdXNoIiwiYWRhcHRlckNmZyIsImFkYXB0ZXIiLCJjYXRlZ29yaWVzIiwiZGF0YUFkYXB0ZXIiLCJqIiwiY2hhcnRDZWxsT2JqIiwicm93SGFzaCIsImNvbEhhc2giLCJnZXRDaGFydE9iaiIsInBhcnNlSW50IiwiY3JlYXRlQ29sIiwibWVhc3VyZU9yZGVyIiwiY29sRWxlbWVudCIsImhlYWRlckRpdiIsImRyYWdEaXYiLCJoYW5kbGVTcGFuIiwic2V0QXR0cmlidXRlIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5MZWZ0IiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwidmVydGljYWxBbGlnbiIsImNvcm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsImNyZWF0ZVJvd0RpbUhlYWRpbmciLCJjb3JuZXJDZWxsQXJyIiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJjcmVhdGVDb2xEaW1IZWFkaW5nIiwiaW5kZXgiLCJjcmVhdGVDYXB0aW9uIiwibWF4TGVuZ3RoIiwidW5zaGlmdCIsImNyZWF0ZUNyb3NzdGFiIiwic2VsZiIsIm9iaiIsImZpbHRlciIsInZhbCIsImFyciIsImNvbE9yZGVyIiwieEF4aXNSb3ciLCJyb3dEaW1SZW9yZGVyIiwic3ViamVjdCIsInRhcmdldCIsImJ1ZmZlciIsInNwbGljZSIsImluZGV4T2YiLCJNYXRoIiwiY29sRGltUmVvcmRlciIsIm1lcmdlRGltZW5zaW9ucyIsImNyZWF0ZUZpbHRlcnMiLCJtYXRjaGVkVmFsdWVzIiwiZmlsdGVycyIsImpqIiwiZmlsdGVyR2VuIiwidG9TdHJpbmciLCJmaWx0ZXJWYWwiLCJjcmVhdGVEYXRhQ29tYm9zIiwicmVjdXJzZSIsImdsb2JhbEFycmF5Iiwic2xpY2UiLCJyIiwibWFrZUdsb2JhbEFycmF5IiwidGVtcE9iaiIsInRlbXBBcnIiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm1lYXN1cmUiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiZGF0YUNvbWJvcyIsImhhc2hNYXAiLCJkYXRhQ29tYm8iLCJ2YWx1ZSIsImxlbiIsImsiLCJ1cGRhdGVNYXRyaXgiLCJtYXRyaXgiLCJnbG9iYWxNYXgiLCJnbG9iYWxNaW4iLCJyb3dMYXN0Q2hhcnQiLCJyb3dBeGlzIiwicm93IiwiY2VsbCIsImNyb3NzdGFiRWxlbWVudCIsInR5cGUiLCJheGlzVHlwZSIsImNvbmZpZ3VyYXRpb24iLCJ1cGRhdGUiLCJsaW1pdHMiLCJjaGFydE9iaiIsImdldExpbWl0cyIsIm1pbkxpbWl0IiwibWF4TGltaXQiLCJGQ2pzb24iLCJ5QXhpc01pblZhbHVlIiwieUF4aXNNYXhWYWx1ZSIsImV2dCIsImNlbGxBZGFwdGVyIiwiY2F0ZWdvcnkiLCJjYXRlZ29yeVZhbCIsImhpZ2hsaWdodCIsInNwYWNlTWFuYWdlciIsIm1hbmFnZVNwYWNlIiwibWFuYWdlZEN0IiwiY3JlYXRlTXVsdGlDaGFydCIsIm11bHRpY2hhcnRPYmplY3QiLCJjcmVhdGVNYXRyaXgiLCJkcmF3IiwiZHJhZ0xpc3RlbmVyIiwicGxhY2VIb2xkZXIiLCJwZXJtdXRlQXJyIiwicGVybXV0ZSIsIm1lbSIsImN1cnJlbnQiLCJyZXN1bHRzIiwiY29uY2F0Iiwiam9pbiIsInBlcm11dGVTdHJzIiwibWF0Y2hIYXNoIiwiZmlsdGVyU3RyIiwic3BsaXQiLCJrZXlQZXJtdXRhdGlvbnMiLCJyb3dGaWx0ZXIiLCJjb2xGaWx0ZXIiLCJyb3dGaWx0ZXJzIiwiZGF0YVByb2Nlc3NvcnMiLCJkYXRhUHJvY2Vzc29yIiwibWF0Y2hlZEhhc2hlcyIsImZpbHRlcmVkRGF0YSIsImFwcGx5IiwiY3JlYXRlRGF0YVByb2Nlc3NvciIsImdldENoaWxkTW9kZWwiLCJkaW1lbnNpb24iLCJzZXJpZXNUeXBlIiwiYWdncmVnYXRlTW9kZSIsImRhdGFzdG9yZSIsImdldExpbWl0Iiwic2V0dXBMaXN0ZW5lciIsImhvbGRlciIsImFyckxlbiIsImdsb2JhbEFyciIsImxpbWl0TGVmdCIsImxpbWl0UmlnaHQiLCJsbiIsImxvZzIiLCJncmFwaGljcyIsImxlZnQiLCJlbCIsIml0ZW0iLCJuTGVmdCIsImRpZmYiLCJjZWxsVmFsdWUiLCJvcmlnTGVmdCIsInJlZFpvbmUiLCJhZGp1c3QiLCJvcmlnWiIsInpJbmRleCIsIl9zZXR1cERyYWciLCJkeCIsIm1hbmFnZVNoaWZ0aW5nIiwiY2hhbmdlIiwic2V0VGltZW91dCIsImlzUmlnaHQiLCJzdGFjayIsImRyYWdJdGVtIiwibmV4dFBvcyIsIm5leHRJdGVtIiwicG9wIiwiZGltZW5zaW9uc0hvbGRlciIsIm1lYXN1cmVzSG9sZGVyIiwib3JpZ0NvbmZpZyIsIm1lYXN1cmVzTGVuZ3RoIiwiZGltZW5zaW9uc0xlbmd0aCIsImhhbmRsZXIiLCJoYW5kbGVyMiIsImN1c3RvbUhhbmRsZXIiLCJlIiwiY2xpZW50WCIsIngiLCJjbGllbnRZIiwieSIsIm1vdXNlVXBIYW5kbGVyIiwib3BhY2l0eSIsImNsYXNzTGlzdCIsInJlbW92ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGQiLCJjYiIsIm1hbmFnZWRDcm9zc3RhYiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7Ozs7O0FDdENBLE1BQU1BLGFBQWMsbUJBQUFDLENBQVEsQ0FBUixDQUFwQixDQUNJQyxLQUFPLG1CQUFBRCxDQUFRLENBQVIsQ0FEWCxDQUdBLEdBQUlFLFFBQVMsQ0FDVEMsc0NBRFMsQ0FFVEMsOEJBRlMsQ0FHVEMsVUFBVyxVQUhGLENBSVRDLGNBQWUscUJBSk4sQ0FLVEMsa0JBQW1CLGNBTFYsQ0FNVEMsTUFBTyxHQU5FLENBT1RDLE9BQVEsR0FQQyxDQVFUQyxVQUFXLEdBUkYsQ0FTVEMsV0FBWSxHQVRILENBVVRDLGFBVlMsQ0FXVEMsbUJBWFMsQ0FZVDtBQUNBQyxhQUFhLENBQ1RDLDZtQkFEUyxDQWJKLENBQWIsQ0FnRHNCLFFBQWxCLFFBQU9DLE8sRUFDUEEsT0FBT0MsUUFBUCxDQUFrQixHQUFJbEIsWUFBSixDQUFnQkUsSUFBaEIsQ0FBc0JDLE1BQXRCLEMsQ0FDbEJjLE9BQU9DLFFBQVAsQ0FBZ0JDLGNBQWhCLEUsRUFFQUMsT0FBT0MsT0FBUCxDQUFpQnJCLFc7Ozs7OztBQ3ZEckIsSUFBSXNCLGNBQWUsbUJBQUFyQixDQUFRLENBQVIsQ0FBbkIsQ0FDQTs7SUFHQSxLQUFNRCxZQUFZLENBQ2R1QixZQUFhckIsQ0FBYixDQUFtQkMsQ0FBbkIsQ0FBMkIsQ0FTdkIsR0FSQSxLQUFLcUIsU0FBTCxtS0FRQSxDQURBLEtBQUt0QixJQUFMLENBQVlBLENBQ1osQ0FBNkIsVUFBekIsUUFBT3VCLGNBQVgsQ0FDSSxLQUFLQyxFQUFMLENBQVUsR0FBSUQsY0FEbEIsQ0FFSSxLQUFLRSxTQUFMLENBQWlCLEtBQUtELEVBQUwsQ0FBUUUsZUFBUixFQUZyQixDQUdJLEtBQUtELFNBQUwsQ0FBZUUsT0FBZixDQUF1QixDQUFFQyxXQUFZLEtBQUs1QixJQUFuQixDQUF2QixDQUhKLEtBS0ksT0FBTyxDQUNINkIsS0FBTSxTQUFVQyxDQUFWLENBQWEsQ0FDZixNQUFPQSxFQUNWLENBSEUsQ0FBUCxDQU1KLEtBQUtDLFdBQUwsQ0FBbUIsQ0FDZi9CLEtBQU1BLENBRFMsQ0FFZkMsT0FBUUEsQ0FGTyxDQXBCSSxDQXdCdkIsS0FBS0csU0FBTCxDQUFpQkgsRUFBT0csU0F4QkQsQ0F5QnZCLEtBQUtPLFVBQUwsQ0FBa0JWLEVBQU9VLFVBQVAsSUF6QkssQ0EwQnZCLEtBQUtDLGdCQUFMLENBQXdCWCxFQUFPVyxnQkFBUCxJQTFCRCxDQTJCdkIsS0FBS0MsV0FBTCxDQUFtQlosRUFBT1ksV0EzQkgsQ0E0QnZCLEtBQUtYLFVBQUwsQ0FBa0JELEVBQU9DLFVBNUJGLENBNkJ2QixLQUFLQyxRQUFMLENBQWdCRixFQUFPRSxRQTdCQSxDQThCdkIsS0FBSzZCLFlBQUwsR0E5QnVCLENBK0J2QixLQUFLQyxVQUFMLENBQWtCLEtBQUtDLGVBQUwsRUEvQkssQ0FnQ3ZCLEtBQUtDLFlBQUwsR0FoQ3VCLENBaUN2QixLQUFLNUIsS0FBTCxDQUFhTixFQUFPTSxLQUFQLEVBQWdCLEdBakNOLENBa0N2QixLQUFLQyxNQUFMLENBQWNQLEVBQU9PLE1BQVAsRUFBaUIsR0FsQ1IsQ0FtQ3ZCLEtBQUtDLFNBQUwsQ0FBaUJSLEVBQU9RLFNBQVAsRUFBb0IsR0FuQ2QsQ0FvQ3ZCLEtBQUtDLFVBQUwsQ0FBa0JULEVBQU9TLFVBQVAsRUFBcUIsR0FwQ2hCLENBcUN2QixLQUFLSixpQkFBTCxDQUF5QkwsRUFBT0ssaUJBckNULENBc0N2QixLQUFLOEIsSUFBTCxDQUFZLEtBQUtDLGdCQUFMLEVBdENXLENBdUN2QixLQUFLQyxLQUFMLENBQWEsQ0F2Q1UsQ0F3Q3ZCLEtBQUtDLFdBQUwsQ0FBbUJ0QyxFQUFPc0MsV0FBUCxFQUFzQixLQXhDbEIsQ0F5Q3ZCLEtBQUtDLElBQUwsR0F6Q3VCLENBMEN2QixLQUFLbkMsYUFBTCxDQUFxQkosRUFBT0ksYUExQ0wsQ0EyQ1EsVUFBM0IsUUFBT29DLGdCQUFQLEVBQXlDLEtBQUs5QixVQTNDM0IsR0E2Q25CLEtBQUsrQixhQUFMLENBQXFCLEdBQUlELGdCQUFKLENBQW9CLEtBQUtoQixTQUF6QixJQUFrRCxhQUFsRCxDQTdDRixFQStDdkIsS0FBS0EsU0FBTCxDQUFla0IsZ0JBQWYsQ0FBZ0MsS0FBS3JCLFNBQUwsQ0FBZXNCLFlBQS9DLENBQTZELElBQVUsQ0FDbkUsS0FBS1gsVUFBTCxDQUFrQixLQUFLQyxlQUFMLEVBRGlELENBRW5FLEtBQUtqQixjQUFMLEVBQ0gsQ0FIRCxDQUlILENBRUQ7O1FBR0FpQixpQkFBbUIsQ0FDZixHQUFJLEtBQUtULFNBQUwsQ0FBZW9CLE9BQWYsRUFBSixDQUE4QixDQUMxQixHQUFJQyxHQUFTLEtBQUtyQixTQUFMLENBQWVvQixPQUFmLEVBQWIsQ0FDSVosSUFESixDQUVBLElBQUssR0FBSWMsR0FBSSxDQUFSLENBQVdDLEVBQUtGLEVBQU9HLE1BQTVCLENBQW9DRixFQUFJQyxDQUF4QyxDQUE0Q0QsR0FBNUMsQ0FDSWQsRUFBV2EsRUFBT0MsQ0FBUCxDQUFYLEVBQXdCLEtBQUt0QixTQUFMLENBQWV5QixlQUFmLENBQStCSixFQUFPQyxDQUFQLENBQS9CLENBQXhCLENBRUosTUFBT2QsRUFDVixDQUNHLFFBRVAsQ0FFRGtCLFVBQVdDLENBQVgsQ0FBa0JwRCxDQUFsQixDQUF3QnFELENBQXhCLENBQWtDQyxDQUFsQyxDQUFnREMsQ0FBaEQsQ0FBbUUsQ0FDL0QsR0FHSVIsRUFISixDQUlJUyxDQUpKLENBTUlDLENBTkosQ0FRSUMsQ0FSSixDQUFJQyxFQUFVLENBQWQsQ0FDSUMsRUFBaUJQLEVBQVNDLENBQVQsQ0FEckIsQ0FFSU8sRUFBYzdELEVBQUs0RCxDQUFMLENBRmxCLENBR09FLEVBQUlELEVBQVlaLE1BSHZCLENBS0ljLEVBQWtCVCxFQUFnQkQsRUFBU0osTUFBVCxDQUFrQixDQUx4RCxDQU9JZSxFQUFZLEtBQUs3QixZQUFMLENBQWtCYyxNQVBsQyxDQVNJZ0IsS0FUSixDQVVJQyxFQUFNLE1BVlYsQ0FXSUMsSUFYSixDQWFBLElBQUtwQixFQUFJLENBQVQsQ0FBWUEsRUFBSWUsQ0FBaEIsQ0FBbUJmLEdBQUssQ0FBeEIsQ0FBMkIsQ0FDdkIsR0FBSXFCLEdBQVcsRUFBZixDQThCQSxHQTdCQVYsRUFBVVcsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQTZCVixDQTVCQVosRUFBUWEsU0FBUixDQUFvQlYsRUFBWWQsQ0FBWixDQTRCcEIsQ0EzQkFXLEVBQVFjLEtBQVIsQ0FBY0MsU0FBZCxDQUEwQixRQTJCMUIsQ0ExQkFmLEVBQVFjLEtBQVIsQ0FBY0UsU0FBZCxDQUEyQixDQUFDLEtBQUtoRSxVQUFMLENBQWtCLEVBQW5CLEVBQXlCLENBQTFCLENBQStCLElBMEJ6RCxDQXpCQTBELEdBQVksa0JBQ0YsS0FBS2xFLFVBQUwsQ0FBZ0JvRCxDQUFoQixFQUE4QnFCLFdBQTlCLEVBREUsQ0FFUixHQUZRLENBRUZkLEVBQVlkLENBQVosRUFBZTRCLFdBQWYsRUFGRSxDQUU2QixZQXVCekMsQ0FuQkFqQixFQUFRYyxLQUFSLENBQWNJLFVBQWQsQ0FBMkIsUUFtQjNCLENBbEJBUCxTQUFTUSxJQUFULENBQWNDLFdBQWQsQ0FBMEJwQixDQUExQixDQWtCQSxDQWpCQSxLQUFLcUIsV0FBTCxDQUEyQyxFQUF4QixHQUFZaEMsQ0FBWixFQUFlRSxNQWlCbEMsQ0FoQkFvQixTQUFTUSxJQUFULENBQWNHLFdBQWQsQ0FBMEJ0QixDQUExQixDQWdCQSxDQWZBQSxFQUFRYyxLQUFSLENBQWNJLFVBQWQsQ0FBMkIsU0FlM0IsQ0FkQXBCLEVBQWEsQ0FDVGpELE1BQU8sS0FBS3dFLFdBREgsQ0FFVHZFLE9BQVEsRUFGQyxDQUdUbUQsUUFBUyxDQUhBLENBSVRzQixRQUFTLENBSkEsQ0FLVEMsS0FBTXhCLEVBQVF5QixTQUxMLENBTVRDLFVBQVdoQixDQU5GLENBY2IsQ0FOQVgsRUFBc0JGLEVBQW9CTSxFQUFZZCxDQUFaLENBQXBCLENBQXFDLEdBTTNELENBTElBLENBS0osQ0FKSUssRUFBTWlDLElBQU4sQ0FBVyxDQUFDN0IsQ0FBRCxDQUFYLENBSUosQ0FGSUosRUFBTUEsRUFBTUgsTUFBTixDQUFlLENBQXJCLEVBQXdCb0MsSUFBeEIsQ0FBNkI3QixDQUE3QixDQUVKLENBQUlPLENBQUosQ0FDSVAsRUFBV0csT0FBWCxDQUFxQixLQUFLUixTQUFMLENBQWVDLENBQWYsQ0FBc0JwRCxDQUF0QixDQUE0QnFELENBQTVCLENBQXNDQyxFQUFlLENBQXJELENBQXdERyxDQUF4RCxDQUR6QixLQUVPLENBQ0gsR0FBSTZCLEdBQWEsQ0FDVHJGLE9BQVEsQ0FDSkEsT0FBUSxDQUNKYSxvQkFESSxDQURKLENBREMsQ0FBakIsQ0FTSXlFLElBVEosQ0FVQSxHQUF1QixPQUFuQixRQUFLbkYsU0FBVCxDQUFnQyxDQUM1QixHQUFJb0YsR0FBYSxLQUFLdkQsVUFBTCxDQUFnQixLQUFLL0IsVUFBTCxDQUFnQixLQUFLQSxVQUFMLENBQWdCK0MsTUFBaEIsQ0FBeUIsQ0FBekMsQ0FBaEIsQ0FBakIsQ0FDQXFDLEVBQWEsQ0FDVHJGLE9BQVEsQ0FDSkEsT0FBUSxDQUNKYSwyR0FESSxDQVNKMEUsV0FBWUEsQ0FUUixDQURKLENBREMsQ0FlaEIsQ0FDREQsRUFBVSxLQUFLL0QsRUFBTCxDQUFRaUUsV0FBUixDQUFvQkgsQ0FBcEIsQ0E3QlAsQ0E4QkhsQyxFQUFNQSxFQUFNSCxNQUFOLENBQWUsQ0FBckIsRUFBd0JvQyxJQUF4QixDQUE2QixDQUN6QjFCLFFBQVMsQ0FEZ0IsQ0FFekJzQixRQUFTLENBRmdCLENBR3pCMUUsTUFBTyxFQUhrQixDQUl6QjZFLFVBQVcsY0FKYyxDQUt6QnRFLE1BQU8sQ0FDSCxLQUFRLE1BREwsQ0FFSCxNQUFTLE1BRk4sQ0FHSCxPQUFVLE1BSFAsQ0FJSCxXQUFjLE1BSlgsQ0FLSCxjQUFpQnlFLENBTGQsQ0FMa0IsQ0FBN0IsQ0E5QkcsQ0EyQ0gsSUFBSyxHQUFJRyxHQUFJLENBQWIsQ0FBZ0JBLEVBQUkxQixDQUFwQixDQUErQjBCLEdBQUssQ0FBcEMsQ0FBdUMsQ0FDbkMsR0FBSUMsR0FBZSxDQUNmcEYsTUFBTyxLQUFLRSxTQURHLENBRWZELE9BQVEsS0FBS0UsVUFGRSxDQUdmaUQsUUFBUyxDQUhNLENBSWZzQixRQUFTLENBSk0sQ0FLZlcsUUFBU25DLENBTE0sQ0FNZm9DLFFBQVMsS0FBSzFELFlBQUwsQ0FBa0J1RCxDQUFsQixDQU5NLENBT2ZOLFVBQVcsWUFQSSxDQUFuQixDQVNBaEMsRUFBTUEsRUFBTUgsTUFBTixDQUFlLENBQXJCLEVBQXdCb0MsSUFBeEIsQ0FBNkJNLENBQTdCLENBVm1DLENBV25DeEIsRUFBWSxLQUFLMkIsV0FBTCxDQUFpQnJDLENBQWpCLENBQXNDLEtBQUt0QixZQUFMLENBQWtCdUQsQ0FBbEIsQ0FBdEMsRUFBNEQsQ0FBNUQsQ0FYdUIsQ0FZbkN4QixFQUFPNkIsU0FBUzVCLEVBQVVELEdBQW5CLEVBQTBCQSxDQUEzQixDQUFrQ0MsRUFBVUQsR0FBNUMsQ0FBa0RBLENBWnJCLENBYW5DRCxFQUFPOEIsU0FBUzVCLEVBQVVGLEdBQW5CLEVBQTBCQSxDQUEzQixDQUFrQ0UsRUFBVUYsR0FBNUMsQ0FBa0RBLENBYnJCLENBY25DMEIsRUFBYXpCLEdBQWIsQ0FBbUJBLENBZGdCLENBZW5DeUIsRUFBYTFCLEdBQWIsQ0FBbUJBLENBQ3RCLENBQ0osQ0FDRE4sR0FBV0gsRUFBV0csT0FDekIsQ0FDRCxNQUFPQSxFQUNWLENBRURxQyxVQUFXNUMsQ0FBWCxDQUFrQnBELENBQWxCLENBQXdCaUcsQ0FBeEIsQ0FBc0MsQ0FDbEMsR0FDSWxELEVBREosQ0FHSTJDLENBSEosQ0FJSVEsQ0FKSixDQUtJeEMsQ0FMSixDQU1JeUMsQ0FOSixDQU9JQyxDQVBKLENBUUlDLENBUkosQ0FFSXZDLEVBQUksS0FBSzNELFFBQUwsQ0FBYzhDLE1BRnRCLENBVUEsSUFBS0YsRUFBSSxDQUFULENBQVlBLEVBQUllLENBQWhCLENBQW1CZixHQUFLLENBQXhCLENBQTJCLENBQ3ZCLEdBQUlxQixHQUFXLEVBQWYsQ0FDSVIsRUFBaUJxQyxFQUFhbEQsQ0FBYixDQURyQixDQUVJO0FBU0osS0FSQW9ELEVBQVk5QixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBUVosQ0FQQTZCLEVBQVUzQixLQUFWLENBQWdCQyxTQUFoQixDQUE0QixRQU81QixDQUxBMkIsRUFBVS9CLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FLVixDQUpBOEIsRUFBUUUsWUFBUixDQUFxQixPQUFyQixDQUE4QixxQkFBOUIsQ0FJQSxDQUhBRixFQUFRNUIsS0FBUixDQUFjaEUsTUFBZCxDQUF1QixLQUd2QixDQUZBNEYsRUFBUTVCLEtBQVIsQ0FBYytCLFVBQWQsQ0FBMkIsS0FFM0IsQ0FEQUgsRUFBUTVCLEtBQVIsQ0FBY2dDLGFBQWQsQ0FBOEIsS0FDOUIsQ0FBS2QsRUFBSSxDQUFULENBQWdCLEVBQUosRUFBWixDQUFvQkEsR0FBcEIsQ0FDSVcsRUFBYWhDLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FEakIsQ0FFSStCLEVBQVc3QixLQUFYLENBQWlCaUMsVUFBakIsQ0FBOEIsS0FGbEMsQ0FHSUosRUFBVzdCLEtBQVgsQ0FBaUJrQyxRQUFqQixDQUE0QixLQUhoQyxDQUlJTCxFQUFXN0IsS0FBWCxDQUFpQm1DLFVBQWpCLENBQThCLEdBSmxDLENBS0lOLEVBQVc3QixLQUFYLENBQWlCb0MsYUFBakIsQ0FBaUMsS0FMckMsQ0FNSVIsRUFBUXRCLFdBQVIsQ0FBb0J1QixDQUFwQixDQU5KLENBU0EzQyxFQUFVVyxTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBckJhLENBc0J2QlosRUFBUWEsU0FBUixDQUFvQlgsQ0F0QkcsQ0F1QnZCRixFQUFRYyxLQUFSLENBQWNDLFNBQWQsQ0FBMEIsUUF2QkgsQ0F3QnZCZixFQUFRYyxLQUFSLENBQWNFLFNBQWQsQ0FBMEIsS0F4QkgsQ0EwQnZCTCxTQUFTUSxJQUFULENBQWNDLFdBQWQsQ0FBMEJwQixDQUExQixDQTFCdUIsQ0E0QnZCVSxHQUFZLG1CQUFxQixLQUFLakUsUUFBTCxDQUFjNEMsQ0FBZCxFQUFpQjRCLFdBQWpCLEVBQXJCLENBQXNELFlBNUIzQyxDQTZCbkIsS0FBSy9ELGdCQTdCYyxHQThCbkJ3RCxHQUFZLFlBOUJPLEVBZ0N2QixLQUFLeUMsWUFBTCxDQUFvQm5ELEVBQVFvRCxZQWhDTCxDQWlDdkJ6QyxTQUFTUSxJQUFULENBQWNHLFdBQWQsQ0FBMEJ0QixDQUExQixDQWpDdUIsQ0FtQ3ZCeUMsRUFBVXJCLFdBQVYsQ0FBc0JzQixDQUF0QixDQW5DdUIsQ0FvQ3ZCRCxFQUFVckIsV0FBVixDQUFzQnBCLENBQXRCLENBcEN1QixDQXFDdkJ3QyxFQUFhLENBQ1QzRixNQUFPLEtBQUtFLFNBREgsQ0FFVEQsT0FBUSxFQUZDLENBR1RtRCxRQUFTLENBSEEsQ0FJVHNCLFFBQVMsQ0FKQSxDQUtUQyxLQUFNaUIsRUFBVWhCLFNBTFAsQ0FNVEMsVUFBV2hCLENBTkYsQ0FyQ1UsQ0E2Q3ZCLEtBQUtqQyxZQUFMLENBQWtCa0QsSUFBbEIsQ0FBdUIsS0FBS2xGLFFBQUwsQ0FBYzRDLENBQWQsQ0FBdkIsQ0E3Q3VCLENBOEN2QkssRUFBTSxDQUFOLEVBQVNpQyxJQUFULENBQWNhLENBQWQsQ0FDSCxDQUNELE1BMURjLEVBMkRqQixDQUVEYSxxQkFBNEMsQ0FDeEMsR0FFSXJCLEVBRkosQ0FHSWhDLENBSEosQ0FLSXlDLENBTEosQ0FNSUMsQ0FOSixDQU9JQyxDQVBKLENBQUlXLElBQUosQ0FDSWpFLEVBQUksQ0FEUixDQUlJcUIsRUFBVyxFQUpmLENBU0EsSUFBS3JCLEVBQUksQ0FBVCxDQUFZQSxFQUFJLEtBQUs3QyxVQUFMLENBQWdCK0MsTUFBaEIsQ0FBeUIsQ0FBekMsQ0FBNENGLEdBQTVDLENBQWlELENBUzdDLElBUkFvRCxFQUFZOUIsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQVFaLENBUEE2QixFQUFVM0IsS0FBVixDQUFnQkMsU0FBaEIsQ0FBNEIsUUFPNUIsQ0FMQTJCLEVBQVUvQixTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBS1YsQ0FKQThCLEVBQVFFLFlBQVIsQ0FBcUIsT0FBckIsQ0FBOEIsdUJBQTlCLENBSUEsQ0FIQUYsRUFBUTVCLEtBQVIsQ0FBY2hFLE1BQWQsQ0FBdUIsS0FHdkIsQ0FGQTRGLEVBQVE1QixLQUFSLENBQWMrQixVQUFkLENBQTJCLEtBRTNCLENBREFILEVBQVE1QixLQUFSLENBQWNnQyxhQUFkLENBQThCLEtBQzlCLENBQUtkLEVBQUksQ0FBVCxDQUFnQixFQUFKLEVBQVosQ0FBb0JBLEdBQXBCLENBQ0lXLEVBQWFoQyxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBRGpCLENBRUkrQixFQUFXN0IsS0FBWCxDQUFpQmlDLFVBQWpCLENBQThCLEtBRmxDLENBR0lKLEVBQVc3QixLQUFYLENBQWlCa0MsUUFBakIsQ0FBNEIsS0FIaEMsQ0FJSUwsRUFBVzdCLEtBQVgsQ0FBaUJtQyxVQUFqQixDQUE4QixHQUpsQyxDQUtJTixFQUFXN0IsS0FBWCxDQUFpQm9DLGFBQWpCLENBQWlDLEtBTHJDLENBTUlSLEVBQVF0QixXQUFSLENBQW9CdUIsQ0FBcEIsQ0FOSixDQVNBM0MsRUFBVVcsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQWxCbUMsQ0FtQjdDWixFQUFRYSxTQUFSLENBQW9CLEtBQUtyRSxVQUFMLENBQWdCNkMsQ0FBaEIsRUFBbUIsQ0FBbkIsRUFBc0JrRSxXQUF0QixHQUFzQyxLQUFLL0csVUFBTCxDQUFnQjZDLENBQWhCLEVBQW1CbUUsTUFBbkIsQ0FBMEIsQ0FBMUIsQ0FuQmIsQ0FvQjdDeEQsRUFBUWMsS0FBUixDQUFjQyxTQUFkLENBQTBCLFFBcEJtQixDQXFCN0NmLEVBQVFjLEtBQVIsQ0FBY0UsU0FBZCxDQUEwQixLQXJCbUIsQ0FzQjdDTixFQUFXLGVBQWlCLEtBQUtsRSxVQUFMLENBQWdCNkMsQ0FBaEIsRUFBbUI0QixXQUFuQixFQUFqQixDQUFvRCxZQXRCbEIsQ0F1QnpDLEtBQUsvRCxnQkF2Qm9DLEdBd0J6Q3dELEdBQVksWUF4QjZCLEVBMEI3QytCLEVBQVVyQixXQUFWLENBQXNCc0IsQ0FBdEIsQ0ExQjZDLENBMkI3Q0QsRUFBVXJCLFdBQVYsQ0FBc0JwQixDQUF0QixDQTNCNkMsQ0E0QjdDc0QsRUFBYzNCLElBQWQsQ0FBbUIsQ0FDZjlFLE1BQTRCLEVBQXJCLE1BQUtMLFVBQUwsQ0FBZ0I2QyxDQUFoQixDQURRLENBRWZ2QyxPQUFRLEVBRk8sQ0FHZm1ELFFBQVMsQ0FITSxDQUlmc0IsUUFBUyxDQUpNLENBS2ZDLEtBQU1pQixFQUFVaEIsU0FMRCxDQU1mQyxVQUFXaEIsQ0FOSSxDQUFuQixDQVFILENBQ0QsTUFBTzRDLEVBQ1YsQ0FFREcsb0JBQXFCL0QsQ0FBckIsQ0FBNEJnRSxDQUE1QixDQUFtQyxDQUcvQixJQUZBLEdBQ0kxRCxFQURKLENBQUlYLEVBQUlxRSxDQUVSLENBQU9yRSxFQUFJSyxFQUFNSCxNQUFqQixDQUF5QkYsR0FBekIsQ0FDSVcsRUFBVVcsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQURkLENBRUlaLEVBQVFhLFNBQVIsQ0FBb0IsRUFGeEIsQ0FHSWIsRUFBUWMsS0FBUixDQUFjQyxTQUFkLENBQTBCLFFBSDlCLENBSUlyQixFQUFNTCxDQUFOLEVBQVNzQyxJQUFULENBQWMsQ0FDVjlFLE1BQU8sRUFERyxDQUVWQyxPQUFRLEVBRkUsQ0FHVm1ELFFBQVMsQ0FIQyxDQUlWc0IsUUFBUyxDQUpDLENBS1ZDLEtBQU14QixFQUFReUIsU0FMSixDQU1WQyxVQUFXLGtCQU5ELENBQWQsQ0FKSixDQWFBLE1BQU9oQyxFQUNWLENBRURpRSxjQUFlakUsQ0FBZixDQUFzQmtFLENBQXRCLENBQWlDLENBQzdCLEdBV0kvQixHQUFVLEtBQUsvRCxFQUFMLENBQVFpRSxXQUFSLENBWEcsQ0FDVHhGLE9BQVEsQ0FDSkEsT0FBUSxDQUNKYSw2RkFESSxDQURKLENBREMsQ0FXSCxDQVhkLENBeUJBLE1BYkFzQyxHQUFNbUUsT0FBTixDQUFjLENBQUMsQ0FDWC9HLE9BQVEsRUFERyxDQUVYbUQsUUFBUyxDQUZFLENBR1hzQixRQUFTcUMsQ0FIRSxDQUlYbEMsVUFBVyxlQUpBLENBS1h0RSxNQUFPLENBQ0gsS0FBUSxTQURMLENBRUgsTUFBUyxNQUZOLENBR0gsT0FBVSxNQUhQLENBSUgsV0FBYyxNQUpYLENBS0gsY0FBaUJ5RSxDQUxkLENBTEksQ0FBRCxDQUFkLENBYUEsQ0FBT25DLENBQ1YsQ0FFRG9FLGdCQUFrQixDQUNkLEdBQUlDLEdBQU8sSUFBWCxDQUNJQyxFQUFNLEtBQUt6RixVQURmLENBRUlvQixFQUFXLEtBQUtuRCxVQUFMLENBQWdCeUgsTUFBaEIsQ0FBdUIsU0FBVUMsQ0FBVixDQUFlN0UsQ0FBZixDQUFrQjhFLENBQWxCLENBQXVCLENBQ3JELEdBQUlELElBQVFDLEVBQUlBLEVBQUk1RSxNQUFKLENBQWEsQ0FBakIsQ0FBWixDQUNJLFFBRVAsQ0FKVSxDQUZmLENBT0k2RSxFQUFXLEtBQUszSCxRQUFMLENBQWN3SCxNQUFkLENBQXFCLFNBQVVDLENBQVYsQ0FBZTdFLENBQWYsQ0FBa0I4RSxDQUFsQixDQUF1QixDQUNuRCxHQUFJSixFQUFLekYsWUFBVCxDQUNJLFNBRitDLE1BSTNDNEYsS0FBUUMsRUFBSUEsRUFBSTVFLE1BQUosQ0FBYSxDQUFqQixDQUptQyxRQVF0RCxDQVJVLENBUGYsQ0FnQklHLElBaEJKLENBaUJJMkUsSUFqQkosQ0FrQkloRixFQUFJLENBbEJSLENBbUJJdUUsRUFBWSxDQW5CaEIsQ0FvQkEsR0FBSUksQ0FBSixDQUFTLENBT0wsSUFOQXRFLEVBQU1pQyxJQUFOLENBQVcsS0FBSzBCLG1CQUFMLENBQXlCM0QsQ0FBekIsQ0FBZ0MwRSxFQUFTN0UsTUFBekMsQ0FBWCxDQU1BLENBSkFHLEVBQVEsS0FBSytELG1CQUFMLENBQXlCL0QsQ0FBekIsQ0FBZ0MsQ0FBaEMsQ0FJUixDQUhBLEtBQUs0QyxTQUFMLENBQWU1QyxDQUFmLENBQXNCc0UsQ0FBdEIsQ0FBMkIsS0FBS3ZILFFBQWhDLENBR0EsQ0FGQWlELEVBQU1pQyxJQUFOLElBRUEsQ0FEQSxLQUFLbEMsU0FBTCxDQUFlQyxDQUFmLENBQXNCc0UsQ0FBdEIsQ0FBMkJyRSxDQUEzQixDQUFxQyxDQUFyQyxDQUF3QyxFQUF4QyxDQUNBLENBQUtOLEVBQUksQ0FBVCxDQUFZQSxFQUFJSyxFQUFNSCxNQUF0QixDQUE4QkYsR0FBOUIsQ0FDSXVFLEVBQWFBLEVBQVlsRSxFQUFNTCxDQUFOLEVBQVNFLE1BQXRCLENBQWdDRyxFQUFNTCxDQUFOLEVBQVNFLE1BQXpDLENBQWtEcUUsQ0FBOUQsQ0FFSixJQUFLdkUsRUFBSSxDQUFULENBQVlBLEVBQUksS0FBSzdDLFVBQUwsQ0FBZ0IrQyxNQUFoQixDQUF5QixDQUF6QyxDQUE0Q0YsR0FBNUMsQ0FDSWdGLEVBQVMxQyxJQUFULENBQWMsQ0FDVjFCLFFBQVMsQ0FEQyxDQUVWc0IsUUFBUyxDQUZDLENBR1Z6RSxPQUFRLEVBSEUsQ0FJVjRFLFVBQVcsWUFKRCxDQUFkLEVBUUo7QUFTQSxLQVJBMkMsRUFBUzFDLElBQVQsQ0FBYyxDQUNWMUIsUUFBUyxDQURDLENBRVZzQixRQUFTLENBRkMsQ0FHVnpFLE9BQVEsRUFIRSxDQUlWRCxNQUFPLEVBSkcsQ0FLVjZFLFVBQVcsa0JBTEQsQ0FBZCxDQVFBLENBQUtyQyxFQUFJLENBQVQsQ0FBWUEsRUFBSXVFLEVBQVksS0FBS3BILFVBQUwsQ0FBZ0IrQyxNQUE1QyxDQUFvREYsR0FBcEQsQ0FBeUQsQ0FDckQsR0FBSXlDLEdBQWEsS0FBS3ZELFVBQUwsQ0FBZ0IsS0FBSy9CLFVBQUwsQ0FBZ0IsS0FBS0EsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBQXpDLENBQWhCLENBQWpCLENBQ0lxQyxFQUFhLENBQ1RyRixPQUFRLENBQ0pBLE9BQVEsQ0FDSmEsNEZBREksQ0FRSjBFLFdBQVlBLENBUlIsQ0FESixDQURDLENBRGpCLENBZUlELElBZkosQ0FnQnVCLE9BQW5CLFFBQUtuRixTQWpCNEMsR0FrQmpEa0YsRUFBYSxDQUNUckYsT0FBUSxDQUNKQSxPQUFRLENBQ0phLG9CQURJLENBREosQ0FEQyxDQWxCb0MsRUE0QnJEeUUsRUFBVSxLQUFLL0QsRUFBTCxDQUFRaUUsV0FBUixDQUFvQkgsQ0FBcEIsQ0E1QjJDLENBNkJyRHlDLEVBQVMxQyxJQUFULENBQWMsQ0FDVjlFLE1BQU8sTUFERyxDQUVWQyxPQUFRLEVBRkUsQ0FHVm1ELFFBQVMsQ0FIQyxDQUlWc0IsUUFBUyxDQUpDLENBS1ZHLFVBQVcsY0FMRCxDQU1WdEUsTUFBTyxDQUNILEtBQVEsTUFETCxDQUVILE1BQVMsTUFGTixDQUdILE9BQVUsTUFIUCxDQUlILFdBQWMsTUFKWCxDQUtILGNBQWlCeUUsQ0FMZCxDQU5HLENBQWQsQ0FjSCxDQUVEbkMsRUFBTWlDLElBQU4sQ0FBVzBDLENBQVgsQ0F6RUssQ0EwRUwzRSxFQUFRLEtBQUtpRSxhQUFMLENBQW1CakUsQ0FBbkIsQ0FBMEJrRSxDQUExQixDQTFFSCxDQTJFTCxLQUFLbkYsWUFBTCxHQUNILENBNUVELElBNkVJaUIsR0FBTWlDLElBQU4sQ0FBVyxDQUFDLENBQ1JILEtBQU0saUNBQW1DLEtBQUs3RSxhQUF4QyxDQUF3RCxNQUR0RCxDQUVSRyxPQUFRLEVBRkEsQ0FHUnlFLFFBQVMsS0FBSy9FLFVBQUwsQ0FBZ0IrQyxNQUFoQixDQUF5QixLQUFLOUMsUUFBTCxDQUFjOEMsTUFIeEMsQ0FBRCxDQUFYLENBN0VKLENBbUZBLE1BQU9HLEVBQ1YsQ0FFRDRFLGNBQWVDLENBQWYsQ0FBd0JDLENBQXhCLENBQWdDLENBQzVCLEdBQ0luRixFQURKLENBQUlvRixFQUFTLEVBQWIsQ0FFSWpJLEVBQWEsS0FBS0EsVUFGdEIsQ0FNQSxHQUhJLFVBQUs4QixZQUdULEVBRkk5QixFQUFXa0ksTUFBWCxDQUFrQmxJLEVBQVcrQyxNQUFYLENBQW9CLENBQXRDLENBQXlDLENBQXpDLENBRUosQ0FBSS9DLEVBQVdtSSxPQUFYLENBQW1CQyxLQUFLcEUsR0FBTCxDQUFTK0QsQ0FBVCxDQUFrQkMsQ0FBbEIsQ0FBbkIsR0FBaURoSSxFQUFXK0MsTUFBaEUsQ0FDSSxNQUFPLGFBQVAsQ0FDRyxHQUFJZ0YsRUFBVUMsQ0FBZCxDQUFzQixDQUV6QixJQURBQyxFQUFTakksRUFBVytILENBQVgsQ0FDVCxDQUFLbEYsRUFBSWtGLEVBQVUsQ0FBbkIsQ0FBc0JsRixHQUFLbUYsQ0FBM0IsQ0FBbUNuRixHQUFuQyxDQUNJN0MsRUFBVzZDLEVBQUksQ0FBZixFQUFvQjdDLEVBQVc2QyxDQUFYLENBQXBCLENBRUo3QyxFQUFXZ0ksQ0FBWCxFQUFxQkMsQ0FDeEIsQ0FOTSxJQU1BLElBQUlGLEVBQVVDLENBQWQsQ0FBc0IsQ0FFekIsSUFEQUMsRUFBU2pJLEVBQVcrSCxDQUFYLENBQ1QsQ0FBS2xGLEVBQUlrRixFQUFVLENBQW5CLENBQXNCbEYsR0FBS21GLENBQTNCLENBQW1DbkYsR0FBbkMsQ0FDSTdDLEVBQVc2QyxFQUFJLENBQWYsRUFBb0I3QyxFQUFXNkMsQ0FBWCxDQUFwQixDQUVKN0MsRUFBV2dJLENBQVgsRUFBcUJDLENBQ3hCLENBQ0QsS0FBS1gsY0FBTCxFQUNILENBRURlLGNBQWVOLENBQWYsQ0FBd0JDLENBQXhCLENBQWdDLENBQzVCLEdBQ0luRixFQURKLENBQUlvRixFQUFTLEVBQWIsQ0FFSWhJLEVBQVcsS0FBS0EsUUFGcEIsQ0FNQSxHQUhJLFVBQUs2QixZQUdULEVBRkk3QixFQUFTaUksTUFBVCxDQUFnQmpJLEVBQVM4QyxNQUFULENBQWtCLENBQWxDLENBQXFDLENBQXJDLENBRUosQ0FBSTlDLEVBQVNrSSxPQUFULENBQWlCQyxLQUFLcEUsR0FBTCxDQUFTK0QsQ0FBVCxDQUFrQkMsQ0FBbEIsQ0FBakIsR0FBK0MvSCxFQUFTOEMsTUFBNUQsQ0FDSSxNQUFPLGFBQVAsQ0FDRyxHQUFJZ0YsRUFBVUMsQ0FBZCxDQUFzQixDQUV6QixJQURBQyxFQUFTaEksRUFBUzhILENBQVQsQ0FDVCxDQUFLbEYsRUFBSWtGLEVBQVUsQ0FBbkIsQ0FBc0JsRixHQUFLbUYsQ0FBM0IsQ0FBbUNuRixHQUFuQyxDQUNJNUMsRUFBUzRDLEVBQUksQ0FBYixFQUFrQjVDLEVBQVM0QyxDQUFULENBQWxCLENBRUo1QyxFQUFTK0gsQ0FBVCxFQUFtQkMsQ0FDdEIsQ0FOTSxJQU1BLElBQUlGLEVBQVVDLENBQWQsQ0FBc0IsQ0FFekIsSUFEQUMsRUFBU2hJLEVBQVM4SCxDQUFULENBQ1QsQ0FBS2xGLEVBQUlrRixFQUFVLENBQW5CLENBQXNCbEYsR0FBS21GLENBQTNCLENBQW1DbkYsR0FBbkMsQ0FDSTVDLEVBQVM0QyxFQUFJLENBQWIsRUFBa0I1QyxFQUFTNEMsQ0FBVCxDQUFsQixDQUVKNUMsRUFBUytILENBQVQsRUFBbUJDLENBQ3RCLENBQ0QsS0FBS1gsY0FBTCxFQUNILENBRURnQixpQkFBbUIsQ0FDZixHQUFJdEksS0FBSixDQUNBLElBQUssR0FBSTZDLEdBQUksQ0FBUixDQUFXZSxFQUFJLEtBQUs1RCxVQUFMLENBQWdCK0MsTUFBcEMsQ0FBNENGLEVBQUllLENBQWhELENBQW1EZixHQUFuRCxDQUNJN0MsRUFBV21GLElBQVgsQ0FBZ0IsS0FBS25GLFVBQUwsQ0FBZ0I2QyxDQUFoQixDQUFoQixFQUVKLElBQUssR0FBSUEsR0FBSSxDQUFSLENBQVdlLEVBQUksS0FBSzNELFFBQUwsQ0FBYzhDLE1BQWxDLENBQTBDRixFQUFJZSxDQUE5QyxDQUFpRGYsR0FBakQsQ0FDSTdDLEVBQVdtRixJQUFYLENBQWdCLEtBQUtsRixRQUFMLENBQWM0QyxDQUFkLENBQWhCLEVBRUosTUFBTzdDLEVBQ1YsQ0FFRHVJLGVBQWlCLENBQ2IsR0FLSUMsRUFMSixDQUFJQyxJQUFKLENBQ0k1RixFQUFJLENBRFIsQ0FFSUMsRUFBSyxLQUFLOUMsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBRmxDLENBR0l5QyxFQUFJLENBSFIsQ0FJSWtELEVBQUssQ0FKVCxDQU9BLElBQUs3RixFQUFJLENBQVQsQ0FBWUEsRUFBSUMsQ0FBaEIsQ0FBb0JELEdBQXBCLENBRUksSUFEQTJGLEVBQWdCLEtBQUt6RyxVQUFMLENBQWdCLEtBQUsvQixVQUFMLENBQWdCNkMsQ0FBaEIsQ0FBaEIsQ0FDaEIsQ0FBSzJDLEVBQUksQ0FBVCxDQUFZa0QsRUFBS0YsRUFBY3pGLE1BQS9CLENBQXVDeUMsRUFBSWtELENBQTNDLENBQStDbEQsR0FBL0MsQ0FDSWlELEVBQVF0RCxJQUFSLENBQWEsQ0FDVHNDLE9BQVEsS0FBS2tCLFNBQUwsQ0FBZSxLQUFLM0ksVUFBTCxDQUFnQjZDLENBQWhCLENBQWYsQ0FBbUMyRixFQUFjaEQsQ0FBZCxFQUFpQm9ELFFBQWpCLEVBQW5DLENBREMsQ0FFVEMsVUFBV0wsRUFBY2hELENBQWQsQ0FGRixDQUFiLEVBTVIsTUFBT2lELEVBQ1YsQ0FFREssa0JBQW9CLENBS2hCLFFBQVNDLEVBQVQsQ0FBa0JwQixDQUFsQixDQUF1QjlFLENBQXZCLENBQTBCLENBQ3RCLElBQUssR0FBSTJDLEdBQUksQ0FBUixDQUFXNUIsRUFBSW9GLEVBQVluRyxDQUFaLEVBQWVFLE1BQW5DLENBQTJDeUMsRUFBSTVCLENBQS9DLENBQWtENEIsR0FBbEQsQ0FBdUQsQ0FDbkQsR0FBSTVELEdBQUkrRixFQUFJc0IsS0FBSixDQUFVLENBQVYsQ0FBUixDQUNBckgsRUFBRXVELElBQUYsQ0FBTzZELEVBQVluRyxDQUFaLEVBQWUyQyxDQUFmLENBQVAsQ0FGbUQsQ0FHL0MzQyxJQUFNbUIsQ0FIeUMsQ0FJL0NrRixFQUFFL0QsSUFBRixDQUFPdkQsQ0FBUCxDQUorQyxDQU0vQ21ILEVBQVFuSCxDQUFSLENBQVdpQixFQUFJLENBQWYsQ0FFUCxDQUNKLENBZEQsR0FBSXFHLEtBQUosQ0FDSUYsRUFBYyxLQUFLRyxlQUFMLEVBRGxCLENBRUluRixFQUFNZ0YsRUFBWWpHLE1BQVosQ0FBcUIsQ0FGL0IsQ0FnQkEsTUFEQWdHLE1BQVksQ0FBWixDQUNBLENBQU9HLENBQ1YsQ0FFREMsaUJBQW1CLENBQ2YsR0FBSUMsS0FBSixDQUNJQyxJQURKLENBR0EsSUFBSyxHQUFJQyxFQUFULEdBQWdCLE1BQUt2SCxVQUFyQixDQUNRLEtBQUtBLFVBQUwsQ0FBZ0J3SCxjQUFoQixDQUErQkQsQ0FBL0IsR0FBdUNBLElBQVEsS0FBS0UsT0FENUQsR0FFUUosRUFBUUUsQ0FBUixFQUFlLEtBQUt2SCxVQUFMLENBQWdCdUgsQ0FBaEIsQ0FGdkIsRUFNQSxNQURBRCxHQUFVSSxPQUFPQyxJQUFQLENBQVlOLENBQVosRUFBcUJPLEdBQXJCLENBQXlCTCxHQUFPRixFQUFRRSxDQUFSLENBQWhDLENBQ1YsQ0FBT0QsQ0FDVixDQUVEbEgsa0JBQW9CLENBQ2hCLEdBQUlzRyxHQUFVLEtBQUtGLGFBQUwsRUFBZCxDQUNJcUIsRUFBYSxLQUFLZCxnQkFBTCxFQURqQixDQUVJZSxJQUZKLENBSUEsSUFBSyxHQUFJaEgsR0FBSSxDQUFSLENBQVdlLEVBQUlnRyxFQUFXN0csTUFBL0IsQ0FBdUNGLEVBQUllLENBQTNDLENBQThDZixHQUE5QyxDQUFtRCxDQUMvQyxHQUFJaUgsR0FBWUYsRUFBVy9HLENBQVgsQ0FBaEIsQ0FDSXlHLEVBQU0sRUFEVixDQUVJUyxJQUZKLENBSUEsSUFBSyxHQUFJdkUsR0FBSSxDQUFSLENBQVd3RSxFQUFNRixFQUFVL0csTUFBaEMsQ0FBd0N5QyxFQUFJd0UsQ0FBNUMsQ0FBaUR4RSxHQUFqRCxDQUNJLElBQUssR0FBSXlFLEdBQUksQ0FBUixDQUFXbEgsRUFBUzBGLEVBQVExRixNQUFqQyxDQUF5Q2tILEVBQUlsSCxDQUE3QyxDQUFxRGtILEdBQXJELENBQTBELENBQ3RELEdBQUlwQixHQUFZSixFQUFRd0IsQ0FBUixFQUFXcEIsU0FBM0IsQ0FDSWlCLEVBQVV0RSxDQUFWLElBQWlCcUQsQ0FGaUMsR0FJOUNTLENBSjhDLEVBR3hDLENBQU4sSUFIOEMsQ0FJdkNRLEVBQVV0RSxDQUFWLENBSnVDLENBTXZDLElBQU1zRSxFQUFVdEUsQ0FBVixDQU5pQyxDQVFsRHVFLEVBQU01RSxJQUFOLENBQVdzRCxFQUFRd0IsQ0FBUixFQUFXeEMsTUFBdEIsQ0FSa0QsQ0FVekQsQ0FFTG9DLEVBQVFQLENBQVIsRUFBZVMsQ0FDbEIsQ0FDRCxNQUFPRixFQUNWLENBRURLLGFBQWNwSixDQUFkLENBQXdCcUosQ0FBeEIsQ0FBZ0MsQ0FDNUIsR0FBSUMsR0FBWSxNQUFoQixDQUNJQyxLQURKLENBR0EsSUFBSyxHQUFJeEgsR0FBSSxDQUFSLENBQVdDLEVBQUtoQyxFQUFTaUMsTUFBOUIsQ0FBc0NGLEVBQUlDLENBQTFDLENBQThDRCxHQUE5QyxDQUFtRCxDQUMvQyxHQUFJeUgsR0FBZXhKLEVBQVMrQixDQUFULEVBQVkvQixFQUFTK0IsQ0FBVCxFQUFZRSxNQUFaLENBQXFCLENBQWpDLENBQW5CLENBRCtDLENBRTNDdUgsRUFBYXRHLEdBQWIsRUFBb0JzRyxFQUFhdkcsR0FGVSxJQUd2Q3FHLEVBQVlFLEVBQWF0RyxHQUhjLEdBSXZDb0csRUFBWUUsRUFBYXRHLEdBSmMsRUFNdkNxRyxFQUFZQyxFQUFhdkcsR0FOYyxHQU92Q3NHLEVBQVlDLEVBQWF2RyxHQVBjLEVBVWxELENBQ0QsSUFBSyxHQUFJbEIsR0FBSSxDQUFSLENBQVdDLEVBQUtxSCxFQUFPcEgsTUFBNUIsQ0FBb0NGLEVBQUlDLENBQXhDLENBQTRDRCxHQUE1QyxDQUFpRCxDQUM3QyxHQUNJMEgsRUFESixDQUFJQyxFQUFNTCxFQUFPdEgsQ0FBUCxDQUFWLENBRUEsSUFBSyxHQUFJMkMsR0FBSSxDQUFSLENBQVdrRCxFQUFLOEIsRUFBSXpILE1BQXpCLENBQWlDeUMsRUFBSWtELENBQXJDLENBQXlDbEQsR0FBekMsQ0FBOEMsQ0FDMUMsR0FBSWlGLEdBQU9ELEVBQUloRixDQUFKLENBQVgsQ0FDSWtGLEVBQWtCNUosRUFBUytCLENBQVQsRUFBWTJDLENBQVosQ0FEdEIsQ0FFQSxHQUFJa0YsRUFBZ0I5SixLQUFoQixFQUF3RCxNQUEvQixLQUFnQkEsS0FBaEIsQ0FBc0IrSixJQUFuRCxHQUNJSixFQUFVRSxDQURkLENBRWdFLEdBQXhELEtBQVE3SixLQUFSLENBQWNELFdBQWQsQ0FBMEJlLFVBQTFCLENBQXFDZCxLQUFyQyxDQUEyQ2dLLFFBRm5ELEVBRXFFLENBQzdELEdBQUl4RixHQUFhLENBQ1RyRixPQUFRLENBQ0pBLE9BQVEsQ0FDSmEsTUFBTyxDQUNILFFBQVd5SixDQURSLENBRUgsU0FBWSxHQUZULENBR0gsUUFBV0QsQ0FIUixDQUlILGdCQUFtQixDQUpoQixDQUtILGtCQUFxQixFQUxsQixDQU1ILGVBQWtCLEVBTmYsQ0FESCxDQURKLENBREMsQ0FBakIsQ0FjSS9FLEVBQVUsS0FBSy9ELEVBQUwsQ0FBUWlFLFdBQVIsQ0FBb0JILENBQXBCLENBZGQsQ0FlQW1GLEVBQVF4SyxNQUFSLENBQWVhLEtBQWYsQ0FBcUJpSyxhQUFyQixDQUFxQ3hGLENBaEJ3QixDQWlCN0RrRixFQUFRTyxNQUFSLENBQWVQLEVBQVF4SyxNQUF2QixDQUNILENBRUwsR0FBSXdLLENBQUosRUFDUSxFQUFFRyxFQUFnQm5CLGNBQWhCLENBQStCLE9BQS9CLEdBQTJDbUIsRUFBZ0JuQixjQUFoQixDQUErQixNQUEvQixDQUE3QyxHQUMwQixZQUE5QixLQUFnQnJFLFNBRnBCLENBRWdELENBQ3hDLEdBQUk2RixHQUFTUixFQUFRM0osS0FBUixDQUFjb0ssUUFBZCxDQUF1QkMsU0FBdkIsRUFBYixDQUNJQyxFQUFXSCxFQUFPLENBQVAsQ0FEZixDQUVJSSxFQUFXSixFQUFPLENBQVAsQ0FGZixDQUdJbkssRUFBUSxLQUFLZ0YsV0FBTCxDQUFpQjhFLEVBQWdCaEYsT0FBakMsQ0FBMENnRixFQUFnQi9FLE9BQTFELEVBQW1FLENBQW5FLENBSFosQ0FJQS9FLEVBQU1pSyxhQUFOLENBQW9CTyxNQUFwQixDQUEyQnhLLEtBQTNCLENBQWlDeUssYUFBakMsQ0FBaURILENBTFQsQ0FNeEN0SyxFQUFNaUssYUFBTixDQUFvQk8sTUFBcEIsQ0FBMkJ4SyxLQUEzQixDQUFpQzBLLGFBQWpDLENBQWlESCxDQU5ULENBT3hDVixFQUFLMUssTUFBTCxDQUFZYSxLQUFaLENBQW9CQSxDQVBvQixDQVF4QzhKLEVBQWdCOUosS0FBaEIsQ0FBd0JBLENBUmdCLENBU3hDNkosRUFBS0ssTUFBTCxDQUFZTCxFQUFLMUssTUFBakIsQ0FDSCxDQUVSLENBQ0osQ0FFRCxLQUFLdUIsRUFBTCxDQUFRbUIsZ0JBQVIsQ0FBeUIsU0FBekIsQ0FBb0MsQ0FBQzhJLENBQUQsQ0FBTXpMLENBQU4sR0FBZSxDQUMvQyxHQUFJQSxFQUFLQSxJQUFULENBQ0ksSUFBSyxHQUFJK0MsR0FBSSxDQUFSLENBQVdDLEVBQUtxSCxFQUFPcEgsTUFBNUIsQ0FBb0NGLEVBQUlDLENBQXhDLENBQTRDRCxHQUE1QyxDQUFpRCxDQUM3QyxHQUFJMkgsR0FBTTFKLEVBQVMrQixDQUFULENBQVYsQ0FDQSxJQUFLLEdBQUkyQyxHQUFJLENBQWIsQ0FBZ0JBLEVBQUlnRixFQUFJekgsTUFBeEIsQ0FBZ0N5QyxHQUFoQyxDQUNJLEdBQUlnRixFQUFJaEYsQ0FBSixFQUFPNUUsS0FBWCxFQUNnQyxTQUF0QixLQUFJNEUsQ0FBSixFQUFPNUUsS0FBUCxDQUFhK0osSUFBYixFQUF5RCxNQUF0QixLQUFJbkYsQ0FBSixFQUFPNUUsS0FBUCxDQUFhK0osSUFEMUQsQ0FDNEUsQ0FDcEUsR0FBSWEsR0FBY2hCLEVBQUloRixDQUFKLEVBQU81RSxLQUFQLENBQWFpSyxhQUEvQixDQUNJWSxFQUFXLEtBQUt6TCxVQUFMLENBQWdCLEtBQUtBLFVBQUwsQ0FBZ0IrQyxNQUFoQixDQUF5QixDQUF6QyxDQURmLENBRUkySSxFQUFjNUwsRUFBS0EsSUFBTCxDQUFVMkwsQ0FBVixDQUZsQixDQUdBRCxFQUFZRyxTQUFaLENBQXNCRCxDQUF0QixDQUNILENBR1osQ0FFUixDQWhCRCxDQTVENEIsQ0E2RTVCLEtBQUtwSyxFQUFMLENBQVFtQixnQkFBUixDQUF5QixVQUF6QixDQUFxQyxJQUFlLENBQ2hELElBQUssR0FBSUksR0FBSSxDQUFSLENBQVdDLEVBQUtxSCxFQUFPcEgsTUFBNUIsQ0FBb0NGLEVBQUlDLENBQXhDLENBQTRDRCxHQUE1QyxDQUFpRCxDQUM3QyxHQUFJMkgsR0FBTTFKLEVBQVMrQixDQUFULENBQVYsQ0FDQSxJQUFLLEdBQUkyQyxHQUFJLENBQWIsQ0FBZ0JBLEVBQUlnRixFQUFJekgsTUFBeEIsQ0FBZ0N5QyxHQUFoQyxDQUNJLEdBQUlnRixFQUFJaEYsQ0FBSixFQUFPNUUsS0FBWCxFQUNnQyxTQUF0QixLQUFJNEUsQ0FBSixFQUFPNUUsS0FBUCxDQUFhK0osSUFBYixFQUF5RCxNQUF0QixLQUFJbkYsQ0FBSixFQUFPNUUsS0FBUCxDQUFhK0osSUFEMUQsQ0FDNEUsQ0FDcEUsR0FBSWEsR0FBY2hCLEVBQUloRixDQUFKLEVBQU81RSxLQUFQLENBQWFpSyxhQUEvQixDQUNBVyxFQUFZRyxTQUFaLEVBQ0gsQ0FHWixDQUNKLENBWkQsQ0FhSCxDQUVENUssZ0JBQWtCLENBQ2QsR0FDSTZLLEVBREosQ0FBSTlLLEVBQVcsS0FBS3dHLGNBQUwsRUFBZixDQUVJNkMsSUFGSixDQUdBeUIsRUFBZSxHQUFJMUssYUFBSixDQUFpQixLQUFLYixLQUF0QixDQUE2QixLQUFLQyxNQUFsQyxDQUpELENBS2RzTCxFQUFhQyxXQUFiLENBQXlCL0ssQ0FBekIsQ0FBb0NnTCxDQUFELEVBQWUsQ0FDOUMzQixFQUFTLEtBQUs0QixnQkFBTCxDQUFzQkQsQ0FBdEIsQ0FEcUMsQ0FFOUMsS0FBSzVCLFlBQUwsQ0FBa0I0QixDQUFsQixDQUE2QjNCLENBQTdCLENBQ0gsQ0FIRCxDQUlILENBRUQ0QixpQkFBa0I1QixDQUFsQixDQUEwQixDQVV0QixNQVRJLGVBQUs2QixnQkFTVCxFQVJJLEtBQUtBLGdCQUFMLENBQXdCLEtBQUsxSyxFQUFMLENBQVEySyxZQUFSLENBQXFCLEtBQUs3TCxpQkFBMUIsQ0FBNkMrSixDQUE3QyxDQVE1QixDQVBJLEtBQUs2QixnQkFBTCxDQUFzQkUsSUFBdEIsRUFPSixFQUxJLEtBQUtGLGdCQUFMLENBQXNCbEIsTUFBdEIsQ0FBNkJYLENBQTdCLENBS0osQ0FISSxLQUFLekosZ0JBR1QsRUFGSSxLQUFLeUwsWUFBTCxDQUFrQixLQUFLSCxnQkFBTCxDQUFzQkksV0FBeEMsQ0FFSixDQUFPLEtBQUtKLGdCQUFMLENBQXNCSSxXQUNoQyxDQUVEQyxXQUFZMUUsQ0FBWixDQUFpQixDQUViLFFBQVMyRSxFQUFULENBQWtCM0UsQ0FBbEIsQ0FBdUI0RSxDQUF2QixDQUE0QixDQUN4QixHQUFJQyxFQUFKLENBQ0FELEVBQU1BLEtBRmtCLENBSXhCLElBQUssR0FBSTFKLEdBQUksQ0FBUixDQUFXQyxFQUFLNkUsRUFBSTVFLE1BQXpCLENBQWlDRixFQUFJQyxDQUFyQyxDQUF5Q0QsR0FBekMsQ0FDSTJKLEVBQVU3RSxFQUFJTyxNQUFKLENBQVdyRixDQUFYLENBQWMsQ0FBZCxDQURkLENBRXVCLENBQWYsS0FBSUUsTUFGWixFQUdRMEosRUFBUXRILElBQVIsQ0FBYW9ILEVBQUlHLE1BQUosQ0FBV0YsQ0FBWCxFQUFvQkcsSUFBcEIsQ0FBeUIsR0FBekIsQ0FBYixDQUhSLENBS0lMLEVBQVEzRSxFQUFJc0IsS0FBSixFQUFSLENBQXFCc0QsRUFBSUcsTUFBSixDQUFXRixDQUFYLENBQXJCLENBTEosQ0FNSTdFLEVBQUlPLE1BQUosQ0FBV3JGLENBQVgsQ0FBYyxDQUFkLENBQWlCMkosRUFBUSxDQUFSLENBQWpCLENBTkosQ0FRQSxNQUFPQyxFQUNWLENBZEQsR0FBSUEsS0FBSixDQWVBLEdBQUlHLEdBQWNOLEVBQVEzRSxDQUFSLENBQWxCLENBQ0EsTUFBT2lGLEdBQVlELElBQVosQ0FBaUIsTUFBakIsQ0FDVixDQUVERSxVQUFXQyxDQUFYLENBQXNCNUssQ0FBdEIsQ0FBNEIsQ0FDeEIsSUFBSyxHQUFJb0gsRUFBVCxHQUFnQnBILEVBQWhCLENBQ0ksR0FBSUEsRUFBS3FILGNBQUwsQ0FBb0JELENBQXBCLENBQUosQ0FBOEIsQ0FDMUIsR0FBSUksR0FBT0osRUFBSXlELEtBQUosQ0FBVSxHQUFWLENBQVgsQ0FDSUMsRUFBa0IsS0FBS1gsVUFBTCxDQUFnQjNDLENBQWhCLEVBQXNCcUQsS0FBdEIsQ0FBNEIsTUFBNUIsQ0FEdEIsQ0FFQSxHQUEyQyxDQUFDLENBQXhDLEtBQWdCNUUsT0FBaEIsQ0FBd0IyRSxDQUF4QixDQUFKLENBQ0ksTUFBT0UsR0FBZ0IsQ0FBaEIsQ0FBUCxDQUVBLFFBRVAsQ0FFTCxRQUNILENBRURwSCxZQUFhcUgsQ0FBYixDQUF3QkMsQ0FBeEIsQ0FBbUMsQ0FDL0IsR0FBSXpFLEtBQUosQ0FDSXFFLEVBQVksRUFEaEIsQ0FFSUssRUFBYUYsRUFBVUYsS0FBVixDQUFnQixHQUFoQixDQUZqQixDQUdJSyxJQUhKLENBSUlDLElBSkosQ0FLSUMsSUFMSixDQU1JO0FBQ0E7QUFDQTtBQUNBQyxLQVRKLENBVUluSSxJQVZKLENBV0lDLElBWEosQ0FZSTBGLElBWkosQ0FhSXpGLEVBQWEsS0FBS3ZELFVBQUwsQ0FBZ0IsS0FBSy9CLFVBQUwsQ0FBZ0IsS0FBS0EsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBQXpDLENBQWhCLENBYmpCLENBcUJBLEdBTkFvSyxFQUFXaEksSUFBWCxDQUFnQnFJLEtBQWhCLENBQXNCTCxDQUF0QixDQU1BLENBTEExRSxFQUFVMEUsRUFBVzFGLE1BQVgsQ0FBbUI3RixDQUFELEVBQU8sQ0FDL0IsTUFBYyxFQUFOLElBQ1gsQ0FGUyxDQUtWLENBRkFrTCxFQUFZckUsRUFBUWtFLElBQVIsQ0FBYSxHQUFiLENBRVosQ0FEQVcsRUFBZ0IsS0FBS3BMLElBQUwsQ0FBVSxLQUFLMkssU0FBTCxDQUFlQyxDQUFmLENBQTBCLEtBQUs1SyxJQUEvQixDQUFWLENBQ2hCLENBQUlvTCxDQUFKLENBQW1CLENBQ2YsSUFBSyxHQUFJekssR0FBSSxDQUFSLENBQVdDLEVBQUt3SyxFQUFjdkssTUFBbkMsQ0FBMkNGLEVBQUlDLENBQS9DLENBQW1ERCxHQUFuRCxDQUNJd0ssRUFBZ0IsS0FBSy9MLEVBQUwsQ0FBUW1NLG1CQUFSLEVBRHBCLENBRUlKLEVBQWM1RixNQUFkLENBQXFCNkYsRUFBY3pLLENBQWQsQ0FBckIsQ0FGSixDQUdJdUssRUFBZWpJLElBQWYsQ0FBb0JrSSxDQUFwQixDQUhKLENBNEJBLE1BdkJBRSxHQUFlLEtBQUtoTSxTQUFMLENBQWVtTSxhQUFmLENBQTZCTixDQUE3QixDQXVCZixDQWJBaEksRUFBYSxDQUNUckYsT0FBUSxDQUNKNE4sVUFBVyxDQUFDLEtBQUszTixVQUFMLENBQWdCLEtBQUtBLFVBQUwsQ0FBZ0IrQyxNQUFoQixDQUF5QixDQUF6QyxDQUFELENBRFAsQ0FFSnlHLFFBQVMsQ0FBQzBELENBQUQsQ0FGTCxDQUdKVSxXQUFZLElBSFIsQ0FJSkMsY0FBZSxLQUFLeEwsV0FKaEIsQ0FLSmlELFdBQVlBLENBTFIsQ0FNSnZGLE9BQVEsS0FBS1ksV0FOVCxDQURDLENBU1RtTixVQUFXUCxDQVRGLENBYWIsQ0FGQWxJLEVBQVUsS0FBSy9ELEVBQUwsQ0FBUWlFLFdBQVIsQ0FBb0JILENBQXBCLENBRVYsQ0FEQTJGLEVBQVMxRixFQUFRMEksUUFBUixFQUNULENBQU8sQ0FBQyxDQUNKLElBQU9oRCxFQUFPL0csR0FEVixDQUVKLElBQU8rRyxFQUFPaEgsR0FGVixDQUFELENBR0osQ0FDQzRHLEtBQU0sS0FBS3pLLFNBRFosQ0FFQ0csTUFBTyxNQUZSLENBR0NDLE9BQVEsTUFIVCxDQUlDdUssY0FBZXhGLENBSmhCLENBSEksQ0FTVixDQUNKLENBRUQ4RyxhQUFjQyxDQUFkLENBQTJCLENBc0J2QixRQUFTNEIsRUFBVCxDQUF3QkMsQ0FBeEIsQ0FBZ0N0RyxDQUFoQyxDQUFxQ3VHLENBQXJDLENBQTZDQyxDQUE3QyxDQUF3RCxDQUNwRCxHQUFJQyxHQUFZLENBQWhCLENBQ0lDLEVBQWEsQ0FEakIsQ0FHSUMsRUFBS2xHLEtBQUttRyxJQUhkLENBS0lOLEVBQU8sQ0FBUCxDQU5nRCxHQU9oREcsRUFBWXZJLFNBQVNvSSxFQUFPLENBQVAsRUFBVU8sUUFBVixDQUFtQmxLLEtBQW5CLENBQXlCbUssSUFBbEMsQ0FQb0MsQ0FRaERKLEVBQWF4SSxTQUFTb0ksRUFMZkMsRUFBUyxDQUtNLEVBQWFNLFFBQWIsQ0FBc0JsSyxLQUF0QixDQUE0Qm1LLElBQXJDLENBUm1DLEVBV3BELElBQUssR0FBSTVMLEdBQUksQ0FBYixDQUFnQkEsRUFBSXFMLENBQXBCLENBQTRCLEVBQUVyTCxDQUE5QixDQUFpQyxDQUM3QixHQUFJNkwsR0FBS1QsRUFBT3BMLENBQVAsRUFBVTJMLFFBQW5CLENBQ0lHLEVBQU9WLEVBQU9wTCxDQUFQLENBRFgsQ0FFSStMLEVBQVEsQ0FGWixDQUdJQyxFQUFPLENBSFgsQ0FJQUYsRUFBS0csU0FBTCxDQUFpQm5ILEVBQUk5RSxDQUFKLENBTFksQ0FNN0I4TCxFQUFLSSxRQUFMLENBQWdCbEosU0FBUzZJLEVBQUdwSyxLQUFILENBQVNtSyxJQUFsQixDQU5hLENBTzdCRSxFQUFLSyxPQUFMLENBQWVMLEVBQUtJLFFBQUwsQ0FBZ0JsSixTQUFTNkksRUFBR3BLLEtBQUgsQ0FBU2pFLEtBQWxCLEVBQTJCLENBUDdCLENBUTdCc08sRUFBS3pILEtBQUwsQ0FBYXJFLENBUmdCLENBUzdCOEwsRUFBS00sTUFBTCxDQUFjLENBVGUsQ0FVN0JOLEVBQUtPLEtBQUwsQ0FBYVIsRUFBR3BLLEtBQUgsQ0FBUzZLLE1BVk8sQ0FXN0I1SCxFQUFLNkgsVUFBTCxDQUFnQlQsRUFBS0gsUUFBckIsQ0FBK0IsU0FBb0JhLENBQXBCLENBQTRCLENBQ3ZEVCxFQUFRRCxFQUFLSSxRQUFMLENBQWdCTSxDQUFoQixDQUFxQlYsRUFBS00sTUFEcUIsQ0FFbkRMLEVBQVFSLENBRjJDLEdBR25EUyxFQUFPVCxFQUFZUSxDQUhnQyxDQUluREEsRUFBUVIsRUFBWUUsRUFBR08sQ0FBSCxDQUorQixFQU1uREQsRUFBUVAsQ0FOMkMsR0FPbkRRLEVBQU9ELEVBQVFQLENBUG9DLENBUW5ETyxFQUFRUCxFQUFhQyxFQUFHTyxDQUFILENBUjhCLEVBVXZESCxFQUFHcEssS0FBSCxDQUFTbUssSUFBVCxDQUFnQkcsRUFBUSxJQVYrQixDQVd2REYsRUFBR3BLLEtBQUgsQ0FBUzZLLE1BQVQsSUFYdUQsQ0FZdkRHLEVBQWVYLEVBQUt6SCxLQUFwQixJQUFrQytHLENBQWxDLENBWnVELENBYXZEcUIsRUFBZVgsRUFBS3pILEtBQXBCLElBQWlDK0csQ0FBakMsQ0FDSCxDQWRELENBY0csVUFBb0IsQ0FDbkIsR0FBSXNCLEtBQUosQ0FDSS9KLEVBQUksQ0FEUixDQUtBLElBSEFtSixFQUFLTSxNQUFMLENBQWMsQ0FHZCxDQUZBUCxFQUFHcEssS0FBSCxDQUFTNkssTUFBVCxDQUFrQlIsRUFBS08sS0FFdkIsQ0FEQVIsRUFBR3BLLEtBQUgsQ0FBU21LLElBQVQsQ0FBZ0JFLEVBQUtJLFFBQUwsQ0FBZ0IsSUFDaEMsQ0FBT3ZKLEVBQUkwSSxDQUFYLENBQW1CLEVBQUUxSSxDQUFyQixDQUNRMkksRUFBVTNJLENBQVYsSUFBaUJ5SSxFQUFPekksQ0FBUCxFQUFVc0osU0FEbkMsR0FFUVgsRUFBVTNJLENBQVYsRUFBZXlJLEVBQU96SSxDQUFQLEVBQVVzSixTQUZqQyxDQUdRUyxJQUhSLEVBTUlBLENBWmUsRUFhZjFPLE9BQU8yTyxVQUFQLENBQWtCLFVBQVksQ0FDMUJqSSxFQUFLeEYsVUFBTCxDQUFrQndGLEVBQUt2RixlQUFMLEVBRFEsQ0FFMUJ1RixFQUFLeEcsY0FBTCxFQUNILENBSEQsQ0FHRyxFQUhILENBS1AsQ0FoQ0QsQ0FpQ0gsQ0FDSixDQUVELFFBQVN1TyxFQUFULENBQXlCcEksQ0FBekIsQ0FBZ0N1SSxDQUFoQyxDQUF5Q3hCLENBQXpDLENBQWlELENBQzdDLEdBQUl5QixLQUFKLENBQ0lDLEVBQVcxQixFQUFPL0csQ0FBUCxDQURmLENBRUkwSSxFQUFVSCxFQUFVdkksRUFBUSxDQUFsQixDQUFzQkEsRUFBUSxDQUY1QyxDQUdJMkksRUFBVzVCLEVBQU8yQixDQUFQLENBSGYsQ0FJQTtBQUNJQyxFQU55QyxHQU96Q0gsRUFBTXZLLElBQU4sQ0FBVyxDQUFDc0ssQ0FBRCxFQUFhNUosU0FBUzhKLEVBQVNuQixRQUFULENBQWtCbEssS0FBbEIsQ0FBd0JtSyxJQUFqQyxFQUF5Q29CLEVBQVNiLE9BQTFFLENBUHlDLENBUXpDVSxFQUFNdkssSUFBTixDQUFXdUssRUFBTUksR0FBTixJQUFnQkwsR0FBVzVKLFNBQVM4SixFQUFTbkIsUUFBVCxDQUFrQmxLLEtBQWxCLENBQXdCbUssSUFBakMsRUFBeUNvQixFQUFTZCxRQUF4RixDQVJ5QyxDQVNyQ1csRUFBTUksR0FBTixFQVRxQyxHQVVyQ0osRUFBTXZLLElBQU4sQ0FBVzBLLEVBQVNiLE9BQXBCLENBVnFDLENBV3JDVSxFQUFNdkssSUFBTixDQUFXMEssRUFBU2QsUUFBcEIsQ0FYcUMsQ0FZckNXLEVBQU12SyxJQUFOLENBQVcwSyxFQUFTM0ksS0FBcEIsQ0FacUMsQ0FhaEN1SSxDQWJnQyxDQWdCakNFLEVBQVNWLE1BQVQsRUFBbUJwSixTQUFTZ0ssRUFBU3JCLFFBQVQsQ0FBa0JsSyxLQUFsQixDQUF3QmpFLEtBQWpDLENBaEJjLENBY2pDc1AsRUFBU1YsTUFBVCxFQUFtQnBKLFNBQVNnSyxFQUFTckIsUUFBVCxDQUFrQmxLLEtBQWxCLENBQXdCakUsS0FBakMsQ0FkYyxDQWtCckN3UCxFQUFTZCxRQUFULENBQW9CWSxFQUFTWixRQWxCUSxDQW1CckNjLEVBQVNiLE9BQVQsQ0FBbUJXLEVBQVNYLE9BbkJTLENBb0JyQ2EsRUFBUzNJLEtBQVQsQ0FBaUJ5SSxFQUFTekksS0FwQlcsQ0FxQnJDMkksRUFBU3JCLFFBQVQsQ0FBa0JsSyxLQUFsQixDQUF3Qm1LLElBQXhCLENBQStCb0IsRUFBU2QsUUFBVCxDQUFvQixJQXJCZCxDQXNCckNXLEVBQU12SyxJQUFOLENBQVc4SSxFQUFPMkIsQ0FBUCxDQUFYLENBdEJxQyxDQXVCckMzQixFQUFPMkIsQ0FBUCxFQUFrQjNCLEVBQU8vRyxDQUFQLENBdkJtQixDQXdCckMrRyxFQUFPL0csQ0FBUCxFQUFnQndJLEVBQU1JLEdBQU4sRUF4QnFCLEdBNEJ4QixDQUFqQixLQUFNL00sTUE1Qm1DLEdBNkJ6QzRNLEVBQVN6SSxLQUFULENBQWlCd0ksRUFBTUksR0FBTixFQTdCd0IsQ0E4QnpDSCxFQUFTWixRQUFULENBQW9CVyxFQUFNSSxHQUFOLEVBOUJxQixDQStCekNILEVBQVNYLE9BQVQsQ0FBbUJVLEVBQU1JLEdBQU4sRUEvQnNCLENBaUNoRCxDQWhIRDtBQUNBLElBS0lDLEVBTEosQ0FNSUMsQ0FOSixDQUFJQyxFQUFhLEtBQUtwTyxXQUFMLENBQWlCOUIsTUFBbEMsQ0FDSUMsRUFBYWlRLEVBQVdqUSxVQUFYLElBRGpCLENBRUlDLEVBQVdnUSxFQUFXaFEsUUFBWCxJQUZmLENBR0lpUSxFQUFpQmpRLEVBQVM4QyxNQUg5QixDQUlJb04sRUFBbUIsQ0FKdkIsQ0FPSTVJLEVBQU8sSUFQWCxDQVFBO0FBQ0E2RSxHQUFjQSxFQUFZLENBQVosQ0FYUyxDQWF2QnBNLEVBQWFBLEVBQVdpSixLQUFYLENBQWlCLENBQWpCLENBQW9CakosRUFBVytDLE1BQVgsQ0FBb0IsQ0FBeEMsQ0FiVSxDQWN2Qm9OLEVBQW1CblEsRUFBVytDLE1BZFAsQ0FnQnZCZ04sRUFBbUIzRCxFQUFZbkQsS0FBWixDQUFrQixDQUFsQixDQUFxQmtILENBQXJCLENBaEJJLENBbUJ2QkgsRUFBaUI1RCxFQUFZbkQsS0FBWixDQUFrQmtILEVBQW1CLENBQXJDLENBQXdDQSxFQUFtQkQsQ0FBbkIsQ0FBb0MsQ0FBNUUsQ0FuQk0sQ0FvQnZCbEMsRUFBYytCLENBQWQsQ0FBZ0MvUCxDQUFoQyxDQUE0Q21RLENBQTVDLENBQThELEtBQUtuUSxVQUFuRSxDQXBCdUIsQ0FxQnZCZ08sRUFBY2dDLENBQWQsQ0FBOEIvUCxDQUE5QixDQUF3Q2lRLENBQXhDLENBQXdELEtBQUtqUSxRQUE3RCxDQTZGSCxDQUVEbVAsV0FBWVYsQ0FBWixDQUFnQjBCLENBQWhCLENBQXlCQyxDQUF6QixDQUFtQyxDQUcvQixRQUFTQyxFQUFULENBQXdCQyxDQUF4QixDQUEyQixDQUN2QkgsRUFBUUcsRUFBRUMsT0FBRixDQUFZQyxDQUFwQixDQUF1QkYsRUFBRUcsT0FBRixDQUFZQyxDQUFuQyxDQUNILENBU0QsUUFBU0MsRUFBVCxFQUE0QixDQUN4QmxDLEVBQUdwSyxLQUFILENBQVN1TSxPQUFULENBQW1CLENBREssQ0FFeEJuQyxFQUFHb0MsU0FBSCxDQUFhQyxNQUFiLENBQW9CLFVBQXBCLENBRndCLENBR3hCbFEsT0FBT3NELFFBQVAsQ0FBZ0I2TSxtQkFBaEIsQ0FBb0MsV0FBcEMsQ0FBaURWLENBQWpELENBSHdCLENBSXhCelAsT0FBT3NELFFBQVAsQ0FBZ0I2TSxtQkFBaEIsQ0FBb0MsU0FBcEMsQ0FBK0NKLENBQS9DLENBSndCLENBS3hCL1AsT0FBTzJPLFVBQVAsQ0FBa0JhLENBQWxCLENBQTRCLEVBQTVCLENBQ0gsQ0FuQkQsR0FBSUksR0FBSSxDQUFSLENBQ0lFLEVBQUksQ0FEUixDQUtBakMsRUFBR2pNLGdCQUFILENBQW9CLFdBQXBCLENBQWlDLFNBQVU4TixDQUFWLENBQWEsQ0FDMUNFLEVBQUlGLEVBQUVDLE9BRG9DLENBRTFDRyxFQUFJSixFQUFFRyxPQUZvQyxDQUcxQ2hDLEVBQUdwSyxLQUFILENBQVN1TSxPQUFULENBQW1CLEdBSHVCLENBSTFDbkMsRUFBR29DLFNBQUgsQ0FBYUcsR0FBYixDQUFpQixVQUFqQixDQUowQyxDQUsxQ3BRLE9BQU9zRCxRQUFQLENBQWdCMUIsZ0JBQWhCLENBQWlDLFdBQWpDLENBQThDNk4sQ0FBOUMsQ0FMMEMsQ0FNMUN6UCxPQUFPc0QsUUFBUCxDQUFnQjFCLGdCQUFoQixDQUFpQyxTQUFqQyxDQUE0Q21PLENBQTVDLENBQ0gsQ0FQRCxDQWVILENBRURqSSxVQUFXVyxDQUFYLENBQWdCNUIsQ0FBaEIsQ0FBcUIsQ0FDakIsTUFBUTVILEVBQUQsRUFBVUEsRUFBS3dKLENBQUwsSUFBYzVCLENBQ2xDLENBbjdCYSxDQXM3QmxCMUcsT0FBT0MsT0FBUCxDQUFpQnJCLFc7Ozs7OztBQzE3QmpCLE1BQU1zQixhQUFhLENBQ2ZDLFlBQWFkLENBQWIsQ0FBb0JDLENBQXBCLENBQTRCLENBQ3hCLEtBQUtELEtBQUwsQ0FBYUEsQ0FEVyxDQUV4QixLQUFLQyxNQUFMLENBQWNBLENBQ2pCLENBQ0R1TCxZQUFhL0ssQ0FBYixDQUF1Qm9RLENBQXZCLENBQTJCLENBQ3ZCLEdBQUlDLEdBQWtCclEsRUFBU21JLEtBQVQsRUFBdEIsQ0FDQWlJLEVBQUdDLENBQUgsQ0FGdUIsQ0FHdkJDLFFBQVFDLEdBQVIsQ0FBWSxLQUFLaFIsS0FBakIsQ0FBd0IsS0FBS0MsTUFBN0IsQ0FIdUIsQ0FJdkI4USxRQUFRQyxHQUFSLENBQVlGLENBQVosQ0FDSCxDQVZjLENBYW5CblEsT0FBT0MsT0FBUCxDQUFpQkMsWTs7Ozs7O0FDYmpCRixRQUFPQyxPQUFQLG15TSIsImZpbGUiOiJjcm9zc3RhYi1leHQtZXM2Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGEzOGYxZGQ0MTMwNjgwNDg1YzhmIiwiY29uc3QgQ3Jvc3N0YWJFeHQgPSByZXF1aXJlKCcuL2Nyb3NzdGFiRXh0JyksXG4gICAgZGF0YSA9IHJlcXVpcmUoJy4vbGFyZ2VEYXRhJyk7XG5cbnZhciBjb25maWcgPSB7XG4gICAgZGltZW5zaW9uczogWydQcm9kdWN0JywgJ1N0YXRlJywgJ01vbnRoJ10sXG4gICAgbWVhc3VyZXM6IFsnUHJvZml0JywgJ1Zpc2l0b3JzJ10sXG4gICAgY2hhcnRUeXBlOiAnY29sdW1uMmQnLFxuICAgIG5vRGF0YU1lc3NhZ2U6ICdObyBkYXRhIHRvIGRpc3BsYXkuJyxcbiAgICBjcm9zc3RhYkNvbnRhaW5lcjogJ2Nyb3NzdGFiLWRpdicsXG4gICAgd2lkdGg6IDgwMCxcbiAgICBoZWlnaHQ6IDYwMCxcbiAgICBjZWxsV2lkdGg6IDE1MCxcbiAgICBjZWxsSGVpZ2h0OiAxMTMsXG4gICAgc2hvd0ZpbHRlcjogdHJ1ZSxcbiAgICBkcmFnZ2FibGVIZWFkZXJzOiB0cnVlLFxuICAgIC8vIGFnZ3JlZ2F0aW9uOiAnc3VtJyxcbiAgICBjaGFydENvbmZpZzoge1xuICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgJ3Nob3dCb3JkZXInOiAnMCcsXG4gICAgICAgICAgICAnc2hvd1ZhbHVlcyc6ICcwJyxcbiAgICAgICAgICAgICdkaXZMaW5lQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAnbnVtYmVyUHJlZml4JzogJ+KCuScsXG4gICAgICAgICAgICAncm90YXRlVmFsdWVzJzogJzEnLFxuICAgICAgICAgICAgJ3JvbGxPdmVyQmFuZENvbG9yJzogJyNiYWRhZjAnLFxuICAgICAgICAgICAgJ2NvbHVtbkhvdmVyQ29sb3InOiAnIzFiODNjYycsXG4gICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiAnMTAnLFxuICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogJzEwJyxcbiAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiAnNScsXG4gICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6ICc1JyxcbiAgICAgICAgICAgICd6ZXJvUGxhbmVUaGlja25lc3MnOiAnMScsXG4gICAgICAgICAgICAnc2hvd1plcm9QbGFuZVZhbHVlJzogJzEnLFxuICAgICAgICAgICAgJ3plcm9QbGFuZUFscGhhJzogJzEwMCcsXG4gICAgICAgICAgICAnYmdDb2xvcic6ICcjRkZGRkZGJyxcbiAgICAgICAgICAgICdzaG93WEF4aXNMaW5lJzogJzEnLFxuICAgICAgICAgICAgJ3Bsb3RCb3JkZXJBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdzaG93WGF4aXNWYWx1ZXMnOiAnMCcsXG4gICAgICAgICAgICAnc2hvd1lBeGlzVmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ2FuaW1hdGlvbic6ICcwJyxcbiAgICAgICAgICAgICd0cmFuc3Bvc2VBbmltYXRpb24nOiAnMScsXG4gICAgICAgICAgICAnYWx0ZXJuYXRlSEdyaWRBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdwbG90Q29sb3JJblRvb2x0aXAnOiAnMCcsXG4gICAgICAgICAgICAnY2FudmFzQm9yZGVyQWxwaGEnOiAnMTAwJyxcbiAgICAgICAgICAgICdhbHRlcm5hdGVWR3JpZEFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3BhbGV0dGVDb2xvcnMnOiAnI0I1QjlCQScsXG4gICAgICAgICAgICAndXNlUGxvdEdyYWRpZW50Q29sb3InOiAnMCcsXG4gICAgICAgICAgICAndmFsdWVGb250Q29sb3InOiAnI0ZGRkZGRicsXG4gICAgICAgICAgICAnZHJhd1RyZW5kUmVnaW9uJzogJzEnXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICB3aW5kb3cuY3Jvc3N0YWIgPSBuZXcgQ3Jvc3N0YWJFeHQoZGF0YSwgY29uZmlnKTtcbiAgICB3aW5kb3cuY3Jvc3N0YWIucmVuZGVyQ3Jvc3N0YWIoKTtcbn0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBDcm9zc3RhYkV4dDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsImxldCBTcGFjZU1hbmFnZXIgPSByZXF1aXJlKCcuL3NwYWNlTWFuYWdlcicpO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgY3Jvc3N0YWIuXG4gKi9cbmNsYXNzIENyb3NzdGFiRXh0IHtcbiAgICBjb25zdHJ1Y3RvciAoZGF0YSwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ID0ge1xuICAgICAgICAgICAgJ21vZGVsVXBkYXRlZCc6ICdtb2RlbHVwZGF0ZWQnLFxuICAgICAgICAgICAgJ21vZGVsRGVsZXRlZCc6ICdtb2RlbGRlbGV0ZWQnLFxuICAgICAgICAgICAgJ21ldGFJbmZvVXBkYXRlJzogJ21ldGFpbmZvdXBkYXRlZCcsXG4gICAgICAgICAgICAncHJvY2Vzc29yVXBkYXRlZCc6ICdwcm9jZXNzb3J1cGRhdGVkJyxcbiAgICAgICAgICAgICdwcm9jZXNzb3JEZWxldGVkJzogJ3Byb2Nlc3NvcmRlbGV0ZWQnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIGlmICh0eXBlb2YgTXVsdGlDaGFydGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5tYyA9IG5ldyBNdWx0aUNoYXJ0aW5nKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZSA9IHRoaXMubWMuY3JlYXRlRGF0YVN0b3JlKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5zZXREYXRhKHsgZGF0YVNvdXJjZTogdGhpcy5kYXRhIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmVQYXJhbXMgPSB7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jaGFydFR5cGUgPSBjb25maWcuY2hhcnRUeXBlO1xuICAgICAgICB0aGlzLnNob3dGaWx0ZXIgPSBjb25maWcuc2hvd0ZpbHRlciB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5kcmFnZ2FibGVIZWFkZXJzID0gY29uZmlnLmRyYWdnYWJsZUhlYWRlcnMgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhcnRDb25maWcgPSBjb25maWcuY2hhcnRDb25maWc7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IGNvbmZpZy5kaW1lbnNpb25zO1xuICAgICAgICB0aGlzLm1lYXN1cmVzID0gY29uZmlnLm1lYXN1cmVzO1xuICAgICAgICB0aGlzLm1lYXN1cmVPblJvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSB0aGlzLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICB0aGlzLmNvbHVtbktleUFyciA9IFtdO1xuICAgICAgICB0aGlzLndpZHRoID0gY29uZmlnLndpZHRoIHx8IDgwMDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjb25maWcuaGVpZ2h0IHx8IDYwMDtcbiAgICAgICAgdGhpcy5jZWxsV2lkdGggPSBjb25maWcuY2VsbFdpZHRoIHx8IDIxMDtcbiAgICAgICAgdGhpcy5jZWxsSGVpZ2h0ID0gY29uZmlnLmNlbGxIZWlnaHQgfHwgMTEzO1xuICAgICAgICB0aGlzLmNyb3NzdGFiQ29udGFpbmVyID0gY29uZmlnLmNyb3NzdGFiQ29udGFpbmVyO1xuICAgICAgICB0aGlzLmhhc2ggPSB0aGlzLmdldEZpbHRlckhhc2hNYXAoKTtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuYWdncmVnYXRpb24gPSBjb25maWcuYWdncmVnYXRpb24gfHwgJ3N1bSc7XG4gICAgICAgIHRoaXMuYXhlcyA9IFtdO1xuICAgICAgICB0aGlzLm5vRGF0YU1lc3NhZ2UgPSBjb25maWcubm9EYXRhTWVzc2FnZTtcbiAgICAgICAgaWYgKHR5cGVvZiBGQ0RhdGFGaWx0ZXJFeHQgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5zaG93RmlsdGVyKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVyQ29uZmlnID0ge307XG4gICAgICAgICAgICB0aGlzLmRhdGFGaWx0ZXJFeHQgPSBuZXcgRkNEYXRhRmlsdGVyRXh0KHRoaXMuZGF0YVN0b3JlLCBmaWx0ZXJDb25maWcsICdjb250cm9sLWJveCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YVN0b3JlLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5ldmVudExpc3QubW9kZWxVcGRhdGVkLCAoZSwgZCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyQ3Jvc3N0YWIoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgZ2xvYmFsIGRhdGEgZnJvbSB0aGUgZGF0YSBzdG9yZSBmb3IgaW50ZXJuYWwgdXNlLlxuICAgICAqL1xuICAgIGJ1aWxkR2xvYmFsRGF0YSAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTdG9yZS5nZXRLZXlzKCkpIHtcbiAgICAgICAgICAgIGxldCBmaWVsZHMgPSB0aGlzLmRhdGFTdG9yZS5nZXRLZXlzKCksXG4gICAgICAgICAgICAgICAgZ2xvYmFsRGF0YSA9IHt9O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZmllbGRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxEYXRhW2ZpZWxkc1tpXV0gPSB0aGlzLmRhdGFTdG9yZS5nZXRVbmlxdWVWYWx1ZXMoZmllbGRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxEYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUm93ICh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCwgZmlsdGVyZWREYXRhU3RvcmUpIHtcbiAgICAgICAgdmFyIHJvd3NwYW4gPSAwLFxuICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSByb3dPcmRlcltjdXJyZW50SW5kZXhdLFxuICAgICAgICAgICAgZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XSxcbiAgICAgICAgICAgIGksIGwgPSBmaWVsZFZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgICByb3dFbGVtZW50LFxuICAgICAgICAgICAgaGFzRnVydGhlckRlcHRoID0gY3VycmVudEluZGV4IDwgKHJvd09yZGVyLmxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAgICAgICAgIGNvbExlbmd0aCA9IHRoaXMuY29sdW1uS2V5QXJyLmxlbmd0aCxcbiAgICAgICAgICAgIGh0bWxSZWYsXG4gICAgICAgICAgICBtaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgIG1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIG1pbm1heE9iaiA9IHt9O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGxldCBjbGFzc1N0ciA9ICcnO1xuICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRWYWx1ZXNbaV07XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKHRoaXMuY2VsbEhlaWdodCAtIDEwKSAvIDIpICsgJ3B4JztcbiAgICAgICAgICAgIGNsYXNzU3RyICs9ICdyb3ctZGltZW5zaW9ucycgK1xuICAgICAgICAgICAgICAgICcgJyArIHRoaXMuZGltZW5zaW9uc1tjdXJyZW50SW5kZXhdLnRvTG93ZXJDYXNlKCkgK1xuICAgICAgICAgICAgICAgICcgJyArIGZpZWxkVmFsdWVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICAvLyBpZiAoY3VycmVudEluZGV4ID4gMCkge1xuICAgICAgICAgICAgLy8gICAgIGh0bWxSZWYuY2xhc3NMaXN0LmFkZCh0aGlzLmRpbWVuc2lvbnNbY3VycmVudEluZGV4IC0gMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICB0aGlzLmNvcm5lcldpZHRoID0gZmllbGRWYWx1ZXNbaV0ubGVuZ3RoICogMTA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgcm93RWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jb3JuZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1LFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG4gICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3Jvd0VsZW1lbnRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChyb3dFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNGdXJ0aGVyRGVwdGgpIHtcbiAgICAgICAgICAgICAgICByb3dFbGVtZW50LnJvd3NwYW4gPSB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCArIDEsIGZpbHRlcmVkRGF0YUhhc2hLZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgYWRhcHRlckNmZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FudmFzUGFkZGluZyc6IDEzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAneS1heGlzLWNoYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nOiBhZGFwdGVyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbExlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydENlbGxPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jZWxsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY2VsbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93SGFzaDogZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEhhc2g6IHRoaXMuY29sdW1uS2V5QXJyW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2hhcnQtY2VsbCdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChjaGFydENlbGxPYmopO1xuICAgICAgICAgICAgICAgICAgICBtaW5tYXhPYmogPSB0aGlzLmdldENoYXJ0T2JqKGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuY29sdW1uS2V5QXJyW2pdKVswXTtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gKHBhcnNlSW50KG1pbm1heE9iai5tYXgpID4gbWF4KSA/IG1pbm1heE9iai5tYXggOiBtYXg7XG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IChwYXJzZUludChtaW5tYXhPYmoubWluKSA8IG1pbikgPyBtaW5tYXhPYmoubWluIDogbWluO1xuICAgICAgICAgICAgICAgICAgICBjaGFydENlbGxPYmoubWF4ID0gbWF4O1xuICAgICAgICAgICAgICAgICAgICBjaGFydENlbGxPYmoubWluID0gbWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvd3NwYW4gKz0gcm93RWxlbWVudC5yb3dzcGFuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbCAodGFibGUsIGRhdGEsIG1lYXN1cmVPcmRlcikge1xuICAgICAgICB2YXIgY29sc3BhbiA9IDAsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbCA9IHRoaXMubWVhc3VyZXMubGVuZ3RoLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGNvbEVsZW1lbnQsXG4gICAgICAgICAgICBodG1sUmVmLFxuICAgICAgICAgICAgaGVhZGVyRGl2LFxuICAgICAgICAgICAgZHJhZ0RpdixcbiAgICAgICAgICAgIGhhbmRsZVNwYW47XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJycsXG4gICAgICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSBtZWFzdXJlT3JkZXJbaV07XG4gICAgICAgICAgICAgICAgLy8gZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XTtcbiAgICAgICAgICAgIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXG4gICAgICAgICAgICBkcmFnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkcmFnRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVhc3VyZS1kcmFnLWhhbmRsZScpO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5oZWlnaHQgPSAnNXB4JztcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUucGFkZGluZ1RvcCA9ICczcHgnO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nQm90dG9tID0gJzFweCc7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgMjU7IGorKykge1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzFweCc7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5mb250U2l6ZSA9ICczcHgnO1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUubGluZUhlaWdodCA9ICcxJztcbiAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAndG9wJztcbiAgICAgICAgICAgICAgICBkcmFnRGl2LmFwcGVuZENoaWxkKGhhbmRsZVNwYW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZENvbXBvbmVudDtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICc1cHgnO1xuICAgICAgICAgICAgLy8gaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGggLSAxNSkgLyAyKSArICdweCc7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuXG4gICAgICAgICAgICBjbGFzc1N0ciArPSAnY29sdW1uLW1lYXN1cmVzICcgKyB0aGlzLm1lYXN1cmVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG5cbiAgICAgICAgICAgIGhlYWRlckRpdi5hcHBlbmRDaGlsZChkcmFnRGl2KTtcbiAgICAgICAgICAgIGhlYWRlckRpdi5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIGNvbEVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGhlYWRlckRpdi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uS2V5QXJyLnB1c2godGhpcy5tZWFzdXJlc1tpXSk7XG4gICAgICAgICAgICB0YWJsZVswXS5wdXNoKGNvbEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZVJvd0RpbUhlYWRpbmcgKHRhYmxlLCBjb2xPcmRlckxlbmd0aCkge1xuICAgICAgICB2YXIgY29ybmVyQ2VsbEFyciA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaHRtbFJlZixcbiAgICAgICAgICAgIGNsYXNzU3RyID0gJycsXG4gICAgICAgICAgICBoZWFkZXJEaXYsXG4gICAgICAgICAgICBkcmFnRGl2LFxuICAgICAgICAgICAgaGFuZGxlU3BhbjtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgaGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBoZWFkZXJEaXYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cbiAgICAgICAgICAgIGRyYWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRyYWdEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdkaW1lbnNpb24tZHJhZy1oYW5kbGUnKTtcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUuaGVpZ2h0ID0gJzVweCc7XG4gICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdUb3AgPSAnM3B4JztcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICcxcHgnO1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IDI1OyBqKyspIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUubWFyZ2luTGVmdCA9ICcxcHgnO1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUuZm9udFNpemUgPSAnM3B4JztcbiAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLmxpbmVIZWlnaHQgPSAnMSc7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ3RvcCc7XG4gICAgICAgICAgICAgICAgZHJhZ0Rpdi5hcHBlbmRDaGlsZChoYW5kbGVTcGFuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gdGhpcy5kaW1lbnNpb25zW2ldWzBdLnRvVXBwZXJDYXNlKCkgKyB0aGlzLmRpbWVuc2lvbnNbaV0uc3Vic3RyKDEpO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gJzVweCc7XG4gICAgICAgICAgICBjbGFzc1N0ciA9ICdjb3JuZXItY2VsbCAnICsgdGhpcy5kaW1lbnNpb25zW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGRyYWdEaXYpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgY29ybmVyQ2VsbEFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25zW2ldICogMTAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNSxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaHRtbDogaGVhZGVyRGl2Lm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ybmVyQ2VsbEFycjtcbiAgICB9XG5cbiAgICBjcmVhdGVDb2xEaW1IZWFkaW5nICh0YWJsZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGkgPSBpbmRleCxcbiAgICAgICAgICAgIGh0bWxSZWY7XG4gICAgICAgIGZvciAoOyBpIDwgdGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGh0bWxSZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICBodG1sUmVmLmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIHRhYmxlW2ldLnB1c2goe1xuICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1LFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdheGlzLWhlYWRlci1jZWxsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cblxuICAgIGNyZWF0ZUNhcHRpb24gKHRhYmxlLCBtYXhMZW5ndGgpIHtcbiAgICAgICAgbGV0IGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FwdGlvbic6ICdTYWxlIG9mIENlcmVhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmNhcHRpb24nOiAnQWNyb3NzIFN0YXRlcywgQWNyb3NzIFllYXJzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogJzAnXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgIHRhYmxlLnVuc2hpZnQoW3tcbiAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgY29sc3BhbjogbWF4TGVuZ3RoLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2FwdGlvbi1jaGFydCcsXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICd0eXBlJzogJ2NhcHRpb24nLFxuICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICdjb25maWd1cmF0aW9uJzogYWRhcHRlclxuICAgICAgICAgICAgfVxuICAgICAgICB9XSk7XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBjcmVhdGVDcm9zc3RhYiAoKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIG9iaiA9IHRoaXMuZ2xvYmFsRGF0YSxcbiAgICAgICAgICAgIHJvd09yZGVyID0gdGhpcy5kaW1lbnNpb25zLmZpbHRlcihmdW5jdGlvbiAodmFsLCBpLCBhcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsICE9PSBhcnJbYXJyLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY29sT3JkZXIgPSB0aGlzLm1lYXN1cmVzLmZpbHRlcihmdW5jdGlvbiAodmFsLCBpLCBhcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5tZWFzdXJlT25Sb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gYXJyW2Fyci5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHRhYmxlID0gW10sXG4gICAgICAgICAgICB4QXhpc1JvdyA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBtYXhMZW5ndGggPSAwO1xuICAgICAgICBpZiAob2JqKSB7XG4gICAgICAgICAgICB0YWJsZS5wdXNoKHRoaXMuY3JlYXRlUm93RGltSGVhZGluZyh0YWJsZSwgY29sT3JkZXIubGVuZ3RoKSk7XG4gICAgICAgICAgICAvLyB0aGlzLmNyZWF0ZUNvbCh0YWJsZSwgb2JqLCBjb2xPcmRlciwgMCwgJycpO1xuICAgICAgICAgICAgdGFibGUgPSB0aGlzLmNyZWF0ZUNvbERpbUhlYWRpbmcodGFibGUsIDApO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb2wodGFibGUsIG9iaiwgdGhpcy5tZWFzdXJlcyk7XG4gICAgICAgICAgICB0YWJsZS5wdXNoKFtdKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUm93KHRhYmxlLCBvYmosIHJvd09yZGVyLCAwLCAnJyk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSAobWF4TGVuZ3RoIDwgdGFibGVbaV0ubGVuZ3RoKSA/IHRhYmxlW2ldLmxlbmd0aCA6IG1heExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2JsYW5rLWNlbGwnXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEV4dHJhIGNlbGwgZm9yIHkgYXhpcy4gRXNzZW50aWFsbHkgWSBheGlzIGZvb3Rlci5cbiAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdheGlzLWZvb3Rlci1jZWxsJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBtYXhMZW5ndGggLSB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2F0ZWdvcmllcyA9IHRoaXMuZ2xvYmFsRGF0YVt0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdXSxcbiAgICAgICAgICAgICAgICAgICAgYWRhcHRlckNmZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FudmFzUGFkZGluZyc6IDEzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6IDVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWRhcHRlciA9IHt9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuICAgICAgICAgICAgICAgICAgICBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMjAsXG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3gtYXhpcy1jaGFydCcsXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdheGlzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWd1cmF0aW9uJzogYWRhcHRlclxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRhYmxlLnB1c2goeEF4aXNSb3cpO1xuICAgICAgICAgICAgdGFibGUgPSB0aGlzLmNyZWF0ZUNhcHRpb24odGFibGUsIG1heExlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLmNvbHVtbktleUFyciA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFibGUucHVzaChbe1xuICAgICAgICAgICAgICAgIGh0bWw6ICc8cCBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiPicgKyB0aGlzLm5vRGF0YU1lc3NhZ2UgKyAnPC9wPicsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA1MCxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoICogdGhpcy5tZWFzdXJlcy5sZW5ndGhcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgcm93RGltUmVvcmRlciAoc3ViamVjdCwgdGFyZ2V0KSB7XG4gICAgICAgIHZhciBidWZmZXIgPSAnJyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gdGhpcy5kaW1lbnNpb25zO1xuICAgICAgICBpZiAodGhpcy5tZWFzdXJlT25Sb3cgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRpbWVuc2lvbnMuc3BsaWNlKGRpbWVuc2lvbnMubGVuZ3RoIC0gMSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpbWVuc2lvbnMuaW5kZXhPZihNYXRoLm1heChzdWJqZWN0LCB0YXJnZXQpKSA+PSBkaW1lbnNpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICd3cm9uZyBpbmRleCc7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViamVjdCA+IHRhcmdldCkge1xuICAgICAgICAgICAgYnVmZmVyID0gZGltZW5zaW9uc1tzdWJqZWN0XTtcbiAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgLSAxOyBpID49IHRhcmdldDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgZGltZW5zaW9uc1tpICsgMV0gPSBkaW1lbnNpb25zW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGltZW5zaW9uc1t0YXJnZXRdID0gYnVmZmVyO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGRpbWVuc2lvbnNbc3ViamVjdF07XG4gICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0ICsgMTsgaSA8PSB0YXJnZXQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnNbaSAtIDFdID0gZGltZW5zaW9uc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpbWVuc2lvbnNbdGFyZ2V0XSA9IGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZUNyb3NzdGFiKCk7XG4gICAgfVxuXG4gICAgY29sRGltUmVvcmRlciAoc3ViamVjdCwgdGFyZ2V0KSB7XG4gICAgICAgIHZhciBidWZmZXIgPSAnJyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBtZWFzdXJlcyA9IHRoaXMubWVhc3VyZXM7XG4gICAgICAgIGlmICh0aGlzLm1lYXN1cmVPblJvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIG1lYXN1cmVzLnNwbGljZShtZWFzdXJlcy5sZW5ndGggLSAxLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVhc3VyZXMuaW5kZXhPZihNYXRoLm1heChzdWJqZWN0LCB0YXJnZXQpKSA+PSBtZWFzdXJlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnd3JvbmcgaW5kZXgnO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPiB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG1lYXN1cmVzW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCAtIDE7IGkgPj0gdGFyZ2V0OyBpLS0pIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlc1tpICsgMV0gPSBtZWFzdXJlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lYXN1cmVzW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViamVjdCA8IHRhcmdldCkge1xuICAgICAgICAgICAgYnVmZmVyID0gbWVhc3VyZXNbc3ViamVjdF07XG4gICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0ICsgMTsgaSA8PSB0YXJnZXQ7IGkrKykge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVzW2kgLSAxXSA9IG1lYXN1cmVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVhc3VyZXNbdGFyZ2V0XSA9IGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyZWF0ZUNyb3NzdGFiKCk7XG4gICAgfVxuXG4gICAgbWVyZ2VEaW1lbnNpb25zICgpIHtcbiAgICAgICAgbGV0IGRpbWVuc2lvbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBkaW1lbnNpb25zLnB1c2godGhpcy5kaW1lbnNpb25zW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMubWVhc3VyZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBkaW1lbnNpb25zLnB1c2godGhpcy5tZWFzdXJlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpbWVuc2lvbnM7XG4gICAgfVxuXG4gICAgY3JlYXRlRmlsdGVycyAoKSB7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gW10sXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIGlpID0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICBqID0gMCxcbiAgICAgICAgICAgIGpqID0gMCxcbiAgICAgICAgICAgIG1hdGNoZWRWYWx1ZXM7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIG1hdGNoZWRWYWx1ZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW2ldXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gbWF0Y2hlZFZhbHVlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlckdlbih0aGlzLmRpbWVuc2lvbnNbaV0sIG1hdGNoZWRWYWx1ZXNbal0udG9TdHJpbmcoKSksXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlclZhbDogbWF0Y2hlZFZhbHVlc1tqXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH1cblxuICAgIGNyZWF0ZURhdGFDb21ib3MgKCkge1xuICAgICAgICBsZXQgciA9IFtdLFxuICAgICAgICAgICAgZ2xvYmFsQXJyYXkgPSB0aGlzLm1ha2VHbG9iYWxBcnJheSgpLFxuICAgICAgICAgICAgbWF4ID0gZ2xvYmFsQXJyYXkubGVuZ3RoIC0gMTtcblxuICAgICAgICBmdW5jdGlvbiByZWN1cnNlIChhcnIsIGkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsID0gZ2xvYmFsQXJyYXlbaV0ubGVuZ3RoOyBqIDwgbDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBhcnIuc2xpY2UoMCk7XG4gICAgICAgICAgICAgICAgYS5wdXNoKGdsb2JhbEFycmF5W2ldW2pdKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHIucHVzaChhKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWN1cnNlKGEsIGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVjdXJzZShbXSwgMCk7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cblxuICAgIG1ha2VHbG9iYWxBcnJheSAoKSB7XG4gICAgICAgIGxldCB0ZW1wT2JqID0ge30sXG4gICAgICAgICAgICB0ZW1wQXJyID0gW107XG5cbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMuZ2xvYmFsRGF0YSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleSAhPT0gdGhpcy5tZWFzdXJlKSB7XG4gICAgICAgICAgICAgICAgdGVtcE9ialtrZXldID0gdGhpcy5nbG9iYWxEYXRhW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGVtcEFyciA9IE9iamVjdC5rZXlzKHRlbXBPYmopLm1hcChrZXkgPT4gdGVtcE9ialtrZXldKTtcbiAgICAgICAgcmV0dXJuIHRlbXBBcnI7XG4gICAgfVxuXG4gICAgZ2V0RmlsdGVySGFzaE1hcCAoKSB7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gdGhpcy5jcmVhdGVGaWx0ZXJzKCksXG4gICAgICAgICAgICBkYXRhQ29tYm9zID0gdGhpcy5jcmVhdGVEYXRhQ29tYm9zKCksXG4gICAgICAgICAgICBoYXNoTWFwID0ge307XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBkYXRhQ29tYm9zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgbGV0IGRhdGFDb21ibyA9IGRhdGFDb21ib3NbaV0sXG4gICAgICAgICAgICAgICAga2V5ID0gJycsXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGxlbiA9IGRhdGFDb21iby5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwLCBsZW5ndGggPSBmaWx0ZXJzLmxlbmd0aDsgayA8IGxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJWYWwgPSBmaWx0ZXJzW2tdLmZpbHRlclZhbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFDb21ib1tqXSA9PT0gZmlsdGVyVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSArPSBkYXRhQ29tYm9bal07XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSArPSAnfCcgKyBkYXRhQ29tYm9bal07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKGZpbHRlcnNba10uZmlsdGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNoTWFwO1xuICAgIH1cblxuICAgIHVwZGF0ZU1hdHJpeCAoY3Jvc3N0YWIsIG1hdHJpeCkge1xuICAgICAgICBsZXQgZ2xvYmFsTWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgZ2xvYmFsTWluID0gSW5maW5pdHk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvd0xhc3RDaGFydCA9IGNyb3NzdGFiW2ldW2Nyb3NzdGFiW2ldLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHJvd0xhc3RDaGFydC5tYXggfHwgcm93TGFzdENoYXJ0Lm1pbikge1xuICAgICAgICAgICAgICAgIGlmIChnbG9iYWxNYXggPCByb3dMYXN0Q2hhcnQubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbE1heCA9IHJvd0xhc3RDaGFydC5tYXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnbG9iYWxNaW4gPiByb3dMYXN0Q2hhcnQubWluKSB7XG4gICAgICAgICAgICAgICAgICAgIGdsb2JhbE1pbiA9IHJvd0xhc3RDaGFydC5taW47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdHJpeC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gbWF0cml4W2ldLFxuICAgICAgICAgICAgICAgIHJvd0F4aXM7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gcm93W2pdLFxuICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQgPSBjcm9zc3RhYltpXVtqXTtcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3N0YWJFbGVtZW50LmNoYXJ0ICYmIGNyb3NzdGFiRWxlbWVudC5jaGFydC50eXBlID09PSAnYXhpcycpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93QXhpcyA9IGNlbGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dBeGlzLmNoYXJ0LmNoYXJ0Q29uZmlnLmRhdGFTb3VyY2UuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNaW4nOiBnbG9iYWxNaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNYXgnOiBnbG9iYWxNYXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogMTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93QXhpcy5jb25maWcuY2hhcnQuY29uZmlndXJhdGlvbiA9IGFkYXB0ZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dBeGlzLnVwZGF0ZShyb3dBeGlzLmNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJvd0F4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdjaGFydCcpIHx8IGNyb3NzdGFiRWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnaHRtbCcpKSAmJlxuICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaW1pdHMgPSByb3dBeGlzLmNoYXJ0LmNoYXJ0T2JqLmdldExpbWl0cygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbWl0ID0gbGltaXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExpbWl0ID0gbGltaXRzWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gdGhpcy5nZXRDaGFydE9iaihjcm9zc3RhYkVsZW1lbnQucm93SGFzaCwgY3Jvc3N0YWJFbGVtZW50LmNvbEhhc2gpWzFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQuY29uZmlndXJhdGlvbi5GQ2pzb24uY2hhcnQueUF4aXNNaW5WYWx1ZSA9IG1pbkxpbWl0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQuY29uZmlndXJhdGlvbi5GQ2pzb24uY2hhcnQueUF4aXNNYXhWYWx1ZSA9IG1heExpbWl0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jb25maWcuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydCA9IGNoYXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC51cGRhdGUoY2VsbC5jb25maWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3ZlcmluJywgKGV2dCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdHJpeC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSBjcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dbal0uY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQudHlwZSA9PT0gJ2NhcHRpb24nIHx8IHJvd1tqXS5jaGFydC50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsQWRhcHRlciA9IHJvd1tqXS5jaGFydC5jb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSB0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlWYWwgPSBkYXRhLmRhdGFbY2F0ZWdvcnldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoY2F0ZWdvcnlWYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWMuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXJvdXQnLCAoZXZ0LCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBtYXRyaXgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSBjcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93W2pdLmNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQudHlwZSA9PT0gJ2NhcHRpb24nIHx8IHJvd1tqXS5jaGFydC50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxBZGFwdGVyID0gcm93W2pdLmNoYXJ0LmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFkYXB0ZXIuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlbmRlckNyb3NzdGFiICgpIHtcbiAgICAgICAgbGV0IGNyb3NzdGFiID0gdGhpcy5jcmVhdGVDcm9zc3RhYigpLFxuICAgICAgICAgICAgc3BhY2VNYW5hZ2VyLFxuICAgICAgICAgICAgbWF0cml4ID0gW107XG4gICAgICAgIHNwYWNlTWFuYWdlciA9IG5ldyBTcGFjZU1hbmFnZXIodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICBzcGFjZU1hbmFnZXIubWFuYWdlU3BhY2UoY3Jvc3N0YWIsIChtYW5hZ2VkQ3QpID0+IHtcbiAgICAgICAgICAgIG1hdHJpeCA9IHRoaXMuY3JlYXRlTXVsdGlDaGFydChtYW5hZ2VkQ3QpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYXRyaXgobWFuYWdlZEN0LCBtYXRyaXgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVNdWx0aUNoYXJ0IChtYXRyaXgpIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGljaGFydE9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QgPSB0aGlzLm1jLmNyZWF0ZU1hdHJpeCh0aGlzLmNyb3NzdGFiQ29udGFpbmVyLCBtYXRyaXgpO1xuICAgICAgICAgICAgdGhpcy5tdWx0aWNoYXJ0T2JqZWN0LmRyYXcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdC51cGRhdGUobWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdMaXN0ZW5lcih0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXI7XG4gICAgfVxuXG4gICAgcGVybXV0ZUFyciAoYXJyKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHBlcm11dGUgKGFyciwgbWVtKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgICAgIG1lbSA9IG1lbSB8fCBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobWVtLmNvbmNhdChjdXJyZW50KS5qb2luKCd8JykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZXJtdXRlKGFyci5zbGljZSgpLCBtZW0uY29uY2F0KGN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGksIDAsIGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBlcm11dGVTdHJzID0gcGVybXV0ZShhcnIpO1xuICAgICAgICByZXR1cm4gcGVybXV0ZVN0cnMuam9pbignKiElXicpO1xuICAgIH1cblxuICAgIG1hdGNoSGFzaCAoZmlsdGVyU3RyLCBoYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBoYXNoKSB7XG4gICAgICAgICAgICBpZiAoaGFzaC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBrZXkuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgICAgICAgICAga2V5UGVybXV0YXRpb25zID0gdGhpcy5wZXJtdXRlQXJyKGtleXMpLnNwbGl0KCcqISVeJyk7XG4gICAgICAgICAgICAgICAgaWYgKGtleVBlcm11dGF0aW9ucy5pbmRleE9mKGZpbHRlclN0cikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlQZXJtdXRhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDaGFydE9iaiAocm93RmlsdGVyLCBjb2xGaWx0ZXIpIHtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSBbXSxcbiAgICAgICAgICAgIGZpbHRlclN0ciA9ICcnLFxuICAgICAgICAgICAgcm93RmlsdGVycyA9IHJvd0ZpbHRlci5zcGxpdCgnfCcpLFxuICAgICAgICAgICAgZGF0YVByb2Nlc3NvcnMgPSBbXSxcbiAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IgPSB7fSxcbiAgICAgICAgICAgIG1hdGNoZWRIYXNoZXMgPSBbXSxcbiAgICAgICAgICAgIC8vIGZpbHRlcmVkSlNPTiA9IFtdLFxuICAgICAgICAgICAgLy8gbWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgLy8gbWluID0gSW5maW5pdHksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSB7fSxcbiAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7fSxcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB7fSxcbiAgICAgICAgICAgIGxpbWl0cyA9IHt9LFxuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IHRoaXMuZ2xvYmFsRGF0YVt0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdXTtcblxuICAgICAgICByb3dGaWx0ZXJzLnB1c2guYXBwbHkocm93RmlsdGVycyk7XG4gICAgICAgIGZpbHRlcnMgPSByb3dGaWx0ZXJzLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChhICE9PSAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWx0ZXJTdHIgPSBmaWx0ZXJzLmpvaW4oJ3wnKTtcbiAgICAgICAgbWF0Y2hlZEhhc2hlcyA9IHRoaXMuaGFzaFt0aGlzLm1hdGNoSGFzaChmaWx0ZXJTdHIsIHRoaXMuaGFzaCldO1xuICAgICAgICBpZiAobWF0Y2hlZEhhc2hlcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbWF0Y2hlZEhhc2hlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YVByb2Nlc3NvciA9IHRoaXMubWMuY3JlYXRlRGF0YVByb2Nlc3NvcigpO1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IuZmlsdGVyKG1hdGNoZWRIYXNoZXNbaV0pO1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzLnB1c2goZGF0YVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSB0aGlzLmRhdGFTdG9yZS5nZXRDaGlsZE1vZGVsKGRhdGFQcm9jZXNzb3JzKTtcbiAgICAgICAgICAgIC8vIGZpbHRlcmVkSlNPTiA9IGZpbHRlcmVkRGF0YS5nZXRKU09OKCk7XG4gICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWx0ZXJlZEpTT04ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgIGlmIChmaWx0ZXJlZEpTT05baV1bY29sRmlsdGVyXSA+IG1heCkge1xuICAgICAgICAgICAgLy8gICAgICAgICBtYXggPSBmaWx0ZXJlZEpTT05baV1bY29sRmlsdGVyXTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgaWYgKGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdIDwgbWluKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIG1pbiA9IGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbjogW3RoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dLFxuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlOiBbY29sRmlsdGVyXSxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzVHlwZTogJ1NTJyxcbiAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRlTW9kZTogdGhpcy5hZ2dyZWdhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB0aGlzLmNoYXJ0Q29uZmlnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmU6IGZpbHRlcmVkRGF0YVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgbGltaXRzID0gYWRhcHRlci5nZXRMaW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgJ21heCc6IGxpbWl0cy5tYXgsXG4gICAgICAgICAgICAgICAgJ21pbic6IGxpbWl0cy5taW5cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLmNoYXJ0VHlwZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb246IGFkYXB0ZXJcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhZ0xpc3RlbmVyIChwbGFjZUhvbGRlcikge1xuICAgICAgICAvLyBHZXR0aW5nIG9ubHkgbGFiZWxzXG4gICAgICAgIGxldCBvcmlnQ29uZmlnID0gdGhpcy5zdG9yZVBhcmFtcy5jb25maWcsXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gb3JpZ0NvbmZpZy5kaW1lbnNpb25zIHx8IFtdLFxuICAgICAgICAgICAgbWVhc3VyZXMgPSBvcmlnQ29uZmlnLm1lYXN1cmVzIHx8IFtdLFxuICAgICAgICAgICAgbWVhc3VyZXNMZW5ndGggPSBtZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICBkaW1lbnNpb25zTGVuZ3RoID0gMCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnNIb2xkZXIsXG4gICAgICAgICAgICBtZWFzdXJlc0hvbGRlcixcbiAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyBsZXQgZW5kXG4gICAgICAgIHBsYWNlSG9sZGVyID0gcGxhY2VIb2xkZXJbMV07XG4gICAgICAgIC8vIE9taXR0aW5nIGxhc3QgZGltZW5zaW9uXG4gICAgICAgIGRpbWVuc2lvbnMgPSBkaW1lbnNpb25zLnNsaWNlKDAsIGRpbWVuc2lvbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIGRpbWVuc2lvbnNMZW5ndGggPSBkaW1lbnNpb25zLmxlbmd0aDtcbiAgICAgICAgLy8gU2V0dGluZyB1cCBkaW1lbnNpb24gaG9sZGVyXG4gICAgICAgIGRpbWVuc2lvbnNIb2xkZXIgPSBwbGFjZUhvbGRlci5zbGljZSgwLCBkaW1lbnNpb25zTGVuZ3RoKTtcbiAgICAgICAgLy8gU2V0dGluZyB1cCBtZWFzdXJlcyBob2xkZXJcbiAgICAgICAgLy8gT25lIHNoaWZ0IGZvciBibGFuayBib3hcbiAgICAgICAgbWVhc3VyZXNIb2xkZXIgPSBwbGFjZUhvbGRlci5zbGljZShkaW1lbnNpb25zTGVuZ3RoICsgMSwgZGltZW5zaW9uc0xlbmd0aCArIG1lYXN1cmVzTGVuZ3RoICsgMSk7XG4gICAgICAgIHNldHVwTGlzdGVuZXIoZGltZW5zaW9uc0hvbGRlciwgZGltZW5zaW9ucywgZGltZW5zaW9uc0xlbmd0aCwgdGhpcy5kaW1lbnNpb25zKTtcbiAgICAgICAgc2V0dXBMaXN0ZW5lcihtZWFzdXJlc0hvbGRlciwgbWVhc3VyZXMsIG1lYXN1cmVzTGVuZ3RoLCB0aGlzLm1lYXN1cmVzKTtcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBMaXN0ZW5lciAoaG9sZGVyLCBhcnIsIGFyckxlbiwgZ2xvYmFsQXJyKSB7XG4gICAgICAgICAgICBsZXQgbGltaXRMZWZ0ID0gMCxcbiAgICAgICAgICAgICAgICBsaW1pdFJpZ2h0ID0gMCxcbiAgICAgICAgICAgICAgICBsYXN0ID0gYXJyTGVuIC0gMSxcbiAgICAgICAgICAgICAgICBsbiA9IE1hdGgubG9nMjtcblxuICAgICAgICAgICAgaWYgKGhvbGRlclswXSkge1xuICAgICAgICAgICAgICAgIGxpbWl0TGVmdCA9IHBhcnNlSW50KGhvbGRlclswXS5ncmFwaGljcy5zdHlsZS5sZWZ0KTtcbiAgICAgICAgICAgICAgICBsaW1pdFJpZ2h0ID0gcGFyc2VJbnQoaG9sZGVyW2xhc3RdLmdyYXBoaWNzLnN0eWxlLmxlZnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsID0gaG9sZGVyW2ldLmdyYXBoaWNzLFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gaG9sZGVyW2ldLFxuICAgICAgICAgICAgICAgICAgICBuTGVmdCA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGRpZmYgPSAwO1xuICAgICAgICAgICAgICAgIGl0ZW0uY2VsbFZhbHVlID0gYXJyW2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ0xlZnQgPSBwYXJzZUludChlbC5zdHlsZS5sZWZ0KTtcbiAgICAgICAgICAgICAgICBpdGVtLnJlZFpvbmUgPSBpdGVtLm9yaWdMZWZ0ICsgcGFyc2VJbnQoZWwuc3R5bGUud2lkdGgpIC8gMjtcbiAgICAgICAgICAgICAgICBpdGVtLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpdGVtLmFkanVzdCA9IDA7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmlnWiA9IGVsLnN0eWxlLnpJbmRleDtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXR1cERyYWcoaXRlbS5ncmFwaGljcywgZnVuY3Rpb24gZHJhZ1N0YXJ0IChkeCwgZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSBpdGVtLm9yaWdMZWZ0ICsgZHggKyBpdGVtLmFkanVzdDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5MZWZ0IDwgbGltaXRMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbGltaXRMZWZ0IC0gbkxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBuTGVmdCA9IGxpbWl0TGVmdCAtIGxuKGRpZmYpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChuTGVmdCA+IGxpbWl0UmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpZmYgPSBuTGVmdCAtIGxpbWl0UmlnaHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBuTGVmdCA9IGxpbWl0UmlnaHQgKyBsbihkaWZmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gbkxlZnQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS56SW5kZXggPSAxMDAwO1xuICAgICAgICAgICAgICAgICAgICBtYW5hZ2VTaGlmdGluZyhpdGVtLmluZGV4LCBmYWxzZSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlU2hpZnRpbmcoaXRlbS5pbmRleCwgdHJ1ZSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBkcmFnRW5kICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoYW5nZSA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uYWRqdXN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gaXRlbS5vcmlnWjtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGl0ZW0ub3JpZ0xlZnQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaiA8IGFyckxlbjsgKytqKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsQXJyW2pdICE9PSBob2xkZXJbal0uY2VsbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsQXJyW2pdID0gaG9sZGVyW2pdLmNlbGxWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmdsb2JhbERhdGEgPSBzZWxmLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVuZGVyQ3Jvc3N0YWIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFuYWdlU2hpZnRpbmcgKGluZGV4LCBpc1JpZ2h0LCBob2xkZXIpIHtcbiAgICAgICAgICAgIGxldCBzdGFjayA9IFtdLFxuICAgICAgICAgICAgICAgIGRyYWdJdGVtID0gaG9sZGVyW2luZGV4XSxcbiAgICAgICAgICAgICAgICBuZXh0UG9zID0gaXNSaWdodCA/IGluZGV4ICsgMSA6IGluZGV4IC0gMSxcbiAgICAgICAgICAgICAgICBuZXh0SXRlbSA9IGhvbGRlcltuZXh0UG9zXTtcbiAgICAgICAgICAgIC8vIFNhdmluZyBkYXRhIGZvciBsYXRlciB1c2VcbiAgICAgICAgICAgIGlmIChuZXh0SXRlbSkge1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goIWlzUmlnaHQgJiYgKHBhcnNlSW50KGRyYWdJdGVtLmdyYXBoaWNzLnN0eWxlLmxlZnQpIDwgbmV4dEl0ZW0ucmVkWm9uZSkpO1xuICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goc3RhY2sucG9wKCkgfHwgKGlzUmlnaHQgJiYgcGFyc2VJbnQoZHJhZ0l0ZW0uZ3JhcGhpY3Muc3R5bGUubGVmdCkgPiBuZXh0SXRlbS5vcmlnTGVmdCkpO1xuICAgICAgICAgICAgICAgIGlmIChzdGFjay5wb3AoKSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5leHRJdGVtLnJlZFpvbmUpO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5leHRJdGVtLm9yaWdMZWZ0KTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNSaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0l0ZW0uYWRqdXN0ICs9IHBhcnNlSW50KG5leHRJdGVtLmdyYXBoaWNzLnN0eWxlLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLmFkanVzdCAtPSBwYXJzZUludChuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0ub3JpZ0xlZnQgPSBkcmFnSXRlbS5vcmlnTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0ucmVkWm9uZSA9IGRyYWdJdGVtLnJlZFpvbmU7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLmluZGV4ID0gZHJhZ0l0ZW0uaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLmdyYXBoaWNzLnN0eWxlLmxlZnQgPSBuZXh0SXRlbS5vcmlnTGVmdCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goaG9sZGVyW25leHRQb3NdKTtcbiAgICAgICAgICAgICAgICAgICAgaG9sZGVyW25leHRQb3NdID0gaG9sZGVyW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaG9sZGVyW2luZGV4XSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFNldHRpbmcgbmV3IHZhbHVlcyBmb3IgZHJhZ2l0ZW1cbiAgICAgICAgICAgIGlmIChzdGFjay5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgICAgICBkcmFnSXRlbS5pbmRleCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRyYWdJdGVtLm9yaWdMZWZ0ID0gc3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgZHJhZ0l0ZW0ucmVkWm9uZSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldHVwRHJhZyAoZWwsIGhhbmRsZXIsIGhhbmRsZXIyKSB7XG4gICAgICAgIGxldCB4ID0gMCxcbiAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICBmdW5jdGlvbiBjdXN0b21IYW5kbGVyIChlKSB7XG4gICAgICAgICAgICBoYW5kbGVyKGUuY2xpZW50WCAtIHgsIGUuY2xpZW50WSAtIHkpO1xuICAgICAgICB9XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB4ID0gZS5jbGllbnRYO1xuICAgICAgICAgICAgeSA9IGUuY2xpZW50WTtcbiAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwLjg7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKCdkcmFnZ2luZycpO1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGN1c3RvbUhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtb3VzZVVwSGFuZGxlciAoZSkge1xuICAgICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGN1c3RvbUhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG4gICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChoYW5kbGVyMiwgMTApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlsdGVyR2VuIChrZXksIHZhbCkge1xuICAgICAgICByZXR1cm4gKGRhdGEpID0+IGRhdGFba2V5XSA9PT0gdmFsO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDcm9zc3RhYkV4dDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jcm9zc3RhYkV4dC5qcyIsImNsYXNzIFNwYWNlTWFuYWdlciB7XG4gICAgY29uc3RydWN0b3IgKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICB9XG4gICAgbWFuYWdlU3BhY2UgKGNyb3NzdGFiLCBjYikge1xuICAgICAgICBsZXQgbWFuYWdlZENyb3NzdGFiID0gY3Jvc3N0YWIuc2xpY2UoKTtcbiAgICAgICAgY2IobWFuYWdlZENyb3NzdGFiKTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICBjb25zb2xlLmxvZyhtYW5hZ2VkQ3Jvc3N0YWIpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTcGFjZU1hbmFnZXI7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc3BhY2VNYW5hZ2VyLmpzIiwibW9kdWxlLmV4cG9ydHMgPSBbXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTEsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxM1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE2XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDIsXG4gICAgICAgICdWaXNpdG9ycyc6IDlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMyxcbiAgICAgICAgJ1Byb2ZpdCc6IDEsXG4gICAgICAgICdWaXNpdG9ycyc6IDlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDEyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogMTMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDE5XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMyxcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA4LFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDEwLFxuICAgICAgICAnVmlzaXRvcnMnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDEwLFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDEzXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogMTMsXG4gICAgICAgICdWaXNpdG9ycyc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDE5XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA5LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA3LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH1cbl07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGFyZ2VEYXRhLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==