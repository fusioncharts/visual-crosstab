/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={dimensions:['Product','State','Month'],measures:['Profit','Visitors','Sale'],chartType:'column2d',noDataMessage:'No data to display.',crosstabContainer:'crosstab-div',// cellWidth: 210,
	// cellHeight: 113,
	// showFilter: false,
	// draggableHeaders: true,
	// aggregation: 'sum',
	chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',rollOverBandColor:'#B2B6DD',columnHoverColor:'#616FF9',chartBottomMargin:'10',chartTopMargin:'10',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#FFFFFF',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'0',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#FFFFFF',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.eventList={modelUpdated:'modelupdated',modelDeleted:'modeldeleted',metaInfoUpdate:'metainfoupdated',processorUpdated:'processorupdated',processorDeleted:'processordeleted'},this.data=b,'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now();else return{test:function(f){return f}};this.storeParams={data:b,config:c},this.chartType=c.chartType,this.showFilter=c.showFilter||!1,this.draggableHeaders=c.draggableHeaders||!1,this.chartConfig=c.chartConfig,this.dimensions=c.dimensions,this.measures=c.measures,this.measureOnRow=!1,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=c.cellWidth||210,this.cellHeight=c.cellHeight||113,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation||'sum',this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&this.showFilter&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.dataStore.addEventListener(this.eventList.modelUpdated,()=>{this.globalData=this.buildGlobalData(),this.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let f=0,g=b.length;f<g;f++)c[b[f]]=this.dataStore.getUniqueValues(b[f]);return c}return!1}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this.columnKeyArr.length,z=1/0,A=-(1/0),B={};for(p=0;p<q;p+=1){let C='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',C+='row-dimensions '+this.dimensions[g].toLowerCase()+' '+o[p].toLowerCase()+' no-select',w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:C},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{let D=this.mc.dataAdapter({config:{config:{chart:{axisType:'y'}}}});b[b.length-1].push({rowspan:1,colspan:1,width:40,className:'y-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:D}});for(let E=0;E<v;E+=1){let F={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this.columnKeyArr[E]};b[b.length-1].push(F),B=this.getChartObj(u,this.columnKeyArr[E])[0],A=parseInt(B.max)>A?B.max:A,z=parseInt(B.min)<z?B.min:z,F.max=A,F.min=z}}m+=s.rowspan}return m}// createCol (table, data, colOrder, currentIndex, filteredDataStore) {
	//     var colspan = 0,
	//         fieldComponent = colOrder[currentIndex],
	//         fieldValues = data[fieldComponent],
	//         i, l = fieldValues.length,
	//         colElement,
	//         hasFurtherDepth = currentIndex < (colOrder.length - 1),
	//         filteredDataHashKey,
	//         htmlRef;
	//     if (table.length <= currentIndex) {
	//         table.push([]);
	//     }
	//     for (i = 0; i < l; i += 1) {
	//         let classStr = '';
	//         htmlRef = document.createElement('p');
	//         htmlRef.innerHTML = fieldValues[i];
	//         htmlRef.style.textAlign = 'center';
	//         document.body.appendChild(htmlRef);
	//         classStr += 'column-dimensions' +
	//             ' ' + this.measures[currentIndex] +
	//             ' ' + fieldValues[i].toLowerCase();
	//         this.cornerHeight = htmlRef.offsetHeight;
	//         document.body.removeChild(htmlRef);
	//         colElement = {
	//             width: this.cellWidth,
	//             height: this.cornerHeight,
	//             rowspan: 1,
	//             colspan: 1,
	//             html: htmlRef.outerHTML,
	//             className: classStr
	//         };
	//         filteredDataHashKey = filteredDataStore + fieldValues[i] + '|';
	//         table[currentIndex].push(colElement);
	//         if (hasFurtherDepth) {
	//             colElement.colspan = this.createCol(table, data, colOrder, currentIndex + 1, filteredDataHashKey);
	//         } else {
	//             this.columnKeyArr.push(filteredDataHashKey);
	//         }
	//         colspan += colElement.colspan;
	//     }
	//     return colspan;
	// }
	createCol(b,c,f){var g,m,n,h=this.measures.length;for(g=0;g<h;g+=1){let o='',p=f[g];// fieldValues = data[fieldComponent];
	n=document.createElement('p'),n.innerHTML=p,n.style.textAlign='center',n.style.marginTop='6px',document.body.appendChild(n),o+='column-dimensions '+this.measures[g].toLowerCase()+' no-select',this.draggableHeaders&&(o+=' draggable'),this.cornerHeight=n.offsetHeight,document.body.removeChild(n),m={width:this.cellWidth,height:30,rowspan:1,colspan:1,html:n.outerHTML,className:o},this.columnKeyArr.push(this.measures[g]),b[0].push(m)}return 0}createRowDimHeading(){var f,b=[],c=0,g='';for(c=0;c<this.dimensions.length-1;c++)f=document.createElement('p'),f.innerHTML=this.dimensions[c][0].toUpperCase()+this.dimensions[c].substr(1),f.style.textAlign='center',f.style.marginTop='6px',g='corner-cell no-select',this.draggableHeaders&&(g+=' draggable'),b.push({width:10*this.dimensions[c],height:30,rowspan:1,colspan:1,html:f.outerHTML,className:g});return b}createColDimHeading(b,c){for(var g,f=c;f<b.length;f++)g=document.createElement('p'),g.innerHTML='',g.style.textAlign='center',b[f].push({width:40,height:30,rowspan:1,colspan:1,html:g.outerHTML,className:'axis-header-cell'});return b}createCaption(b,c){let f=this.mc.dataAdapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:f}}]),b}createCrosstab(){var b=this,c=this.globalData,f=this.dimensions.filter(function(p,q,s){if(p!==s[s.length-1])return!0}),g=this.measures.filter(function(p,q,s){if(b.measureOnRow)return!0;return p!==s[s.length-1]||void 0}),h=[],m=[],n=0,o=0;if(c){for(h.push(this.createRowDimHeading(h,g.length)),h=this.createColDimHeading(h,0),this.createCol(h,c,this.measures),h.push([]),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;for(n=0;n<this.dimensions.length-1;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});// Extra cell for y axis. Essentially Y axis footer.
	for(m.push({rowspan:1,colspan:1,height:30,width:40,className:'axis-footer-cell'}),n=0;n<o-this.dimensions.length;n++){let p=this.globalData[this.dimensions[this.dimensions.length-1]],q=this.mc.dataAdapter({config:{config:{chart:{axisType:'x',borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:p}}});m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:q}})}h.push(m),h=this.createCaption(h,o),this.columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return h}rowDimReorder(b,c){var g,f='',h=this.dimensions;if(!0===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}colDimReorder(b,c){var g,f='',h=this.measures;if(!1===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,f=this.dimensions.length;c<f;c++)b.push(this.dimensions[c]);for(let c=0,f=this.measures.length;c<f;c++)b.push(this.measures[c]);return b}createFilters(){let m,b=[],c=0,f=this.dimensions.length-1,g=0,h=0;for(c=0;c<f;c++)for(m=this.globalData[this.dimensions[c]],g=0,h=m.length;g<h;g++)b.push({filter:this.filterGen(this.dimensions[c],m[g].toString()),filterVal:m[g]});return b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&f!==this.measure&&(b[f]=this.globalData[f]);return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}renderCrosstab(){let b=this.createCrosstab(),c=this.createMultiChart(b),f=performance.now(),g=-(1/0),h=1/0;for(let m=0,n=b.length;m<n;m++){let o=b[m][b[m].length-1];(o.max||o.min)&&(g<o.max&&(g=o.max),h>o.min&&(h=o.min))}for(let m=0,n=c.length;m<n;m++){let p,o=c[m];for(let q=0,s=o.length;q<s;q++){let t=o[q],u=b[m][q];if(u.chart&&'axis'===u.chart.type&&(p=t,'y'===p.chart.chartConfig.dataSource.chart.axisType)){let v={config:{config:{chart:{dataMin:h,axisType:'y',dataMax:g,borderthickness:0,chartBottomMargin:10,chartTopMargin:10}}}},w=this.mc.dataAdapter(v);p.config.chart.configuration=w,p.update(p.config)}if(p){if(!(u.hasOwnProperty('chart')||u.hasOwnProperty('html'))&&'blank-cell'!==u.className){let v=p.chart.chartObj.getLimits(),w=v[0],z=v[1],A=this.getChartObj(u.rowHash,u.colHash)[1];A.configuration.FCjson.chart.yAxisMinValue=w,A.configuration.FCjson.chart.yAxisMaxValue=z,t.config.chart=A,u.chart=A,window.ctPerf+=performance.now()-f,t.update(t.config)}f=performance.now()}}}this.mc.addEventListener('hoverin',(m,n)=>{if(n.data)for(let p=0,q=c.length;p<q;p++){let s=b[p];for(var o=0;o<s.length;o++)if(s[o].chart&&'caption'!==s[o].chart.type&&'axis'!==s[o].chart.type){let t=s[o].chart.configuration,u=this.dimensions[this.dimensions.length-1],v=n.data[u];t.highlight(v)}}}),this.mc.addEventListener('hoverout',()=>{for(let n=0,o=c.length;n<o;n++){let p=b[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.type&&'axis'!==p[m].chart.type){let q=p[m].chart.configuration;q.highlight()}}})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(b),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c){let f=[],g='',h=b.split('|'),m=[],n={},o=[],// filteredJSON = [],
	// max = -Infinity,
	// min = Infinity,
	p={},q={},s={},t={},u=this.globalData[this.dimensions[this.dimensions.length-1]];if(h.push.apply(h),f=h.filter(v=>{return''!==v}),g=f.join('|'),o=this.hash[this.matchHash(g,this.hash)],o){for(let v=0,w=o.length;v<w;v++)n=this.mc.createDataProcessor(),n.filter(o[v]),m.push(n);return p=this.dataStore.getChildModel(m),q={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[c],seriesType:'SS',aggregateMode:this.aggregation,categories:u,config:this.chartConfig},datastore:p},s=this.mc.dataAdapter(q),t=s.getLimit(),[{max:t.max,min:t.min},{type:this.chartType,width:'100%',height:'100%',configuration:s}]}}dragListener(b){function c(t,u,v,w){for(let z=0;z<v;++z){let A=t[z].graphics,B=t[z];B.cellValue=u[z],B.origLeft=parseInt(A.style.left),B.redZone=B.origLeft+parseInt(A.style.width)/2,B.index=z,B.adjust=0,B.origZ=A.style.zIndex,s._setupDrag(B.graphics,function(D){A.style.left=B.origLeft+D+B.adjust+'px',A.style.zIndex=1e3,f(B.index,!1,t),f(B.index,!0,t)},function(){let D=!1,E=0;for(B.adjust=0,A.style.zIndex=B.origZ,A.style.left=B.origLeft+'px';E<v;++E)w[E]!==t[E].cellValue&&(w[E]=t[E].cellValue,D=!0);D&&window.setTimeout(function(){s.globalData=s.buildGlobalData(),s.renderCrosstab()},10)})}}function f(t,u,v){let w=[],z=v[t],A=u?t+1:t-1,B=v[A];// Saving data for later use
	B&&(w.push(!u&&parseInt(z.graphics.style.left)<B.redZone),w.push(w.pop()||u&&parseInt(z.graphics.style.left)>B.origLeft),w.pop()&&(w.push(B.redZone),w.push(B.origLeft),w.push(B.index),u?z.adjust-=parseInt(B.graphics.style.width):z.adjust+=parseInt(B.graphics.style.width),B.origLeft=z.origLeft,B.redZone=z.redZone,B.index=z.index,B.graphics.style.left=B.origLeft+'px',w.push(v[A]),v[A]=v[t],v[t]=w.pop())),3===w.length&&(z.index=w.pop(),z.origLeft=w.pop(),z.redZone=w.pop())}// Getting only labels
	let p,q,g=this.storeParams.config,h=g.dimensions||[],m=g.measures||[],n=m.length,o=0,s=this;// let end
	b=b[1],h=h.slice(0,h.length-1),o=h.length,p=b.slice(0,o),q=b.slice(o+1,o+n+1),c(p,h,o,this.dimensions),c(q,m,n,this.measures)}_setupDrag(b,c,f){function g(o){c(o.clientX-m,o.clientY-n)}function h(){b.style.opacity=1,b.classList.remove('dragging'),window.document.removeEventListener('mousemove',g),window.document.removeEventListener('mouseup',h),window.setTimeout(f,10)}let m=0,n=0;b.addEventListener('mousedown',function(o){m=o.clientX,n=o.clientY,b.style.opacity=0.8,b.classList.add('dragging'),window.document.addEventListener('mousemove',g),window.document.addEventListener('mouseup',h)})}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZWM2NzZhZGY1NzhjYjRjM2Y5OTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jcm9zc3RhYkV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFyZ2VEYXRhLmpzIl0sIm5hbWVzIjpbIkNyb3NzdGFiRXh0IiwicmVxdWlyZSIsImRhdGEiLCJjb25maWciLCJkaW1lbnNpb25zIiwibWVhc3VyZXMiLCJjaGFydFR5cGUiLCJub0RhdGFNZXNzYWdlIiwiY3Jvc3N0YWJDb250YWluZXIiLCJjaGFydENvbmZpZyIsImNoYXJ0Iiwid2luZG93IiwiY3Jvc3N0YWIiLCJyZW5kZXJDcm9zc3RhYiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsImV2ZW50TGlzdCIsIk11bHRpQ2hhcnRpbmciLCJtYyIsImRhdGFTdG9yZSIsImNyZWF0ZURhdGFTdG9yZSIsInNldERhdGEiLCJkYXRhU291cmNlIiwidDEiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInRlc3QiLCJhIiwic3RvcmVQYXJhbXMiLCJzaG93RmlsdGVyIiwiZHJhZ2dhYmxlSGVhZGVycyIsIm1lYXN1cmVPblJvdyIsImdsb2JhbERhdGEiLCJidWlsZEdsb2JhbERhdGEiLCJjb2x1bW5LZXlBcnIiLCJjZWxsV2lkdGgiLCJjZWxsSGVpZ2h0IiwiaGFzaCIsImdldEZpbHRlckhhc2hNYXAiLCJjb3VudCIsImFnZ3JlZ2F0aW9uIiwiYXhlcyIsIkZDRGF0YUZpbHRlckV4dCIsImRhdGFGaWx0ZXJFeHQiLCJhZGRFdmVudExpc3RlbmVyIiwibW9kZWxVcGRhdGVkIiwiZ2V0S2V5cyIsImZpZWxkcyIsImkiLCJpaSIsImxlbmd0aCIsImdldFVuaXF1ZVZhbHVlcyIsImNyZWF0ZVJvdyIsInRhYmxlIiwicm93T3JkZXIiLCJjdXJyZW50SW5kZXgiLCJmaWx0ZXJlZERhdGFTdG9yZSIsInJvd0VsZW1lbnQiLCJmaWx0ZXJlZERhdGFIYXNoS2V5IiwiaHRtbFJlZiIsInJvd3NwYW4iLCJmaWVsZENvbXBvbmVudCIsImZpZWxkVmFsdWVzIiwibCIsImhhc0Z1cnRoZXJEZXB0aCIsImNvbExlbmd0aCIsIm1pbiIsIm1heCIsIm1pbm1heE9iaiIsImNsYXNzU3RyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwic3R5bGUiLCJ0ZXh0QWxpZ24iLCJtYXJnaW5Ub3AiLCJ0b0xvd2VyQ2FzZSIsInZpc2liaWxpdHkiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjb3JuZXJXaWR0aCIsInJlbW92ZUNoaWxkIiwid2lkdGgiLCJoZWlnaHQiLCJjb2xzcGFuIiwiaHRtbCIsIm91dGVySFRNTCIsImNsYXNzTmFtZSIsInB1c2giLCJhZGFwdGVyIiwiZGF0YUFkYXB0ZXIiLCJqIiwiY2hhcnRDZWxsT2JqIiwicm93SGFzaCIsImNvbEhhc2giLCJnZXRDaGFydE9iaiIsInBhcnNlSW50IiwiY3JlYXRlQ29sIiwibWVhc3VyZU9yZGVyIiwiY29sRWxlbWVudCIsImNvcm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsImNyZWF0ZVJvd0RpbUhlYWRpbmciLCJjb3JuZXJDZWxsQXJyIiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJjcmVhdGVDb2xEaW1IZWFkaW5nIiwiaW5kZXgiLCJjcmVhdGVDYXB0aW9uIiwibWF4TGVuZ3RoIiwidW5zaGlmdCIsImNyZWF0ZUNyb3NzdGFiIiwic2VsZiIsIm9iaiIsImZpbHRlciIsInZhbCIsImFyciIsImNvbE9yZGVyIiwieEF4aXNSb3ciLCJjYXRlZ29yaWVzIiwicm93RGltUmVvcmRlciIsInN1YmplY3QiLCJ0YXJnZXQiLCJidWZmZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiTWF0aCIsImNvbERpbVJlb3JkZXIiLCJtZXJnZURpbWVuc2lvbnMiLCJjcmVhdGVGaWx0ZXJzIiwibWF0Y2hlZFZhbHVlcyIsImZpbHRlcnMiLCJqaiIsImZpbHRlckdlbiIsInRvU3RyaW5nIiwiZmlsdGVyVmFsIiwiY3JlYXRlRGF0YUNvbWJvcyIsInJlY3Vyc2UiLCJnbG9iYWxBcnJheSIsInNsaWNlIiwiciIsIm1ha2VHbG9iYWxBcnJheSIsInRlbXBPYmoiLCJ0ZW1wQXJyIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJtZWFzdXJlIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImRhdGFDb21ib3MiLCJoYXNoTWFwIiwiZGF0YUNvbWJvIiwidmFsdWUiLCJsZW4iLCJrIiwibWF0cml4IiwiY3JlYXRlTXVsdGlDaGFydCIsInQyIiwiZ2xvYmFsTWF4IiwiZ2xvYmFsTWluIiwicm93TGFzdENoYXJ0Iiwicm93QXhpcyIsInJvdyIsImNlbGwiLCJjcm9zc3RhYkVsZW1lbnQiLCJ0eXBlIiwiYXhpc1R5cGUiLCJhZGFwdGVyQ2ZnIiwiY29uZmlndXJhdGlvbiIsInVwZGF0ZSIsImxpbWl0cyIsImNoYXJ0T2JqIiwiZ2V0TGltaXRzIiwibWluTGltaXQiLCJtYXhMaW1pdCIsIkZDanNvbiIsInlBeGlzTWluVmFsdWUiLCJ5QXhpc01heFZhbHVlIiwiY3RQZXJmIiwiZXZ0IiwiY2VsbEFkYXB0ZXIiLCJjYXRlZ29yeSIsImNhdGVnb3J5VmFsIiwiaGlnaGxpZ2h0IiwibXVsdGljaGFydE9iamVjdCIsImNyZWF0ZU1hdHJpeCIsImRyYXciLCJkcmFnTGlzdGVuZXIiLCJwbGFjZUhvbGRlciIsInBlcm11dGVBcnIiLCJwZXJtdXRlIiwibWVtIiwiY3VycmVudCIsInJlc3VsdHMiLCJjb25jYXQiLCJqb2luIiwicGVybXV0ZVN0cnMiLCJtYXRjaEhhc2giLCJmaWx0ZXJTdHIiLCJzcGxpdCIsImtleVBlcm11dGF0aW9ucyIsInJvd0ZpbHRlciIsImNvbEZpbHRlciIsInJvd0ZpbHRlcnMiLCJkYXRhUHJvY2Vzc29ycyIsImRhdGFQcm9jZXNzb3IiLCJtYXRjaGVkSGFzaGVzIiwiZmlsdGVyZWREYXRhIiwiYXBwbHkiLCJjcmVhdGVEYXRhUHJvY2Vzc29yIiwiZ2V0Q2hpbGRNb2RlbCIsImRpbWVuc2lvbiIsInNlcmllc1R5cGUiLCJhZ2dyZWdhdGVNb2RlIiwiZGF0YXN0b3JlIiwiZ2V0TGltaXQiLCJzZXR1cExpc3RlbmVyIiwiaG9sZGVyIiwiYXJyTGVuIiwiZ2xvYmFsQXJyIiwiZWwiLCJncmFwaGljcyIsIml0ZW0iLCJjZWxsVmFsdWUiLCJvcmlnTGVmdCIsImxlZnQiLCJyZWRab25lIiwiYWRqdXN0Iiwib3JpZ1oiLCJ6SW5kZXgiLCJfc2V0dXBEcmFnIiwiZHgiLCJtYW5hZ2VTaGlmdGluZyIsImNoYW5nZSIsInNldFRpbWVvdXQiLCJpc1JpZ2h0Iiwic3RhY2siLCJkcmFnSXRlbSIsIm5leHRQb3MiLCJuZXh0SXRlbSIsInBvcCIsImRpbWVuc2lvbnNIb2xkZXIiLCJtZWFzdXJlc0hvbGRlciIsIm9yaWdDb25maWciLCJtZWFzdXJlc0xlbmd0aCIsImRpbWVuc2lvbnNMZW5ndGgiLCJoYW5kbGVyIiwiaGFuZGxlcjIiLCJjdXN0b21IYW5kbGVyIiwiZSIsImNsaWVudFgiLCJ4IiwiY2xpZW50WSIsInkiLCJtb3VzZVVwSGFuZGxlciIsIm9wYWNpdHkiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQSxNQUFNQSxhQUFjLG1CQUFBQyxDQUFRLENBQVIsQ0FBcEIsQ0FDSUMsS0FBTyxtQkFBQUQsQ0FBUSxDQUFSLENBRFgsQ0FHQSxHQUFJRSxRQUFTLENBQ1RDLHNDQURTLENBRVRDLHFDQUZTLENBR1RDLFVBQVcsVUFIRixDQUlUQyxjQUFlLHFCQUpOLENBS1RDLGtCQUFtQixjQUxWLENBTVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBQyxhQUFhLENBQ1RDLDZtQkFEUyxDQVhKLENBQWIsQ0E4Q3NCLFFBQWxCLFFBQU9DLE8sRUFDUEEsT0FBT0MsUUFBUCxDQUFrQixHQUFJWixZQUFKLENBQWdCRSxJQUFoQixDQUFzQkMsTUFBdEIsQyxDQUNsQlEsT0FBT0MsUUFBUCxDQUFnQkMsY0FBaEIsRSxFQUVBQyxPQUFPQyxPQUFQLENBQWlCZixXOzs7Ozs7QUNyRHJCOztJQUdBLEtBQU1BLFlBQVksQ0FDZGdCLFlBQWFkLENBQWIsQ0FBbUJDLENBQW5CLENBQTJCLENBU3ZCLEdBUkEsS0FBS2MsU0FBTCxtS0FRQSxDQURBLEtBQUtmLElBQUwsQ0FBWUEsQ0FDWixDQUE2QixVQUF6QixRQUFPZ0IsY0FBWCxDQUNJLEtBQUtDLEVBQUwsQ0FBVSxHQUFJRCxjQURsQixDQUVJLEtBQUtFLFNBQUwsQ0FBaUIsS0FBS0QsRUFBTCxDQUFRRSxlQUFSLEVBRnJCLENBR0ksS0FBS0QsU0FBTCxDQUFlRSxPQUFmLENBQXVCLENBQUVDLFdBQVksS0FBS3JCLElBQW5CLENBQXZCLENBSEosQ0FJSSxLQUFLc0IsRUFBTCxDQUFVQyxZQUFZQyxHQUFaLEVBSmQsS0FNSSxPQUFPLENBQ0hDLEtBQU0sU0FBVUMsQ0FBVixDQUFhLENBQ2YsTUFBT0EsRUFDVixDQUhFLENBQVAsQ0FNSixLQUFLQyxXQUFMLENBQW1CLENBQ2YzQixLQUFNQSxDQURTLENBRWZDLE9BQVFBLENBRk8sQ0FyQkksQ0F5QnZCLEtBQUtHLFNBQUwsQ0FBaUJILEVBQU9HLFNBekJELENBMEJ2QixLQUFLd0IsVUFBTCxDQUFrQjNCLEVBQU8yQixVQUFQLElBMUJLLENBMkJ2QixLQUFLQyxnQkFBTCxDQUF3QjVCLEVBQU80QixnQkFBUCxJQTNCRCxDQTRCdkIsS0FBS3RCLFdBQUwsQ0FBbUJOLEVBQU9NLFdBNUJILENBNkJ2QixLQUFLTCxVQUFMLENBQWtCRCxFQUFPQyxVQTdCRixDQThCdkIsS0FBS0MsUUFBTCxDQUFnQkYsRUFBT0UsUUE5QkEsQ0ErQnZCLEtBQUsyQixZQUFMLEdBL0J1QixDQWdDdkIsS0FBS0MsVUFBTCxDQUFrQixLQUFLQyxlQUFMLEVBaENLLENBaUN2QixLQUFLQyxZQUFMLEdBakN1QixDQWtDdkIsS0FBS0MsU0FBTCxDQUFpQmpDLEVBQU9pQyxTQUFQLEVBQW9CLEdBbENkLENBbUN2QixLQUFLQyxVQUFMLENBQWtCbEMsRUFBT2tDLFVBQVAsRUFBcUIsR0FuQ2hCLENBb0N2QixLQUFLN0IsaUJBQUwsQ0FBeUJMLEVBQU9LLGlCQXBDVCxDQXFDdkIsS0FBSzhCLElBQUwsQ0FBWSxLQUFLQyxnQkFBTCxFQXJDVyxDQXNDdkIsS0FBS0MsS0FBTCxDQUFhLENBdENVLENBdUN2QixLQUFLQyxXQUFMLENBQW1CdEMsRUFBT3NDLFdBQVAsRUFBc0IsS0F2Q2xCLENBd0N2QixLQUFLQyxJQUFMLEdBeEN1QixDQXlDdkIsS0FBS25DLGFBQUwsQ0FBcUJKLEVBQU9JLGFBekNMLENBMENRLFVBQTNCLFFBQU9vQyxnQkFBUCxFQUF5QyxLQUFLYixVQTFDM0IsR0E0Q25CLEtBQUtjLGFBQUwsQ0FBcUIsR0FBSUQsZ0JBQUosQ0FBb0IsS0FBS3ZCLFNBQXpCLElBQWtELGFBQWxELENBNUNGLEVBOEN2QixLQUFLQSxTQUFMLENBQWV5QixnQkFBZixDQUFnQyxLQUFLNUIsU0FBTCxDQUFlNkIsWUFBL0MsQ0FBNkQsSUFBVSxDQUNuRSxLQUFLYixVQUFMLENBQWtCLEtBQUtDLGVBQUwsRUFEaUQsQ0FFbkUsS0FBS3JCLGNBQUwsRUFDSCxDQUhELENBSUgsQ0FFRDs7UUFHQXFCLGlCQUFtQixDQUNmLEdBQUksS0FBS2QsU0FBTCxDQUFlMkIsT0FBZixFQUFKLENBQThCLENBQzFCLEdBQUlDLEdBQVMsS0FBSzVCLFNBQUwsQ0FBZTJCLE9BQWYsRUFBYixDQUNJZCxJQURKLENBRUEsSUFBSyxHQUFJZ0IsR0FBSSxDQUFSLENBQVdDLEVBQUtGLEVBQU9HLE1BQTVCLENBQW9DRixFQUFJQyxDQUF4QyxDQUE0Q0QsR0FBNUMsQ0FDSWhCLEVBQVdlLEVBQU9DLENBQVAsQ0FBWCxFQUF3QixLQUFLN0IsU0FBTCxDQUFlZ0MsZUFBZixDQUErQkosRUFBT0MsQ0FBUCxDQUEvQixDQUF4QixDQUVKLE1BQU9oQixFQUNWLENBQ0csUUFFUCxDQUVEb0IsVUFBV0MsQ0FBWCxDQUFrQnBELENBQWxCLENBQXdCcUQsQ0FBeEIsQ0FBa0NDLENBQWxDLENBQWdEQyxDQUFoRCxDQUFtRSxDQUMvRCxHQUdJUixFQUhKLENBSUlTLENBSkosQ0FNSUMsQ0FOSixDQVFJQyxDQVJKLENBQUlDLEVBQVUsQ0FBZCxDQUNJQyxFQUFpQlAsRUFBU0MsQ0FBVCxDQURyQixDQUVJTyxFQUFjN0QsRUFBSzRELENBQUwsQ0FGbEIsQ0FHT0UsRUFBSUQsRUFBWVosTUFIdkIsQ0FLSWMsRUFBa0JULEVBQWdCRCxFQUFTSixNQUFULENBQWtCLENBTHhELENBT0llLEVBQVksS0FBSy9CLFlBQUwsQ0FBa0JnQixNQVBsQyxDQVNJZ0IsS0FUSixDQVVJQyxFQUFNLE1BVlYsQ0FXSUMsSUFYSixDQWFBLElBQUtwQixFQUFJLENBQVQsQ0FBWUEsRUFBSWUsQ0FBaEIsQ0FBbUJmLEdBQUssQ0FBeEIsQ0FBMkIsQ0FDdkIsR0FBSXFCLEdBQVcsRUFBZixDQThCQSxHQTdCQVYsRUFBVVcsU0FBU0MsYUFBVCxDQUF1QixHQUF2QixDQTZCVixDQTVCQVosRUFBUWEsU0FBUixDQUFvQlYsRUFBWWQsQ0FBWixDQTRCcEIsQ0EzQkFXLEVBQVFjLEtBQVIsQ0FBY0MsU0FBZCxDQUEwQixRQTJCMUIsQ0ExQkFmLEVBQVFjLEtBQVIsQ0FBY0UsU0FBZCxDQUEyQixDQUFDLEtBQUt2QyxVQUFMLENBQWtCLEVBQW5CLEVBQXlCLENBQTFCLENBQStCLElBMEJ6RCxDQXpCQWlDLEdBQVksa0JBQ0YsS0FBS2xFLFVBQUwsQ0FBZ0JvRCxDQUFoQixFQUE4QnFCLFdBQTlCLEVBREUsQ0FFUixHQUZRLENBRUZkLEVBQVlkLENBQVosRUFBZTRCLFdBQWYsRUFGRSxDQUU2QixZQXVCekMsQ0FuQkFqQixFQUFRYyxLQUFSLENBQWNJLFVBQWQsQ0FBMkIsUUFtQjNCLENBbEJBUCxTQUFTUSxJQUFULENBQWNDLFdBQWQsQ0FBMEJwQixDQUExQixDQWtCQSxDQWpCQSxLQUFLcUIsV0FBTCxDQUEyQyxFQUF4QixHQUFZaEMsQ0FBWixFQUFlRSxNQWlCbEMsQ0FoQkFvQixTQUFTUSxJQUFULENBQWNHLFdBQWQsQ0FBMEJ0QixDQUExQixDQWdCQSxDQWZBQSxFQUFRYyxLQUFSLENBQWNJLFVBQWQsQ0FBMkIsU0FlM0IsQ0FkQXBCLEVBQWEsQ0FDVHlCLE1BQU8sS0FBS0YsV0FESCxDQUVURyxPQUFRLEVBRkMsQ0FHVHZCLFFBQVMsQ0FIQSxDQUlUd0IsUUFBUyxDQUpBLENBS1RDLEtBQU0xQixFQUFRMkIsU0FMTCxDQU1UQyxVQUFXbEIsQ0FORixDQWNiLENBTkFYLEVBQXNCRixFQUFvQk0sRUFBWWQsQ0FBWixDQUFwQixDQUFxQyxHQU0zRCxDQUxJQSxDQUtKLENBSklLLEVBQU1tQyxJQUFOLENBQVcsQ0FBQy9CLENBQUQsQ0FBWCxDQUlKLENBRklKLEVBQU1BLEVBQU1ILE1BQU4sQ0FBZSxDQUFyQixFQUF3QnNDLElBQXhCLENBQTZCL0IsQ0FBN0IsQ0FFSixDQUFJTyxDQUFKLENBQ0lQLEVBQVdHLE9BQVgsQ0FBcUIsS0FBS1IsU0FBTCxDQUFlQyxDQUFmLENBQXNCcEQsQ0FBdEIsQ0FBNEJxRCxDQUE1QixDQUFzQ0MsRUFBZSxDQUFyRCxDQUF3REcsQ0FBeEQsQ0FEekIsS0FFTyxDQUNILEdBU0krQixHQUFVLEtBQUt2RSxFQUFMLENBQVF3RSxXQUFSLENBVEcsQ0FDVHhGLE9BQVEsQ0FDSkEsT0FBUSxDQUNKTyxvQkFESSxDQURKLENBREMsQ0FTSCxDQVRkLENBVUE0QyxFQUFNQSxFQUFNSCxNQUFOLENBQWUsQ0FBckIsRUFBd0JzQyxJQUF4QixDQUE2QixDQUN6QjVCLFFBQVMsQ0FEZ0IsQ0FFekJ3QixRQUFTLENBRmdCLENBR3pCRixNQUFPLEVBSGtCLENBSXpCSyxVQUFXLGNBSmMsQ0FLekI5RSxNQUFPLENBQ0gsS0FBUSxNQURMLENBRUgsTUFBUyxNQUZOLENBR0gsT0FBVSxNQUhQLENBSUgsV0FBYyxNQUpYLENBS0gsY0FBaUJnRixDQUxkLENBTGtCLENBQTdCLENBWEcsQ0F3QkgsSUFBSyxHQUFJRSxHQUFJLENBQWIsQ0FBZ0JBLEVBQUkxQixDQUFwQixDQUErQjBCLEdBQUssQ0FBcEMsQ0FBdUMsQ0FDbkMsR0FBSUMsR0FBZSxDQUNmVixNQUFPLEtBQUsvQyxTQURHLENBRWZnRCxPQUFRLEtBQUsvQyxVQUZFLENBR2Z3QixRQUFTLENBSE0sQ0FJZndCLFFBQVMsQ0FKTSxDQUtmUyxRQUFTbkMsQ0FMTSxDQU1mb0MsUUFBUyxLQUFLNUQsWUFBTCxDQUFrQnlELENBQWxCLENBTk0sQ0FBbkIsQ0FRQXRDLEVBQU1BLEVBQU1ILE1BQU4sQ0FBZSxDQUFyQixFQUF3QnNDLElBQXhCLENBQTZCSSxDQUE3QixDQVRtQyxDQVVuQ3hCLEVBQVksS0FBSzJCLFdBQUwsQ0FBaUJyQyxDQUFqQixDQUFzQyxLQUFLeEIsWUFBTCxDQUFrQnlELENBQWxCLENBQXRDLEVBQTRELENBQTVELENBVnVCLENBV25DeEIsRUFBTzZCLFNBQVM1QixFQUFVRCxHQUFuQixFQUEwQkEsQ0FBM0IsQ0FBa0NDLEVBQVVELEdBQTVDLENBQWtEQSxDQVhyQixDQVluQ0QsRUFBTzhCLFNBQVM1QixFQUFVRixHQUFuQixFQUEwQkEsQ0FBM0IsQ0FBa0NFLEVBQVVGLEdBQTVDLENBQWtEQSxDQVpyQixDQWFuQzBCLEVBQWF6QixHQUFiLENBQW1CQSxDQWJnQixDQWNuQ3lCLEVBQWExQixHQUFiLENBQW1CQSxDQUN0QixDQUNKLENBQ0ROLEdBQVdILEVBQVdHLE9BQ3pCLENBQ0QsTUFBT0EsRUFDVixDQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBcUMsV0FBVzVDLENBQVgsQ0FBa0JwRCxDQUFsQixDQUF3QmlHLENBQXhCLENBQXNDLENBQ2xDLEdBQ0lsRCxFQURKLENBRUltRCxDQUZKLENBR0l4QyxDQUhKLENBQ09JLEVBQUksS0FBSzNELFFBQUwsQ0FBYzhDLE1BRHpCLENBS0EsSUFBS0YsRUFBSSxDQUFULENBQVlBLEVBQUllLENBQWhCLENBQW1CZixHQUFLLENBQXhCLENBQTJCLENBQ3ZCLEdBQUlxQixHQUFXLEVBQWYsQ0FDSVIsRUFBaUJxQyxFQUFhbEQsQ0FBYixDQURyQixDQUVJO0FBQ0pXLEdBQVVXLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FKYSxDQUt2QlosRUFBUWEsU0FBUixDQUFvQlgsQ0FMRyxDQU12QkYsRUFBUWMsS0FBUixDQUFjQyxTQUFkLENBQTBCLFFBTkgsQ0FPdkJmLEVBQVFjLEtBQVIsQ0FBY0UsU0FBZCxDQUEwQixLQVBILENBU3ZCTCxTQUFTUSxJQUFULENBQWNDLFdBQWQsQ0FBMEJwQixDQUExQixDQVR1QixDQVV2QlUsR0FBWSxxQkFDRixLQUFLakUsUUFBTCxDQUFjNEMsQ0FBZCxFQUFpQjRCLFdBQWpCLEVBREUsQ0FDK0IsWUFYcEIsQ0FZbkIsS0FBSzlDLGdCQVpjLEdBYW5CdUMsR0FBWSxZQWJPLEVBZXZCLEtBQUsrQixZQUFMLENBQW9CekMsRUFBUTBDLFlBZkwsQ0FnQnZCL0IsU0FBU1EsSUFBVCxDQUFjRyxXQUFkLENBQTBCdEIsQ0FBMUIsQ0FoQnVCLENBaUJ2QndDLEVBQWEsQ0FDVGpCLE1BQU8sS0FBSy9DLFNBREgsQ0FFVGdELE9BQVEsRUFGQyxDQUdUdkIsUUFBUyxDQUhBLENBSVR3QixRQUFTLENBSkEsQ0FLVEMsS0FBTTFCLEVBQVEyQixTQUxMLENBTVRDLFVBQVdsQixDQU5GLENBakJVLENBeUJ2QixLQUFLbkMsWUFBTCxDQUFrQnNELElBQWxCLENBQXVCLEtBQUtwRixRQUFMLENBQWM0QyxDQUFkLENBQXZCLENBekJ1QixDQTBCdkJLLEVBQU0sQ0FBTixFQUFTbUMsSUFBVCxDQUFjVyxDQUFkLENBWUgsQ0FDRCxNQTVDYyxFQTZDakIsQ0FFREcscUJBQTRDLENBQ3hDLEdBRUkzQyxFQUZKLENBQUk0QyxJQUFKLENBQ0l2RCxFQUFJLENBRFIsQ0FHSXFCLEVBQVcsRUFIZixDQUtBLElBQUtyQixFQUFJLENBQVQsQ0FBWUEsRUFBSSxLQUFLN0MsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBQXpDLENBQTRDRixHQUE1QyxDQUNJVyxFQUFVVyxTQUFTQyxhQUFULENBQXVCLEdBQXZCLENBRGQsQ0FFSVosRUFBUWEsU0FBUixDQUFvQixLQUFLckUsVUFBTCxDQUFnQjZDLENBQWhCLEVBQW1CLENBQW5CLEVBQXNCd0QsV0FBdEIsR0FBc0MsS0FBS3JHLFVBQUwsQ0FBZ0I2QyxDQUFoQixFQUFtQnlELE1BQW5CLENBQTBCLENBQTFCLENBRjlELENBR0k5QyxFQUFRYyxLQUFSLENBQWNDLFNBQWQsQ0FBMEIsUUFIOUIsQ0FJSWYsRUFBUWMsS0FBUixDQUFjRSxTQUFkLENBQTBCLEtBSjlCLENBS0lOLEVBQVcsdUJBTGYsQ0FNUSxLQUFLdkMsZ0JBTmIsR0FPUXVDLEdBQVksWUFQcEIsRUFTSWtDLEVBQWNmLElBQWQsQ0FBbUIsQ0FDZk4sTUFBNEIsRUFBckIsTUFBSy9FLFVBQUwsQ0FBZ0I2QyxDQUFoQixDQURRLENBRWZtQyxPQUFRLEVBRk8sQ0FHZnZCLFFBQVMsQ0FITSxDQUlmd0IsUUFBUyxDQUpNLENBS2ZDLEtBQU0xQixFQUFRMkIsU0FMQyxDQU1mQyxVQUFXbEIsQ0FOSSxDQUFuQixDQVRKLENBa0JBLE1BQU9rQyxFQUNWLENBRURHLG9CQUFxQnJELENBQXJCLENBQTRCc0QsQ0FBNUIsQ0FBbUMsQ0FHL0IsSUFGQSxHQUNJaEQsRUFESixDQUFJWCxFQUFJMkQsQ0FFUixDQUFPM0QsRUFBSUssRUFBTUgsTUFBakIsQ0FBeUJGLEdBQXpCLENBQ0lXLEVBQVVXLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FEZCxDQUVJWixFQUFRYSxTQUFSLENBQW9CLEVBRnhCLENBR0liLEVBQVFjLEtBQVIsQ0FBY0MsU0FBZCxDQUEwQixRQUg5QixDQUlJckIsRUFBTUwsQ0FBTixFQUFTd0MsSUFBVCxDQUFjLENBQ1ZOLE1BQU8sRUFERyxDQUVWQyxPQUFRLEVBRkUsQ0FHVnZCLFFBQVMsQ0FIQyxDQUlWd0IsUUFBUyxDQUpDLENBS1ZDLEtBQU0xQixFQUFRMkIsU0FMSixDQU1WQyxVQUFXLGtCQU5ELENBQWQsQ0FKSixDQWFBLE1BQU9sQyxFQUNWLENBRUR1RCxjQUFldkQsQ0FBZixDQUFzQndELENBQXRCLENBQWlDLENBQzdCLEdBV0lwQixHQUFVLEtBQUt2RSxFQUFMLENBQVF3RSxXQUFSLENBWEcsQ0FDVHhGLE9BQVEsQ0FDSkEsT0FBUSxDQUNKTyw2RkFESSxDQURKLENBREMsQ0FXSCxDQVhkLENBeUJBLE1BYkE0QyxHQUFNeUQsT0FBTixDQUFjLENBQUMsQ0FDWDNCLE9BQVEsRUFERyxDQUVYdkIsUUFBUyxDQUZFLENBR1h3QixRQUFTeUIsQ0FIRSxDQUlYdEIsVUFBVyxlQUpBLENBS1g5RSxNQUFPLENBQ0gsS0FBUSxTQURMLENBRUgsTUFBUyxNQUZOLENBR0gsT0FBVSxNQUhQLENBSUgsV0FBYyxNQUpYLENBS0gsY0FBaUJnRixDQUxkLENBTEksQ0FBRCxDQUFkLENBYUEsQ0FBT3BDLENBQ1YsQ0FFRDBELGdCQUFrQixDQUNkLEdBQUlDLEdBQU8sSUFBWCxDQUNJQyxFQUFNLEtBQUtqRixVQURmLENBRUlzQixFQUFXLEtBQUtuRCxVQUFMLENBQWdCK0csTUFBaEIsQ0FBdUIsU0FBVUMsQ0FBVixDQUFlbkUsQ0FBZixDQUFrQm9FLENBQWxCLENBQXVCLENBQ3JELEdBQUlELElBQVFDLEVBQUlBLEVBQUlsRSxNQUFKLENBQWEsQ0FBakIsQ0FBWixDQUNJLFFBRVAsQ0FKVSxDQUZmLENBT0ltRSxFQUFXLEtBQUtqSCxRQUFMLENBQWM4RyxNQUFkLENBQXFCLFNBQVVDLENBQVYsQ0FBZW5FLENBQWYsQ0FBa0JvRSxDQUFsQixDQUF1QixDQUNuRCxHQUFJSixFQUFLakYsWUFBVCxDQUNJLFNBRitDLE1BSTNDb0YsS0FBUUMsRUFBSUEsRUFBSWxFLE1BQUosQ0FBYSxDQUFqQixDQUptQyxRQVF0RCxDQVJVLENBUGYsQ0FnQklHLElBaEJKLENBaUJJaUUsSUFqQkosQ0FrQkl0RSxFQUFJLENBbEJSLENBbUJJNkQsRUFBWSxDQW5CaEIsQ0FvQkEsR0FBSUksQ0FBSixDQUFTLENBT0wsSUFOQTVELEVBQU1tQyxJQUFOLENBQVcsS0FBS2MsbUJBQUwsQ0FBeUJqRCxDQUF6QixDQUFnQ2dFLEVBQVNuRSxNQUF6QyxDQUFYLENBTUEsQ0FKQUcsRUFBUSxLQUFLcUQsbUJBQUwsQ0FBeUJyRCxDQUF6QixDQUFnQyxDQUFoQyxDQUlSLENBSEEsS0FBSzRDLFNBQUwsQ0FBZTVDLENBQWYsQ0FBc0I0RCxDQUF0QixDQUEyQixLQUFLN0csUUFBaEMsQ0FHQSxDQUZBaUQsRUFBTW1DLElBQU4sSUFFQSxDQURBLEtBQUtwQyxTQUFMLENBQWVDLENBQWYsQ0FBc0I0RCxDQUF0QixDQUEyQjNELENBQTNCLENBQXFDLENBQXJDLENBQXdDLEVBQXhDLENBQ0EsQ0FBS04sRUFBSSxDQUFULENBQVlBLEVBQUlLLEVBQU1ILE1BQXRCLENBQThCRixHQUE5QixDQUNJNkQsRUFBYUEsRUFBWXhELEVBQU1MLENBQU4sRUFBU0UsTUFBdEIsQ0FBZ0NHLEVBQU1MLENBQU4sRUFBU0UsTUFBekMsQ0FBa0QyRCxDQUE5RCxDQUVKLElBQUs3RCxFQUFJLENBQVQsQ0FBWUEsRUFBSSxLQUFLN0MsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBQXpDLENBQTRDRixHQUE1QyxDQUNJc0UsRUFBUzlCLElBQVQsQ0FBYyxDQUNWNUIsUUFBUyxDQURDLENBRVZ3QixRQUFTLENBRkMsQ0FHVkQsT0FBUSxFQUhFLENBSVZJLFVBQVcsWUFKRCxDQUFkLEVBUUo7QUFTQSxLQVJBK0IsRUFBUzlCLElBQVQsQ0FBYyxDQUNWNUIsUUFBUyxDQURDLENBRVZ3QixRQUFTLENBRkMsQ0FHVkQsT0FBUSxFQUhFLENBSVZELE1BQU8sRUFKRyxDQUtWSyxVQUFXLGtCQUxELENBQWQsQ0FRQSxDQUFLdkMsRUFBSSxDQUFULENBQVlBLEVBQUk2RCxFQUFZLEtBQUsxRyxVQUFMLENBQWdCK0MsTUFBNUMsQ0FBb0RGLEdBQXBELENBQXlELENBQ3JELEdBQUl1RSxHQUFhLEtBQUt2RixVQUFMLENBQWdCLEtBQUs3QixVQUFMLENBQWdCLEtBQUtBLFVBQUwsQ0FBZ0IrQyxNQUFoQixDQUF5QixDQUF6QyxDQUFoQixDQUFqQixDQWVJdUMsRUFBVSxLQUFLdkUsRUFBTCxDQUFRd0UsV0FBUixDQWRHLENBQ1R4RixPQUFRLENBQ0pBLE9BQVEsQ0FDSk8sNEZBREksQ0FRSjhHLFdBQVlBLENBUlIsQ0FESixDQURDLENBY0gsQ0FmZCxDQWdCQUQsRUFBUzlCLElBQVQsQ0FBYyxDQUNWTixNQUFPLE1BREcsQ0FFVkMsT0FBUSxFQUZFLENBR1Z2QixRQUFTLENBSEMsQ0FJVndCLFFBQVMsQ0FKQyxDQUtWRyxVQUFXLGNBTEQsQ0FNVjlFLE1BQU8sQ0FDSCxLQUFRLE1BREwsQ0FFSCxNQUFTLE1BRk4sQ0FHSCxPQUFVLE1BSFAsQ0FJSCxXQUFjLE1BSlgsQ0FLSCxjQUFpQmdGLENBTGQsQ0FORyxDQUFkLENBY0gsQ0FFRHBDLEVBQU1tQyxJQUFOLENBQVc4QixDQUFYLENBN0RLLENBOERMakUsRUFBUSxLQUFLdUQsYUFBTCxDQUFtQnZELENBQW5CLENBQTBCd0QsQ0FBMUIsQ0E5REgsQ0ErREwsS0FBSzNFLFlBQUwsR0FDSCxDQWhFRCxJQWlFSW1CLEdBQU1tQyxJQUFOLENBQVcsQ0FBQyxDQUNSSCxLQUFNLGlDQUFtQyxLQUFLL0UsYUFBeEMsQ0FBd0QsTUFEdEQsQ0FFUjZFLE9BQVEsRUFGQSxDQUdSQyxRQUFTLEtBQUtqRixVQUFMLENBQWdCK0MsTUFBaEIsQ0FBeUIsS0FBSzlDLFFBQUwsQ0FBYzhDLE1BSHhDLENBQUQsQ0FBWCxDQWpFSixDQXVFQSxNQUFPRyxFQUNWLENBRURtRSxjQUFlQyxDQUFmLENBQXdCQyxDQUF4QixDQUFnQyxDQUM1QixHQUNJMUUsRUFESixDQUFJMkUsRUFBUyxFQUFiLENBRUl4SCxFQUFhLEtBQUtBLFVBRnRCLENBTUEsR0FISSxVQUFLNEIsWUFHVCxFQUZJNUIsRUFBV3lILE1BQVgsQ0FBa0J6SCxFQUFXK0MsTUFBWCxDQUFvQixDQUF0QyxDQUF5QyxDQUF6QyxDQUVKLENBQUkvQyxFQUFXMEgsT0FBWCxDQUFtQkMsS0FBSzNELEdBQUwsQ0FBU3NELENBQVQsQ0FBa0JDLENBQWxCLENBQW5CLEdBQWlEdkgsRUFBVytDLE1BQWhFLENBQ0ksTUFBTyxhQUFQLENBQ0csR0FBSXVFLEVBQVVDLENBQWQsQ0FBc0IsQ0FFekIsSUFEQUMsRUFBU3hILEVBQVdzSCxDQUFYLENBQ1QsQ0FBS3pFLEVBQUl5RSxFQUFVLENBQW5CLENBQXNCekUsR0FBSzBFLENBQTNCLENBQW1DMUUsR0FBbkMsQ0FDSTdDLEVBQVc2QyxFQUFJLENBQWYsRUFBb0I3QyxFQUFXNkMsQ0FBWCxDQUFwQixDQUVKN0MsRUFBV3VILENBQVgsRUFBcUJDLENBQ3hCLENBTk0sSUFNQSxJQUFJRixFQUFVQyxDQUFkLENBQXNCLENBRXpCLElBREFDLEVBQVN4SCxFQUFXc0gsQ0FBWCxDQUNULENBQUt6RSxFQUFJeUUsRUFBVSxDQUFuQixDQUFzQnpFLEdBQUswRSxDQUEzQixDQUFtQzFFLEdBQW5DLENBQ0k3QyxFQUFXNkMsRUFBSSxDQUFmLEVBQW9CN0MsRUFBVzZDLENBQVgsQ0FBcEIsQ0FFSjdDLEVBQVd1SCxDQUFYLEVBQXFCQyxDQUN4QixDQUNELEtBQUtaLGNBQUwsRUFDSCxDQUVEZ0IsY0FBZU4sQ0FBZixDQUF3QkMsQ0FBeEIsQ0FBZ0MsQ0FDNUIsR0FDSTFFLEVBREosQ0FBSTJFLEVBQVMsRUFBYixDQUVJdkgsRUFBVyxLQUFLQSxRQUZwQixDQU1BLEdBSEksVUFBSzJCLFlBR1QsRUFGSTNCLEVBQVN3SCxNQUFULENBQWdCeEgsRUFBUzhDLE1BQVQsQ0FBa0IsQ0FBbEMsQ0FBcUMsQ0FBckMsQ0FFSixDQUFJOUMsRUFBU3lILE9BQVQsQ0FBaUJDLEtBQUszRCxHQUFMLENBQVNzRCxDQUFULENBQWtCQyxDQUFsQixDQUFqQixHQUErQ3RILEVBQVM4QyxNQUE1RCxDQUNJLE1BQU8sYUFBUCxDQUNHLEdBQUl1RSxFQUFVQyxDQUFkLENBQXNCLENBRXpCLElBREFDLEVBQVN2SCxFQUFTcUgsQ0FBVCxDQUNULENBQUt6RSxFQUFJeUUsRUFBVSxDQUFuQixDQUFzQnpFLEdBQUswRSxDQUEzQixDQUFtQzFFLEdBQW5DLENBQ0k1QyxFQUFTNEMsRUFBSSxDQUFiLEVBQWtCNUMsRUFBUzRDLENBQVQsQ0FBbEIsQ0FFSjVDLEVBQVNzSCxDQUFULEVBQW1CQyxDQUN0QixDQU5NLElBTUEsSUFBSUYsRUFBVUMsQ0FBZCxDQUFzQixDQUV6QixJQURBQyxFQUFTdkgsRUFBU3FILENBQVQsQ0FDVCxDQUFLekUsRUFBSXlFLEVBQVUsQ0FBbkIsQ0FBc0J6RSxHQUFLMEUsQ0FBM0IsQ0FBbUMxRSxHQUFuQyxDQUNJNUMsRUFBUzRDLEVBQUksQ0FBYixFQUFrQjVDLEVBQVM0QyxDQUFULENBQWxCLENBRUo1QyxFQUFTc0gsQ0FBVCxFQUFtQkMsQ0FDdEIsQ0FDRCxLQUFLWixjQUFMLEVBQ0gsQ0FFRGlCLGlCQUFtQixDQUNmLEdBQUk3SCxLQUFKLENBQ0EsSUFBSyxHQUFJNkMsR0FBSSxDQUFSLENBQVdlLEVBQUksS0FBSzVELFVBQUwsQ0FBZ0IrQyxNQUFwQyxDQUE0Q0YsRUFBSWUsQ0FBaEQsQ0FBbURmLEdBQW5ELENBQ0k3QyxFQUFXcUYsSUFBWCxDQUFnQixLQUFLckYsVUFBTCxDQUFnQjZDLENBQWhCLENBQWhCLEVBRUosSUFBSyxHQUFJQSxHQUFJLENBQVIsQ0FBV2UsRUFBSSxLQUFLM0QsUUFBTCxDQUFjOEMsTUFBbEMsQ0FBMENGLEVBQUllLENBQTlDLENBQWlEZixHQUFqRCxDQUNJN0MsRUFBV3FGLElBQVgsQ0FBZ0IsS0FBS3BGLFFBQUwsQ0FBYzRDLENBQWQsQ0FBaEIsRUFFSixNQUFPN0MsRUFDVixDQUVEOEgsZUFBaUIsQ0FDYixHQUtJQyxFQUxKLENBQUlDLElBQUosQ0FDSW5GLEVBQUksQ0FEUixDQUVJQyxFQUFLLEtBQUs5QyxVQUFMLENBQWdCK0MsTUFBaEIsQ0FBeUIsQ0FGbEMsQ0FHSXlDLEVBQUksQ0FIUixDQUlJeUMsRUFBSyxDQUpULENBT0EsSUFBS3BGLEVBQUksQ0FBVCxDQUFZQSxFQUFJQyxDQUFoQixDQUFvQkQsR0FBcEIsQ0FFSSxJQURBa0YsRUFBZ0IsS0FBS2xHLFVBQUwsQ0FBZ0IsS0FBSzdCLFVBQUwsQ0FBZ0I2QyxDQUFoQixDQUFoQixDQUNoQixDQUFLMkMsRUFBSSxDQUFULENBQVl5QyxFQUFLRixFQUFjaEYsTUFBL0IsQ0FBdUN5QyxFQUFJeUMsQ0FBM0MsQ0FBK0N6QyxHQUEvQyxDQUNJd0MsRUFBUTNDLElBQVIsQ0FBYSxDQUNUMEIsT0FBUSxLQUFLbUIsU0FBTCxDQUFlLEtBQUtsSSxVQUFMLENBQWdCNkMsQ0FBaEIsQ0FBZixDQUFtQ2tGLEVBQWN2QyxDQUFkLEVBQWlCMkMsUUFBakIsRUFBbkMsQ0FEQyxDQUVUQyxVQUFXTCxFQUFjdkMsQ0FBZCxDQUZGLENBQWIsRUFNUixNQUFPd0MsRUFDVixDQUVESyxrQkFBb0IsQ0FLaEIsUUFBU0MsRUFBVCxDQUFrQnJCLENBQWxCLENBQXVCcEUsQ0FBdkIsQ0FBMEIsQ0FDdEIsSUFBSyxHQUFJMkMsR0FBSSxDQUFSLENBQVc1QixFQUFJMkUsRUFBWTFGLENBQVosRUFBZUUsTUFBbkMsQ0FBMkN5QyxFQUFJNUIsQ0FBL0MsQ0FBa0Q0QixHQUFsRCxDQUF1RCxDQUNuRCxHQUFJaEUsR0FBSXlGLEVBQUl1QixLQUFKLENBQVUsQ0FBVixDQUFSLENBQ0FoSCxFQUFFNkQsSUFBRixDQUFPa0QsRUFBWTFGLENBQVosRUFBZTJDLENBQWYsQ0FBUCxDQUZtRCxDQUcvQzNDLElBQU1tQixDQUh5QyxDQUkvQ3lFLEVBQUVwRCxJQUFGLENBQU83RCxDQUFQLENBSitDLENBTS9DOEcsRUFBUTlHLENBQVIsQ0FBV3FCLEVBQUksQ0FBZixDQUVQLENBQ0osQ0FkRCxHQUFJNEYsS0FBSixDQUNJRixFQUFjLEtBQUtHLGVBQUwsRUFEbEIsQ0FFSTFFLEVBQU11RSxFQUFZeEYsTUFBWixDQUFxQixDQUYvQixDQWdCQSxNQURBdUYsTUFBWSxDQUFaLENBQ0EsQ0FBT0csQ0FDVixDQUVEQyxpQkFBbUIsQ0FDZixHQUFJQyxLQUFKLENBQ0lDLElBREosQ0FHQSxJQUFLLEdBQUlDLEVBQVQsR0FBZ0IsTUFBS2hILFVBQXJCLENBQ1EsS0FBS0EsVUFBTCxDQUFnQmlILGNBQWhCLENBQStCRCxDQUEvQixHQUF1Q0EsSUFBUSxLQUFLRSxPQUQ1RCxHQUVRSixFQUFRRSxDQUFSLEVBQWUsS0FBS2hILFVBQUwsQ0FBZ0JnSCxDQUFoQixDQUZ2QixFQU1BLE1BREFELEdBQVVJLE9BQU9DLElBQVAsQ0FBWU4sQ0FBWixFQUFxQk8sR0FBckIsQ0FBeUJMLEdBQU9GLEVBQVFFLENBQVIsQ0FBaEMsQ0FDVixDQUFPRCxDQUNWLENBRUR6RyxrQkFBb0IsQ0FDaEIsR0FBSTZGLEdBQVUsS0FBS0YsYUFBTCxFQUFkLENBQ0lxQixFQUFhLEtBQUtkLGdCQUFMLEVBRGpCLENBRUllLElBRkosQ0FJQSxJQUFLLEdBQUl2RyxHQUFJLENBQVIsQ0FBV2UsRUFBSXVGLEVBQVdwRyxNQUEvQixDQUF1Q0YsRUFBSWUsQ0FBM0MsQ0FBOENmLEdBQTlDLENBQW1ELENBQy9DLEdBQUl3RyxHQUFZRixFQUFXdEcsQ0FBWCxDQUFoQixDQUNJZ0csRUFBTSxFQURWLENBRUlTLElBRkosQ0FJQSxJQUFLLEdBQUk5RCxHQUFJLENBQVIsQ0FBVytELEVBQU1GLEVBQVV0RyxNQUFoQyxDQUF3Q3lDLEVBQUkrRCxDQUE1QyxDQUFpRC9ELEdBQWpELENBQ0ksSUFBSyxHQUFJZ0UsR0FBSSxDQUFSLENBQVd6RyxFQUFTaUYsRUFBUWpGLE1BQWpDLENBQXlDeUcsRUFBSXpHLENBQTdDLENBQXFEeUcsR0FBckQsQ0FBMEQsQ0FDdEQsR0FBSXBCLEdBQVlKLEVBQVF3QixDQUFSLEVBQVdwQixTQUEzQixDQUNJaUIsRUFBVTdELENBQVYsSUFBaUI0QyxDQUZpQyxHQUk5Q1MsQ0FKOEMsRUFHeEMsQ0FBTixJQUg4QyxDQUl2Q1EsRUFBVTdELENBQVYsQ0FKdUMsQ0FNdkMsSUFBTTZELEVBQVU3RCxDQUFWLENBTmlDLENBUWxEOEQsRUFBTWpFLElBQU4sQ0FBVzJDLEVBQVF3QixDQUFSLEVBQVd6QyxNQUF0QixDQVJrRCxDQVV6RCxDQUVMcUMsRUFBUVAsQ0FBUixFQUFlUyxDQUNsQixDQUNELE1BQU9GLEVBQ1YsQ0FFRDNJLGdCQUFrQixDQUNkLEdBQUlELEdBQVcsS0FBS29HLGNBQUwsRUFBZixDQUNJNkMsRUFBUyxLQUFLQyxnQkFBTCxDQUFzQmxKLENBQXRCLENBRGIsQ0FFSW1KLEVBQUt0SSxZQUFZQyxHQUFaLEVBRlQsQ0FHSXNJLEVBQVksTUFIaEIsQ0FJSUMsS0FKSixDQUtBLElBQUssR0FBSWhILEdBQUksQ0FBUixDQUFXQyxFQUFLdEMsRUFBU3VDLE1BQTlCLENBQXNDRixFQUFJQyxDQUExQyxDQUE4Q0QsR0FBOUMsQ0FBbUQsQ0FDL0MsR0FBSWlILEdBQWV0SixFQUFTcUMsQ0FBVCxFQUFZckMsRUFBU3FDLENBQVQsRUFBWUUsTUFBWixDQUFxQixDQUFqQyxDQUFuQixDQUQrQyxDQUUzQytHLEVBQWE5RixHQUFiLEVBQW9COEYsRUFBYS9GLEdBRlUsSUFHdkM2RixFQUFZRSxFQUFhOUYsR0FIYyxHQUl2QzRGLEVBQVlFLEVBQWE5RixHQUpjLEVBTXZDNkYsRUFBWUMsRUFBYS9GLEdBTmMsR0FPdkM4RixFQUFZQyxFQUFhL0YsR0FQYyxFQVVsRCxDQUNELElBQUssR0FBSWxCLEdBQUksQ0FBUixDQUFXQyxFQUFLMkcsRUFBTzFHLE1BQTVCLENBQW9DRixFQUFJQyxDQUF4QyxDQUE0Q0QsR0FBNUMsQ0FBaUQsQ0FDN0MsR0FDSWtILEVBREosQ0FBSUMsRUFBTVAsRUFBTzVHLENBQVAsQ0FBVixDQUVBLElBQUssR0FBSTJDLEdBQUksQ0FBUixDQUFXeUMsRUFBSytCLEVBQUlqSCxNQUF6QixDQUFpQ3lDLEVBQUl5QyxDQUFyQyxDQUF5Q3pDLEdBQXpDLENBQThDLENBQzFDLEdBQUl5RSxHQUFPRCxFQUFJeEUsQ0FBSixDQUFYLENBQ0kwRSxFQUFrQjFKLEVBQVNxQyxDQUFULEVBQVkyQyxDQUFaLENBRHRCLENBRUEsR0FBSTBFLEVBQWdCNUosS0FBaEIsRUFBd0QsTUFBL0IsS0FBZ0JBLEtBQWhCLENBQXNCNkosSUFBbkQsR0FDSUosRUFBVUUsQ0FEZCxDQUVnRSxHQUF4RCxLQUFRM0osS0FBUixDQUFjRCxXQUFkLENBQTBCYyxVQUExQixDQUFxQ2IsS0FBckMsQ0FBMkM4SixRQUZuRCxFQUVxRSxDQUM3RCxHQUFJQyxHQUFhLENBQ1R0SyxPQUFRLENBQ0pBLE9BQVEsQ0FDSk8sTUFBTyxDQUNILFFBQVd1SixDQURSLENBRUgsU0FBWSxHQUZULENBR0gsUUFBV0QsQ0FIUixDQUlILGdCQUFtQixDQUpoQixDQUtILGtCQUFxQixFQUxsQixDQU1ILGVBQWtCLEVBTmYsQ0FESCxDQURKLENBREMsQ0FBakIsQ0FjSXRFLEVBQVUsS0FBS3ZFLEVBQUwsQ0FBUXdFLFdBQVIsQ0FBb0I4RSxDQUFwQixDQWRkLENBZUFOLEVBQVFoSyxNQUFSLENBQWVPLEtBQWYsQ0FBcUJnSyxhQUFyQixDQUFxQ2hGLENBaEJ3QixDQWlCN0R5RSxFQUFRUSxNQUFSLENBQWVSLEVBQVFoSyxNQUF2QixDQUNILENBRUwsR0FBSWdLLENBQUosQ0FBYSxDQUNULEdBQUksRUFBRUcsRUFBZ0JwQixjQUFoQixDQUErQixPQUEvQixHQUEyQ29CLEVBQWdCcEIsY0FBaEIsQ0FBK0IsTUFBL0IsQ0FBN0MsR0FDMEIsWUFBOUIsS0FBZ0IxRCxTQURoQixDQUM0QyxDQUN4QyxHQUFJb0YsR0FBU1QsRUFBUXpKLEtBQVIsQ0FBY21LLFFBQWQsQ0FBdUJDLFNBQXZCLEVBQWIsQ0FDSUMsRUFBV0gsRUFBTyxDQUFQLENBRGYsQ0FFSUksRUFBV0osRUFBTyxDQUFQLENBRmYsQ0FHSWxLLEVBQVEsS0FBS3NGLFdBQUwsQ0FBaUJzRSxFQUFnQnhFLE9BQWpDLENBQTBDd0UsRUFBZ0J2RSxPQUExRCxFQUFtRSxDQUFuRSxDQUhaLENBSUFyRixFQUFNZ0ssYUFBTixDQUFvQk8sTUFBcEIsQ0FBMkJ2SyxLQUEzQixDQUFpQ3dLLGFBQWpDLENBQWlESCxDQUxULENBTXhDckssRUFBTWdLLGFBQU4sQ0FBb0JPLE1BQXBCLENBQTJCdkssS0FBM0IsQ0FBaUN5SyxhQUFqQyxDQUFpREgsQ0FOVCxDQU94Q1gsRUFBS2xLLE1BQUwsQ0FBWU8sS0FBWixDQUFvQkEsQ0FQb0IsQ0FReEM0SixFQUFnQjVKLEtBQWhCLENBQXdCQSxDQVJnQixDQVN4Q0MsT0FBT3lLLE1BQVAsRUFBa0IzSixZQUFZQyxHQUFaLEdBQW9CcUksQ0FURSxDQVV4Q00sRUFBS00sTUFBTCxDQUFZTixFQUFLbEssTUFBakIsQ0FDSCxDQUNENEosRUFBS3RJLFlBQVlDLEdBQVosRUFDUixDQUNKLENBQ0osQ0FFRCxLQUFLUCxFQUFMLENBQVEwQixnQkFBUixDQUF5QixTQUF6QixDQUFvQyxDQUFDd0ksQ0FBRCxDQUFNbkwsQ0FBTixHQUFlLENBQy9DLEdBQUlBLEVBQUtBLElBQVQsQ0FDSSxJQUFLLEdBQUkrQyxHQUFJLENBQVIsQ0FBV0MsRUFBSzJHLEVBQU8xRyxNQUE1QixDQUFvQ0YsRUFBSUMsQ0FBeEMsQ0FBNENELEdBQTVDLENBQWlELENBQzdDLEdBQUltSCxHQUFNeEosRUFBU3FDLENBQVQsQ0FBVixDQUNBLElBQUssR0FBSTJDLEdBQUksQ0FBYixDQUFnQkEsRUFBSXdFLEVBQUlqSCxNQUF4QixDQUFnQ3lDLEdBQWhDLENBQ0ksR0FBSXdFLEVBQUl4RSxDQUFKLEVBQU9sRixLQUFYLEVBQ2dDLFNBQXRCLEtBQUlrRixDQUFKLEVBQU9sRixLQUFQLENBQWE2SixJQUFiLEVBQXlELE1BQXRCLEtBQUkzRSxDQUFKLEVBQU9sRixLQUFQLENBQWE2SixJQUQxRCxDQUM0RSxDQUNwRSxHQUFJZSxHQUFjbEIsRUFBSXhFLENBQUosRUFBT2xGLEtBQVAsQ0FBYWdLLGFBQS9CLENBQ0lhLEVBQVcsS0FBS25MLFVBQUwsQ0FBZ0IsS0FBS0EsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBQXpDLENBRGYsQ0FFSXFJLEVBQWN0TCxFQUFLQSxJQUFMLENBQVVxTCxDQUFWLENBRmxCLENBR0FELEVBQVlHLFNBQVosQ0FBc0JELENBQXRCLENBQ0gsQ0FHWixDQUVSLENBaEJELENBaEVjLENBaUZkLEtBQUtySyxFQUFMLENBQVEwQixnQkFBUixDQUF5QixVQUF6QixDQUFxQyxJQUFlLENBQ2hELElBQUssR0FBSUksR0FBSSxDQUFSLENBQVdDLEVBQUsyRyxFQUFPMUcsTUFBNUIsQ0FBb0NGLEVBQUlDLENBQXhDLENBQTRDRCxHQUE1QyxDQUFpRCxDQUM3QyxHQUFJbUgsR0FBTXhKLEVBQVNxQyxDQUFULENBQVYsQ0FDQSxJQUFLLEdBQUkyQyxHQUFJLENBQWIsQ0FBZ0JBLEVBQUl3RSxFQUFJakgsTUFBeEIsQ0FBZ0N5QyxHQUFoQyxDQUNJLEdBQUl3RSxFQUFJeEUsQ0FBSixFQUFPbEYsS0FBWCxFQUNnQyxTQUF0QixLQUFJa0YsQ0FBSixFQUFPbEYsS0FBUCxDQUFhNkosSUFBYixFQUF5RCxNQUF0QixLQUFJM0UsQ0FBSixFQUFPbEYsS0FBUCxDQUFhNkosSUFEMUQsQ0FDNEUsQ0FDcEUsR0FBSWUsR0FBY2xCLEVBQUl4RSxDQUFKLEVBQU9sRixLQUFQLENBQWFnSyxhQUEvQixDQUNBWSxFQUFZRyxTQUFaLEVBQ0gsQ0FHWixDQUNKLENBWkQsQ0FhSCxDQUVEM0IsaUJBQWtCRCxDQUFsQixDQUEwQixDQVd0QixNQVZJLGVBQUs2QixnQkFVVCxFQVRJLEtBQUtBLGdCQUFMLENBQXdCLEtBQUt2SyxFQUFMLENBQVF3SyxZQUFSLENBQXFCLEtBQUtuTCxpQkFBMUIsQ0FBNkNxSixDQUE3QyxDQVM1QixDQVJJbEosT0FBT3lLLE1BQVAsQ0FBZ0IzSixZQUFZQyxHQUFaLEdBQW9CLEtBQUtGLEVBUTdDLENBUEksS0FBS2tLLGdCQUFMLENBQXNCRSxJQUF0QixFQU9KLEVBTEksS0FBS0YsZ0JBQUwsQ0FBc0JmLE1BQXRCLENBQTZCZCxDQUE3QixDQUtKLENBSEksS0FBSzlILGdCQUdULEVBRkksS0FBSzhKLFlBQUwsQ0FBa0IsS0FBS0gsZ0JBQUwsQ0FBc0JJLFdBQXhDLENBRUosQ0FBTyxLQUFLSixnQkFBTCxDQUFzQkksV0FDaEMsQ0FFREMsV0FBWTFFLENBQVosQ0FBaUIsQ0FFYixRQUFTMkUsRUFBVCxDQUFrQjNFLENBQWxCLENBQXVCNEUsQ0FBdkIsQ0FBNEIsQ0FDeEIsR0FBSUMsRUFBSixDQUNBRCxFQUFNQSxLQUZrQixDQUl4QixJQUFLLEdBQUloSixHQUFJLENBQVIsQ0FBV0MsRUFBS21FLEVBQUlsRSxNQUF6QixDQUFpQ0YsRUFBSUMsQ0FBckMsQ0FBeUNELEdBQXpDLENBQ0lpSixFQUFVN0UsRUFBSVEsTUFBSixDQUFXNUUsQ0FBWCxDQUFjLENBQWQsQ0FEZCxDQUV1QixDQUFmLEtBQUlFLE1BRlosRUFHUWdKLEVBQVExRyxJQUFSLENBQWF3RyxFQUFJRyxNQUFKLENBQVdGLENBQVgsRUFBb0JHLElBQXBCLENBQXlCLEdBQXpCLENBQWIsQ0FIUixDQUtJTCxFQUFRM0UsRUFBSXVCLEtBQUosRUFBUixDQUFxQnFELEVBQUlHLE1BQUosQ0FBV0YsQ0FBWCxDQUFyQixDQUxKLENBTUk3RSxFQUFJUSxNQUFKLENBQVc1RSxDQUFYLENBQWMsQ0FBZCxDQUFpQmlKLEVBQVEsQ0FBUixDQUFqQixDQU5KLENBUUEsTUFBT0MsRUFDVixDQWRELEdBQUlBLEtBQUosQ0FlQSxHQUFJRyxHQUFjTixFQUFRM0UsQ0FBUixDQUFsQixDQUNBLE1BQU9pRixHQUFZRCxJQUFaLENBQWlCLE1BQWpCLENBQ1YsQ0FFREUsVUFBV0MsQ0FBWCxDQUFzQmxLLENBQXRCLENBQTRCLENBQ3hCLElBQUssR0FBSTJHLEVBQVQsR0FBZ0IzRyxFQUFoQixDQUNJLEdBQUlBLEVBQUs0RyxjQUFMLENBQW9CRCxDQUFwQixDQUFKLENBQThCLENBQzFCLEdBQUlJLEdBQU9KLEVBQUl3RCxLQUFKLENBQVUsR0FBVixDQUFYLENBQ0lDLEVBQWtCLEtBQUtYLFVBQUwsQ0FBZ0IxQyxDQUFoQixFQUFzQm9ELEtBQXRCLENBQTRCLE1BQTVCLENBRHRCLENBRUEsR0FBMkMsQ0FBQyxDQUF4QyxLQUFnQjNFLE9BQWhCLENBQXdCMEUsQ0FBeEIsQ0FBSixDQUNJLE1BQU9FLEdBQWdCLENBQWhCLENBQVAsQ0FFQSxRQUVQLENBRUwsUUFDSCxDQUVEMUcsWUFBYTJHLENBQWIsQ0FBd0JDLENBQXhCLENBQW1DLENBQy9CLEdBQUl4RSxLQUFKLENBQ0lvRSxFQUFZLEVBRGhCLENBRUlLLEVBQWFGLEVBQVVGLEtBQVYsQ0FBZ0IsR0FBaEIsQ0FGakIsQ0FHSUssSUFISixDQUlJQyxJQUpKLENBS0lDLElBTEosQ0FNSTtBQUNBO0FBQ0E7QUFDQUMsS0FUSixDQVVJeEMsSUFWSixDQVdJL0UsSUFYSixDQVlJa0YsSUFaSixDQWFJcEQsRUFBYSxLQUFLdkYsVUFBTCxDQUFnQixLQUFLN0IsVUFBTCxDQUFnQixLQUFLQSxVQUFMLENBQWdCK0MsTUFBaEIsQ0FBeUIsQ0FBekMsQ0FBaEIsQ0FiakIsQ0FxQkEsR0FOQTBKLEVBQVdwSCxJQUFYLENBQWdCeUgsS0FBaEIsQ0FBc0JMLENBQXRCLENBTUEsQ0FMQXpFLEVBQVV5RSxFQUFXMUYsTUFBWCxDQUFtQnZGLENBQUQsRUFBTyxDQUMvQixNQUFjLEVBQU4sSUFDWCxDQUZTLENBS1YsQ0FGQTRLLEVBQVlwRSxFQUFRaUUsSUFBUixDQUFhLEdBQWIsQ0FFWixDQURBVyxFQUFnQixLQUFLMUssSUFBTCxDQUFVLEtBQUtpSyxTQUFMLENBQWVDLENBQWYsQ0FBMEIsS0FBS2xLLElBQS9CLENBQVYsQ0FDaEIsQ0FBSTBLLENBQUosQ0FBbUIsQ0FDZixJQUFLLEdBQUkvSixHQUFJLENBQVIsQ0FBV0MsRUFBSzhKLEVBQWM3SixNQUFuQyxDQUEyQ0YsRUFBSUMsQ0FBL0MsQ0FBbURELEdBQW5ELENBQ0k4SixFQUFnQixLQUFLNUwsRUFBTCxDQUFRZ00sbUJBQVIsRUFEcEIsQ0FFSUosRUFBYzVGLE1BQWQsQ0FBcUI2RixFQUFjL0osQ0FBZCxDQUFyQixDQUZKLENBR0k2SixFQUFlckgsSUFBZixDQUFvQnNILENBQXBCLENBSEosQ0E0QkEsTUF2QkFFLEdBQWUsS0FBSzdMLFNBQUwsQ0FBZWdNLGFBQWYsQ0FBNkJOLENBQTdCLENBdUJmLENBYkFyQyxFQUFhLENBQ1R0SyxPQUFRLENBQ0prTixVQUFXLENBQUMsS0FBS2pOLFVBQUwsQ0FBZ0IsS0FBS0EsVUFBTCxDQUFnQitDLE1BQWhCLENBQXlCLENBQXpDLENBQUQsQ0FEUCxDQUVKZ0csUUFBUyxDQUFDeUQsQ0FBRCxDQUZMLENBR0pVLFdBQVksSUFIUixDQUlKQyxjQUFlLEtBQUs5SyxXQUpoQixDQUtKK0UsV0FBWUEsQ0FMUixDQU1KckgsT0FBUSxLQUFLTSxXQU5ULENBREMsQ0FTVCtNLFVBQVdQLENBVEYsQ0FhYixDQUZBdkgsRUFBVSxLQUFLdkUsRUFBTCxDQUFRd0UsV0FBUixDQUFvQjhFLENBQXBCLENBRVYsQ0FEQUcsRUFBU2xGLEVBQVErSCxRQUFSLEVBQ1QsQ0FBTyxDQUFDLENBQ0osSUFBTzdDLEVBQU94RyxHQURWLENBRUosSUFBT3dHLEVBQU96RyxHQUZWLENBQUQsQ0FHSixDQUNDb0csS0FBTSxLQUFLakssU0FEWixDQUVDNkUsTUFBTyxNQUZSLENBR0NDLE9BQVEsTUFIVCxDQUlDc0YsY0FBZWhGLENBSmhCLENBSEksQ0FTVixDQUNKLENBRURtRyxhQUFjQyxDQUFkLENBQTJCLENBcUJ2QixRQUFTNEIsRUFBVCxDQUF3QkMsQ0FBeEIsQ0FBZ0N0RyxDQUFoQyxDQUFxQ3VHLENBQXJDLENBQTZDQyxDQUE3QyxDQUF3RCxDQUNwRCxJQUFLLEdBQUk1SyxHQUFJLENBQWIsQ0FBZ0JBLEVBQUkySyxDQUFwQixDQUE0QixFQUFFM0ssQ0FBOUIsQ0FBaUMsQ0FDN0IsR0FBSTZLLEdBQUtILEVBQU8xSyxDQUFQLEVBQVU4SyxRQUFuQixDQUNJQyxFQUFPTCxFQUFPMUssQ0FBUCxDQURYLENBRUErSyxFQUFLQyxTQUFMLENBQWlCNUcsRUFBSXBFLENBQUosQ0FIWSxDQUk3QitLLEVBQUtFLFFBQUwsQ0FBZ0JqSSxTQUFTNkgsRUFBR3BKLEtBQUgsQ0FBU3lKLElBQWxCLENBSmEsQ0FLN0JILEVBQUtJLE9BQUwsQ0FBZUosRUFBS0UsUUFBTCxDQUFnQmpJLFNBQVM2SCxFQUFHcEosS0FBSCxDQUFTUyxLQUFsQixFQUEyQixDQUw3QixDQU03QjZJLEVBQUtwSCxLQUFMLENBQWEzRCxDQU5nQixDQU83QitLLEVBQUtLLE1BQUwsQ0FBYyxDQVBlLENBUTdCTCxFQUFLTSxLQUFMLENBQWFSLEVBQUdwSixLQUFILENBQVM2SixNQVJPLENBUzdCdEgsRUFBS3VILFVBQUwsQ0FBZ0JSLEVBQUtELFFBQXJCLENBQStCLFNBQW9CVSxDQUFwQixDQUE0QixDQUN2RFgsRUFBR3BKLEtBQUgsQ0FBU3lKLElBQVQsQ0FBZ0JILEVBQUtFLFFBQUwsQ0FBZ0JPLENBQWhCLENBQXFCVCxFQUFLSyxNQUExQixDQUFtQyxJQURJLENBRXZEUCxFQUFHcEosS0FBSCxDQUFTNkosTUFBVCxJQUZ1RCxDQUd2REcsRUFBZVYsRUFBS3BILEtBQXBCLElBQWtDK0csQ0FBbEMsQ0FIdUQsQ0FJdkRlLEVBQWVWLEVBQUtwSCxLQUFwQixJQUFpQytHLENBQWpDLENBQ0gsQ0FMRCxDQUtHLFVBQW9CLENBQ25CLEdBQUlnQixLQUFKLENBQ0kvSSxFQUFJLENBRFIsQ0FLQSxJQUhBb0ksRUFBS0ssTUFBTCxDQUFjLENBR2QsQ0FGQVAsRUFBR3BKLEtBQUgsQ0FBUzZKLE1BQVQsQ0FBa0JQLEVBQUtNLEtBRXZCLENBREFSLEVBQUdwSixLQUFILENBQVN5SixJQUFULENBQWdCSCxFQUFLRSxRQUFMLENBQWdCLElBQ2hDLENBQU90SSxFQUFJZ0ksQ0FBWCxDQUFtQixFQUFFaEksQ0FBckIsQ0FDUWlJLEVBQVVqSSxDQUFWLElBQWlCK0gsRUFBTy9ILENBQVAsRUFBVXFJLFNBRG5DLEdBRVFKLEVBQVVqSSxDQUFWLEVBQWUrSCxFQUFPL0gsQ0FBUCxFQUFVcUksU0FGakMsQ0FHUVUsSUFIUixFQU1JQSxDQVplLEVBYWZoTyxPQUFPaU8sVUFBUCxDQUFrQixVQUFZLENBQzFCM0gsRUFBS2hGLFVBQUwsQ0FBa0JnRixFQUFLL0UsZUFBTCxFQURRLENBRTFCK0UsRUFBS3BHLGNBQUwsRUFDSCxDQUhELENBR0csRUFISCxDQUtQLENBdkJELENBd0JILENBQ0osQ0FFRCxRQUFTNk4sRUFBVCxDQUF5QjlILENBQXpCLENBQWdDaUksQ0FBaEMsQ0FBeUNsQixDQUF6QyxDQUFpRCxDQUM3QyxHQUFJbUIsS0FBSixDQUNJQyxFQUFXcEIsRUFBTy9HLENBQVAsQ0FEZixDQUVJb0ksRUFBVUgsRUFBVWpJLEVBQVEsQ0FBbEIsQ0FBc0JBLEVBQVEsQ0FGNUMsQ0FHSXFJLEVBQVd0QixFQUFPcUIsQ0FBUCxDQUhmLENBSUE7QUFDSUMsRUFOeUMsR0FPekNILEVBQU1ySixJQUFOLENBQVcsQ0FBQ29KLENBQUQsRUFBYTVJLFNBQVM4SSxFQUFTaEIsUUFBVCxDQUFrQnJKLEtBQWxCLENBQXdCeUosSUFBakMsRUFBeUNjLEVBQVNiLE9BQTFFLENBUHlDLENBUXpDVSxFQUFNckosSUFBTixDQUFXcUosRUFBTUksR0FBTixJQUFnQkwsR0FBVzVJLFNBQVM4SSxFQUFTaEIsUUFBVCxDQUFrQnJKLEtBQWxCLENBQXdCeUosSUFBakMsRUFBeUNjLEVBQVNmLFFBQXhGLENBUnlDLENBU3JDWSxFQUFNSSxHQUFOLEVBVHFDLEdBVXJDSixFQUFNckosSUFBTixDQUFXd0osRUFBU2IsT0FBcEIsQ0FWcUMsQ0FXckNVLEVBQU1ySixJQUFOLENBQVd3SixFQUFTZixRQUFwQixDQVhxQyxDQVlyQ1ksRUFBTXJKLElBQU4sQ0FBV3dKLEVBQVNySSxLQUFwQixDQVpxQyxDQWFoQ2lJLENBYmdDLENBZ0JqQ0UsRUFBU1YsTUFBVCxFQUFtQnBJLFNBQVNnSixFQUFTbEIsUUFBVCxDQUFrQnJKLEtBQWxCLENBQXdCUyxLQUFqQyxDQWhCYyxDQWNqQzRKLEVBQVNWLE1BQVQsRUFBbUJwSSxTQUFTZ0osRUFBU2xCLFFBQVQsQ0FBa0JySixLQUFsQixDQUF3QlMsS0FBakMsQ0FkYyxDQWtCckM4SixFQUFTZixRQUFULENBQW9CYSxFQUFTYixRQWxCUSxDQW1CckNlLEVBQVNiLE9BQVQsQ0FBbUJXLEVBQVNYLE9BbkJTLENBb0JyQ2EsRUFBU3JJLEtBQVQsQ0FBaUJtSSxFQUFTbkksS0FwQlcsQ0FxQnJDcUksRUFBU2xCLFFBQVQsQ0FBa0JySixLQUFsQixDQUF3QnlKLElBQXhCLENBQStCYyxFQUFTZixRQUFULENBQW9CLElBckJkLENBc0JyQ1ksRUFBTXJKLElBQU4sQ0FBV2tJLEVBQU9xQixDQUFQLENBQVgsQ0F0QnFDLENBdUJyQ3JCLEVBQU9xQixDQUFQLEVBQWtCckIsRUFBTy9HLENBQVAsQ0F2Qm1CLENBd0JyQytHLEVBQU8vRyxDQUFQLEVBQWdCa0ksRUFBTUksR0FBTixFQXhCcUIsR0E0QnhCLENBQWpCLEtBQU0vTCxNQTVCbUMsR0E2QnpDNEwsRUFBU25JLEtBQVQsQ0FBaUJrSSxFQUFNSSxHQUFOLEVBN0J3QixDQThCekNILEVBQVNiLFFBQVQsQ0FBb0JZLEVBQU1JLEdBQU4sRUE5QnFCLENBK0J6Q0gsRUFBU1gsT0FBVCxDQUFtQlUsRUFBTUksR0FBTixFQS9Cc0IsQ0FpQ2hELENBMUZEO0FBQ0EsSUFLSUMsRUFMSixDQU1JQyxDQU5KLENBQUlDLEVBQWEsS0FBS3hOLFdBQUwsQ0FBaUIxQixNQUFsQyxDQUNJQyxFQUFhaVAsRUFBV2pQLFVBQVgsSUFEakIsQ0FFSUMsRUFBV2dQLEVBQVdoUCxRQUFYLElBRmYsQ0FHSWlQLEVBQWlCalAsRUFBUzhDLE1BSDlCLENBSUlvTSxFQUFtQixDQUp2QixDQU9JdEksRUFBTyxJQVBYLENBUUE7QUFDQTZFLEdBQWNBLEVBQVksQ0FBWixDQVhTLENBYXZCMUwsRUFBYUEsRUFBV3dJLEtBQVgsQ0FBaUIsQ0FBakIsQ0FBb0J4SSxFQUFXK0MsTUFBWCxDQUFvQixDQUF4QyxDQWJVLENBY3ZCb00sRUFBbUJuUCxFQUFXK0MsTUFkUCxDQWdCdkJnTSxFQUFtQnJELEVBQVlsRCxLQUFaLENBQWtCLENBQWxCLENBQXFCMkcsQ0FBckIsQ0FoQkksQ0FrQnZCSCxFQUFpQnRELEVBQVlsRCxLQUFaLENBQWtCMkcsRUFBbUIsQ0FBckMsQ0FBd0NBLEVBQW1CRCxDQUFuQixDQUFvQyxDQUE1RSxDQWxCTSxDQW1CdkI1QixFQUFjeUIsQ0FBZCxDQUFnQy9PLENBQWhDLENBQTRDbVAsQ0FBNUMsQ0FBOEQsS0FBS25QLFVBQW5FLENBbkJ1QixDQW9CdkJzTixFQUFjMEIsQ0FBZCxDQUE4Qi9PLENBQTlCLENBQXdDaVAsQ0FBeEMsQ0FBd0QsS0FBS2pQLFFBQTdELENBd0VILENBRURtTyxXQUFZVixDQUFaLENBQWdCMEIsQ0FBaEIsQ0FBeUJDLENBQXpCLENBQW1DLENBRy9CLFFBQVNDLEVBQVQsQ0FBd0JDLENBQXhCLENBQTJCLENBQ3ZCSCxFQUFRRyxFQUFFQyxPQUFGLENBQVlDLENBQXBCLENBQXVCRixFQUFFRyxPQUFGLENBQVlDLENBQW5DLENBQ0gsQ0FTRCxRQUFTQyxFQUFULEVBQTRCLENBQ3hCbEMsRUFBR3BKLEtBQUgsQ0FBU3VMLE9BQVQsQ0FBbUIsQ0FESyxDQUV4Qm5DLEVBQUdvQyxTQUFILENBQWFDLE1BQWIsQ0FBb0IsVUFBcEIsQ0FGd0IsQ0FHeEJ4UCxPQUFPNEQsUUFBUCxDQUFnQjZMLG1CQUFoQixDQUFvQyxXQUFwQyxDQUFpRFYsQ0FBakQsQ0FId0IsQ0FJeEIvTyxPQUFPNEQsUUFBUCxDQUFnQjZMLG1CQUFoQixDQUFvQyxTQUFwQyxDQUErQ0osQ0FBL0MsQ0FKd0IsQ0FLeEJyUCxPQUFPaU8sVUFBUCxDQUFrQmEsQ0FBbEIsQ0FBNEIsRUFBNUIsQ0FDSCxDQW5CRCxHQUFJSSxHQUFJLENBQVIsQ0FDSUUsRUFBSSxDQURSLENBS0FqQyxFQUFHakwsZ0JBQUgsQ0FBb0IsV0FBcEIsQ0FBaUMsU0FBVThNLENBQVYsQ0FBYSxDQUMxQ0UsRUFBSUYsRUFBRUMsT0FEb0MsQ0FFMUNHLEVBQUlKLEVBQUVHLE9BRm9DLENBRzFDaEMsRUFBR3BKLEtBQUgsQ0FBU3VMLE9BQVQsQ0FBbUIsR0FIdUIsQ0FJMUNuQyxFQUFHb0MsU0FBSCxDQUFhRyxHQUFiLENBQWlCLFVBQWpCLENBSjBDLENBSzFDMVAsT0FBTzRELFFBQVAsQ0FBZ0IxQixnQkFBaEIsQ0FBaUMsV0FBakMsQ0FBOEM2TSxDQUE5QyxDQUwwQyxDQU0xQy9PLE9BQU80RCxRQUFQLENBQWdCMUIsZ0JBQWhCLENBQWlDLFNBQWpDLENBQTRDbU4sQ0FBNUMsQ0FDSCxDQVBELENBZUgsQ0FFRDFILFVBQVdXLENBQVgsQ0FBZ0I3QixDQUFoQixDQUFxQixDQUNqQixNQUFRbEgsRUFBRCxFQUFVQSxFQUFLK0ksQ0FBTCxJQUFjN0IsQ0FDbEMsQ0FoNEJhLENBbTRCbEJ0RyxPQUFPQyxPQUFQLENBQWlCZixXOzs7Ozs7QUN0NEJqQmMsUUFBT0MsT0FBUCxteU0iLCJmaWxlIjoiY3Jvc3N0YWItZXh0LWVzNi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBlYzY3NmFkZjU3OGNiNGMzZjk5NSIsImNvbnN0IENyb3NzdGFiRXh0ID0gcmVxdWlyZSgnLi9jcm9zc3RhYkV4dCcpLFxuICAgIGRhdGEgPSByZXF1aXJlKCcuL2xhcmdlRGF0YScpO1xuXG52YXIgY29uZmlnID0ge1xuICAgIGRpbWVuc2lvbnM6IFsnUHJvZHVjdCcsICdTdGF0ZScsICdNb250aCddLFxuICAgIG1lYXN1cmVzOiBbJ1Byb2ZpdCcsICdWaXNpdG9ycycsICdTYWxlJ10sXG4gICAgY2hhcnRUeXBlOiAnY29sdW1uMmQnLFxuICAgIG5vRGF0YU1lc3NhZ2U6ICdObyBkYXRhIHRvIGRpc3BsYXkuJyxcbiAgICBjcm9zc3RhYkNvbnRhaW5lcjogJ2Nyb3NzdGFiLWRpdicsXG4gICAgLy8gY2VsbFdpZHRoOiAyMTAsXG4gICAgLy8gY2VsbEhlaWdodDogMTEzLFxuICAgIC8vIHNob3dGaWx0ZXI6IGZhbHNlLFxuICAgIC8vIGRyYWdnYWJsZUhlYWRlcnM6IHRydWUsXG4gICAgLy8gYWdncmVnYXRpb246ICdzdW0nLFxuICAgIGNoYXJ0Q29uZmlnOiB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAnc2hvd0JvcmRlcic6ICcwJyxcbiAgICAgICAgICAgICdzaG93VmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ2RpdkxpbmVBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdudW1iZXJQcmVmaXgnOiAn4oK5JyxcbiAgICAgICAgICAgICdyb3RhdGVWYWx1ZXMnOiAnMScsXG4gICAgICAgICAgICAncm9sbE92ZXJCYW5kQ29sb3InOiAnI0IyQjZERCcsXG4gICAgICAgICAgICAnY29sdW1uSG92ZXJDb2xvcic6ICcjNjE2RkY5JyxcbiAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6ICcxMCcsXG4gICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiAnMTAnLFxuICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6ICc1JyxcbiAgICAgICAgICAgICdjaGFydFJpZ2h0TWFyZ2luJzogJzUnLFxuICAgICAgICAgICAgJ3plcm9QbGFuZVRoaWNrbmVzcyc6ICcxJyxcbiAgICAgICAgICAgICdzaG93WmVyb1BsYW5lVmFsdWUnOiAnMScsXG4gICAgICAgICAgICAnemVyb1BsYW5lQWxwaGEnOiAnMTAwJyxcbiAgICAgICAgICAgICdiZ0NvbG9yJzogJyNGRkZGRkYnLFxuICAgICAgICAgICAgJ3Nob3dYQXhpc0xpbmUnOiAnMScsXG4gICAgICAgICAgICAncGxvdEJvcmRlckFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3Nob3dYYXhpc1ZhbHVlcyc6ICcwJyxcbiAgICAgICAgICAgICdzaG93WUF4aXNWYWx1ZXMnOiAnMCcsXG4gICAgICAgICAgICAnYW5pbWF0aW9uJzogJzAnLFxuICAgICAgICAgICAgJ3RyYW5zcG9zZUFuaW1hdGlvbic6ICcxJyxcbiAgICAgICAgICAgICdhbHRlcm5hdGVIR3JpZEFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3Bsb3RDb2xvckluVG9vbHRpcCc6ICcwJyxcbiAgICAgICAgICAgICdjYW52YXNCb3JkZXJBbHBoYSc6ICcxMDAnLFxuICAgICAgICAgICAgJ2FsdGVybmF0ZVZHcmlkQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAncGFsZXR0ZUNvbG9ycyc6ICcjQjVCOUJBJyxcbiAgICAgICAgICAgICd1c2VQbG90R3JhZGllbnRDb2xvcic6ICcwJyxcbiAgICAgICAgICAgICd2YWx1ZUZvbnRDb2xvcic6ICcjRkZGRkZGJyxcbiAgICAgICAgICAgICdkcmF3VHJlbmRSZWdpb24nOiAnMSdcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0Jykge1xuICAgIHdpbmRvdy5jcm9zc3RhYiA9IG5ldyBDcm9zc3RhYkV4dChkYXRhLCBjb25maWcpO1xuICAgIHdpbmRvdy5jcm9zc3RhYi5yZW5kZXJDcm9zc3RhYigpO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IENyb3NzdGFiRXh0O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIiwiLyoqXG4gKiBSZXByZXNlbnRzIGEgY3Jvc3N0YWIuXG4gKi9cbmNsYXNzIENyb3NzdGFiRXh0IHtcbiAgICBjb25zdHJ1Y3RvciAoZGF0YSwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuZXZlbnRMaXN0ID0ge1xuICAgICAgICAgICAgJ21vZGVsVXBkYXRlZCc6ICdtb2RlbHVwZGF0ZWQnLFxuICAgICAgICAgICAgJ21vZGVsRGVsZXRlZCc6ICdtb2RlbGRlbGV0ZWQnLFxuICAgICAgICAgICAgJ21ldGFJbmZvVXBkYXRlJzogJ21ldGFpbmZvdXBkYXRlZCcsXG4gICAgICAgICAgICAncHJvY2Vzc29yVXBkYXRlZCc6ICdwcm9jZXNzb3J1cGRhdGVkJyxcbiAgICAgICAgICAgICdwcm9jZXNzb3JEZWxldGVkJzogJ3Byb2Nlc3NvcmRlbGV0ZWQnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIGlmICh0eXBlb2YgTXVsdGlDaGFydGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5tYyA9IG5ldyBNdWx0aUNoYXJ0aW5nKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZSA9IHRoaXMubWMuY3JlYXRlRGF0YVN0b3JlKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5zZXREYXRhKHsgZGF0YVNvdXJjZTogdGhpcy5kYXRhIH0pO1xuICAgICAgICAgICAgdGhpcy50MSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RvcmVQYXJhbXMgPSB7XG4gICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgY29uZmlnOiBjb25maWdcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5jaGFydFR5cGUgPSBjb25maWcuY2hhcnRUeXBlO1xuICAgICAgICB0aGlzLnNob3dGaWx0ZXIgPSBjb25maWcuc2hvd0ZpbHRlciB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5kcmFnZ2FibGVIZWFkZXJzID0gY29uZmlnLmRyYWdnYWJsZUhlYWRlcnMgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuY2hhcnRDb25maWcgPSBjb25maWcuY2hhcnRDb25maWc7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IGNvbmZpZy5kaW1lbnNpb25zO1xuICAgICAgICB0aGlzLm1lYXN1cmVzID0gY29uZmlnLm1lYXN1cmVzO1xuICAgICAgICB0aGlzLm1lYXN1cmVPblJvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSB0aGlzLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICB0aGlzLmNvbHVtbktleUFyciA9IFtdO1xuICAgICAgICB0aGlzLmNlbGxXaWR0aCA9IGNvbmZpZy5jZWxsV2lkdGggfHwgMjEwO1xuICAgICAgICB0aGlzLmNlbGxIZWlnaHQgPSBjb25maWcuY2VsbEhlaWdodCB8fCAxMTM7XG4gICAgICAgIHRoaXMuY3Jvc3N0YWJDb250YWluZXIgPSBjb25maWcuY3Jvc3N0YWJDb250YWluZXI7XG4gICAgICAgIHRoaXMuaGFzaCA9IHRoaXMuZ2V0RmlsdGVySGFzaE1hcCgpO1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5hZ2dyZWdhdGlvbiA9IGNvbmZpZy5hZ2dyZWdhdGlvbiB8fCAnc3VtJztcbiAgICAgICAgdGhpcy5heGVzID0gW107XG4gICAgICAgIHRoaXMubm9EYXRhTWVzc2FnZSA9IGNvbmZpZy5ub0RhdGFNZXNzYWdlO1xuICAgICAgICBpZiAodHlwZW9mIEZDRGF0YUZpbHRlckV4dCA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGlzLnNob3dGaWx0ZXIpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJDb25maWcgPSB7fTtcbiAgICAgICAgICAgIHRoaXMuZGF0YUZpbHRlckV4dCA9IG5ldyBGQ0RhdGFGaWx0ZXJFeHQodGhpcy5kYXRhU3RvcmUsIGZpbHRlckNvbmZpZywgJ2NvbnRyb2wtYm94Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kYXRhU3RvcmUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TGlzdC5tb2RlbFVwZGF0ZWQsIChlLCBkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSB0aGlzLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJDcm9zc3RhYigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBnbG9iYWwgZGF0YSBmcm9tIHRoZSBkYXRhIHN0b3JlIGZvciBpbnRlcm5hbCB1c2UuXG4gICAgICovXG4gICAgYnVpbGRHbG9iYWxEYXRhICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSkge1xuICAgICAgICAgICAgbGV0IGZpZWxkcyA9IHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSxcbiAgICAgICAgICAgICAgICBnbG9iYWxEYXRhID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWVsZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGdsb2JhbERhdGFbZmllbGRzW2ldXSA9IHRoaXMuZGF0YVN0b3JlLmdldFVuaXF1ZVZhbHVlcyhmaWVsZHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbERhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVSb3cgKHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuICAgICAgICB2YXIgcm93c3BhbiA9IDAsXG4gICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IHJvd09yZGVyW2N1cnJlbnRJbmRleF0sXG4gICAgICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuICAgICAgICAgICAgaSwgbCA9IGZpZWxkVmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgIHJvd0VsZW1lbnQsXG4gICAgICAgICAgICBoYXNGdXJ0aGVyRGVwdGggPSBjdXJyZW50SW5kZXggPCAocm93T3JkZXIubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuICAgICAgICAgICAgY29sTGVuZ3RoID0gdGhpcy5jb2x1bW5LZXlBcnIubGVuZ3RoLFxuICAgICAgICAgICAgaHRtbFJlZixcbiAgICAgICAgICAgIG1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgbWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgbWlubWF4T2JqID0ge307XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJyc7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZFZhbHVlc1tpXTtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICgodGhpcy5jZWxsSGVpZ2h0IC0gMTApIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgY2xhc3NTdHIgKz0gJ3Jvdy1kaW1lbnNpb25zJyArXG4gICAgICAgICAgICAgICAgJyAnICsgdGhpcy5kaW1lbnNpb25zW2N1cnJlbnRJbmRleF0udG9Mb3dlckNhc2UoKSArXG4gICAgICAgICAgICAgICAgJyAnICsgZmllbGRWYWx1ZXNbaV0udG9Mb3dlckNhc2UoKSArICcgbm8tc2VsZWN0JztcbiAgICAgICAgICAgIC8vIGlmIChjdXJyZW50SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAvLyAgICAgaHRtbFJlZi5jbGFzc0xpc3QuYWRkKHRoaXMuZGltZW5zaW9uc1tjdXJyZW50SW5kZXggLSAxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIHRoaXMuY29ybmVyV2lkdGggPSBmaWVsZFZhbHVlc1tpXS5sZW5ndGggKiAxMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICByb3dFbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNvcm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5ID0gZmlsdGVyZWREYXRhU3RvcmUgKyBmaWVsZFZhbHVlc1tpXSArICd8JztcbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUucHVzaChbcm93RWxlbWVudF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXS5wdXNoKHJvd0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0Z1cnRoZXJEZXB0aCkge1xuICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQucm93c3BhbiA9IHRoaXMuY3JlYXRlUm93KHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4ICsgMSwgZmlsdGVyZWREYXRhSGFzaEtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAneS1heGlzLWNoYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nOiBhZGFwdGVyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbExlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydENlbGxPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jZWxsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY2VsbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93SGFzaDogZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEhhc2g6IHRoaXMuY29sdW1uS2V5QXJyW2pdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdLnB1c2goY2hhcnRDZWxsT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgbWlubWF4T2JqID0gdGhpcy5nZXRDaGFydE9iaihmaWx0ZXJlZERhdGFIYXNoS2V5LCB0aGlzLmNvbHVtbktleUFycltqXSlbMF07XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IChwYXJzZUludChtaW5tYXhPYmoubWF4KSA+IG1heCkgPyBtaW5tYXhPYmoubWF4IDogbWF4O1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSAocGFyc2VJbnQobWlubWF4T2JqLm1pbikgPCBtaW4pID8gbWlubWF4T2JqLm1pbiA6IG1pbjtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLm1heCA9IG1heDtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLm1pbiA9IG1pbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzcGFuICs9IHJvd0VsZW1lbnQucm93c3BhbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93c3BhbjtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGVDb2wgKHRhYmxlLCBkYXRhLCBjb2xPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuICAgIC8vICAgICB2YXIgY29sc3BhbiA9IDAsXG4gICAgLy8gICAgICAgICBmaWVsZENvbXBvbmVudCA9IGNvbE9yZGVyW2N1cnJlbnRJbmRleF0sXG4gICAgLy8gICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuICAgIC8vICAgICAgICAgaSwgbCA9IGZpZWxkVmFsdWVzLmxlbmd0aCxcbiAgICAvLyAgICAgICAgIGNvbEVsZW1lbnQsXG4gICAgLy8gICAgICAgICBoYXNGdXJ0aGVyRGVwdGggPSBjdXJyZW50SW5kZXggPCAoY29sT3JkZXIubGVuZ3RoIC0gMSksXG4gICAgLy8gICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuICAgIC8vICAgICAgICAgaHRtbFJlZjtcblxuICAgIC8vICAgICBpZiAodGFibGUubGVuZ3RoIDw9IGN1cnJlbnRJbmRleCkge1xuICAgIC8vICAgICAgICAgdGFibGUucHVzaChbXSk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgIC8vICAgICAgICAgbGV0IGNsYXNzU3RyID0gJyc7XG4gICAgLy8gICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIC8vICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZFZhbHVlc1tpXTtcbiAgICAvLyAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgLy8gICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuICAgIC8vICAgICAgICAgY2xhc3NTdHIgKz0gJ2NvbHVtbi1kaW1lbnNpb25zJyArXG4gICAgLy8gICAgICAgICAgICAgJyAnICsgdGhpcy5tZWFzdXJlc1tjdXJyZW50SW5kZXhdICtcbiAgICAvLyAgICAgICAgICAgICAnICcgKyBmaWVsZFZhbHVlc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcbiAgICAvLyAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgLy8gICAgICAgICBjb2xFbGVtZW50ID0ge1xuICAgIC8vICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcbiAgICAvLyAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29ybmVySGVpZ2h0LFxuICAgIC8vICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgLy8gICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAvLyAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAvLyAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgLy8gICAgICAgICB9O1xuXG4gICAgLy8gICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5ID0gZmlsdGVyZWREYXRhU3RvcmUgKyBmaWVsZFZhbHVlc1tpXSArICd8JztcblxuICAgIC8vICAgICAgICAgdGFibGVbY3VycmVudEluZGV4XS5wdXNoKGNvbEVsZW1lbnQpO1xuXG4gICAgLy8gICAgICAgICBpZiAoaGFzRnVydGhlckRlcHRoKSB7XG4gICAgLy8gICAgICAgICAgICAgY29sRWxlbWVudC5jb2xzcGFuID0gdGhpcy5jcmVhdGVDb2wodGFibGUsIGRhdGEsIGNvbE9yZGVyLCBjdXJyZW50SW5kZXggKyAxLCBmaWx0ZXJlZERhdGFIYXNoS2V5KTtcbiAgICAvLyAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaChmaWx0ZXJlZERhdGFIYXNoS2V5KTtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIGNvbHNwYW4gKz0gY29sRWxlbWVudC5jb2xzcGFuO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBjb2xzcGFuO1xuICAgIC8vIH1cblxuICAgIGNyZWF0ZUNvbCAodGFibGUsIGRhdGEsIG1lYXN1cmVPcmRlcikge1xuICAgICAgICB2YXIgY29sc3BhbiA9IDAsXG4gICAgICAgICAgICBpLCBsID0gdGhpcy5tZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICBjb2xFbGVtZW50LFxuICAgICAgICAgICAgaHRtbFJlZjtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSArPSAxKSB7XG4gICAgICAgICAgICBsZXQgY2xhc3NTdHIgPSAnJyxcbiAgICAgICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IG1lYXN1cmVPcmRlcltpXTtcbiAgICAgICAgICAgICAgICAvLyBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdO1xuICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRDb21wb25lbnQ7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAnNnB4JztcbiAgICAgICAgICAgIC8vIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gKCgzMCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoIC0gMTUpIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIGNsYXNzU3RyICs9ICdjb2x1bW4tZGltZW5zaW9ucycgK1xuICAgICAgICAgICAgICAgICcgJyArIHRoaXMubWVhc3VyZXNbaV0udG9Mb3dlckNhc2UoKSArICcgbm8tc2VsZWN0JztcbiAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZUhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICBjbGFzc1N0ciArPSAnIGRyYWdnYWJsZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvcm5lckhlaWdodCA9IGh0bWxSZWYub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIGNvbEVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmNvbHVtbktleUFyci5wdXNoKHRoaXMubWVhc3VyZXNbaV0pO1xuICAgICAgICAgICAgdGFibGVbMF0ucHVzaChjb2xFbGVtZW50KTtcblxuICAgICAgICAgICAgLy8gZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG5cbiAgICAgICAgICAgIC8vIHRhYmxlW2ldLnB1c2goY29sRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGlmIChoYXNGdXJ0aGVyRGVwdGgpIHtcbiAgICAgICAgICAgIC8vICAgICBjb2xFbGVtZW50LmNvbHNwYW4gPSB0aGlzLmNyZWF0ZUNvbCh0YWJsZSwgZGF0YSwgY29sT3JkZXIpO1xuICAgICAgICAgICAgLy8gfSBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICB0aGlzLmNvbHVtbktleUFyci5wdXNoKGZpbHRlcmVkRGF0YUhhc2hLZXkpO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgLy8gY29sc3BhbiArPSBjb2xFbGVtZW50LmNvbHNwYW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbHNwYW47XG4gICAgfVxuXG4gICAgY3JlYXRlUm93RGltSGVhZGluZyAodGFibGUsIGNvbE9yZGVyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjb3JuZXJDZWxsQXJyID0gW10sXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIGh0bWxSZWYsXG4gICAgICAgICAgICBjbGFzc1N0ciA9ICcnO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSB0aGlzLmRpbWVuc2lvbnNbaV1bMF0udG9VcHBlckNhc2UoKSArIHRoaXMuZGltZW5zaW9uc1tpXS5zdWJzdHIoMSk7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAnNnB4JztcbiAgICAgICAgICAgIGNsYXNzU3RyID0gJ2Nvcm5lci1jZWxsIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29ybmVyQ2VsbEFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25zW2ldICogMTAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaHRtbDogaHRtbFJlZi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcm5lckNlbGxBcnI7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29sRGltSGVhZGluZyAodGFibGUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpID0gaW5kZXgsXG4gICAgICAgICAgICBodG1sUmVmO1xuICAgICAgICBmb3IgKDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICB0YWJsZVtpXS5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaHRtbDogaHRtbFJlZi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXhpcy1oZWFkZXItY2VsbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBjcmVhdGVDYXB0aW9uICh0YWJsZSwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcHRpb24nOiAnU2FsZSBvZiBDZXJlYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJjYXB0aW9uJzogJ0Fjcm9zcyBTdGF0ZXMsIEFjcm9zcyBZZWFycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6ICcwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICB0YWJsZS51bnNoaWZ0KFt7XG4gICAgICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgIGNvbHNwYW46IG1heExlbmd0aCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NhcHRpb24tY2hhcnQnLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjYXB0aW9uJyxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlQ3Jvc3N0YWIgKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBvYmogPSB0aGlzLmdsb2JhbERhdGEsXG4gICAgICAgICAgICByb3dPcmRlciA9IHRoaXMuZGltZW5zaW9ucy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gYXJyW2Fyci5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNvbE9yZGVyID0gdGhpcy5tZWFzdXJlcy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWVhc3VyZU9uUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0YWJsZSA9IFtdLFxuICAgICAgICAgICAgeEF4aXNSb3cgPSBbXSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGFibGUucHVzaCh0aGlzLmNyZWF0ZVJvd0RpbUhlYWRpbmcodGFibGUsIGNvbE9yZGVyLmxlbmd0aCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5jcmVhdGVDb2wodGFibGUsIG9iaiwgY29sT3JkZXIsIDAsICcnKTtcbiAgICAgICAgICAgIHRhYmxlID0gdGhpcy5jcmVhdGVDb2xEaW1IZWFkaW5nKHRhYmxlLCAwKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29sKHRhYmxlLCBvYmosIHRoaXMubWVhc3VyZXMpO1xuICAgICAgICAgICAgdGFibGUucHVzaChbXSk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgb2JqLCByb3dPcmRlciwgMCwgJycpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gKG1heExlbmd0aCA8IHRhYmxlW2ldLmxlbmd0aCkgPyB0YWJsZVtpXS5sZW5ndGggOiBtYXhMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdibGFuay1jZWxsJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeHRyYSBjZWxsIGZvciB5IGF4aXMuIEVzc2VudGlhbGx5IFkgYXhpcyBmb290ZXIuXG4gICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXhpcy1mb290ZXItY2VsbCdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWF4TGVuZ3RoIC0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhbnZhc1BhZGRpbmcnOiAxMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YWJsZS5wdXNoKHhBeGlzUm93KTtcbiAgICAgICAgICAgIHRhYmxlID0gdGhpcy5jcmVhdGVDYXB0aW9uKHRhYmxlLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhYmxlLnB1c2goW3tcbiAgICAgICAgICAgICAgICBodG1sOiAnPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj4nICsgdGhpcy5ub0RhdGFNZXNzYWdlICsgJzwvcD4nLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoXG4gICAgICAgICAgICB9XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cblxuICAgIHJvd0RpbVJlb3JkZXIgKHN1YmplY3QsIHRhcmdldCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gJycsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IHRoaXMuZGltZW5zaW9ucztcbiAgICAgICAgaWYgKHRoaXMubWVhc3VyZU9uUm93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkaW1lbnNpb25zLnNwbGljZShkaW1lbnNpb25zLmxlbmd0aCAtIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaW1lbnNpb25zLmluZGV4T2YoTWF0aC5tYXgoc3ViamVjdCwgdGFyZ2V0KSkgPj0gZGltZW5zaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnd3JvbmcgaW5kZXgnO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPiB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGRpbWVuc2lvbnNbc3ViamVjdF07XG4gICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0IC0gMTsgaSA+PSB0YXJnZXQ7IGktLSkge1xuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnNbaSArIDFdID0gZGltZW5zaW9uc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpbWVuc2lvbnNbdGFyZ2V0XSA9IGJ1ZmZlcjtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0IDwgdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBkaW1lbnNpb25zW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCArIDE7IGkgPD0gdGFyZ2V0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zW2kgLSAxXSA9IGRpbWVuc2lvbnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaW1lbnNpb25zW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuICAgIH1cblxuICAgIGNvbERpbVJlb3JkZXIgKHN1YmplY3QsIHRhcmdldCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gJycsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbWVhc3VyZXMgPSB0aGlzLm1lYXN1cmVzO1xuICAgICAgICBpZiAodGhpcy5tZWFzdXJlT25Sb3cgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtZWFzdXJlcy5zcGxpY2UobWVhc3VyZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lYXN1cmVzLmluZGV4T2YoTWF0aC5tYXgoc3ViamVjdCwgdGFyZ2V0KSkgPj0gbWVhc3VyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3dyb25nIGluZGV4JztcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0ID4gdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBtZWFzdXJlc1tzdWJqZWN0XTtcbiAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgLSAxOyBpID49IHRhcmdldDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZXNbaSArIDFdID0gbWVhc3VyZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZWFzdXJlc1t0YXJnZXRdID0gYnVmZmVyO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG1lYXN1cmVzW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCArIDE7IGkgPD0gdGFyZ2V0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlc1tpIC0gMV0gPSBtZWFzdXJlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lYXN1cmVzW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuICAgIH1cblxuICAgIG1lcmdlRGltZW5zaW9ucyAoKSB7XG4gICAgICAgIGxldCBkaW1lbnNpb25zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHRoaXMuZGltZW5zaW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLm1lYXN1cmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHRoaXMubWVhc3VyZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgIH1cblxuICAgIGNyZWF0ZUZpbHRlcnMgKCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBpaSA9IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICBqaiA9IDAsXG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzID0gdGhpcy5nbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1tpXV07XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IG1hdGNoZWRWYWx1ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXJHZW4odGhpcy5kaW1lbnNpb25zW2ldLCBtYXRjaGVkVmFsdWVzW2pdLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWYWw6IG1hdGNoZWRWYWx1ZXNbal1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVycztcbiAgICB9XG5cbiAgICBjcmVhdGVEYXRhQ29tYm9zICgpIHtcbiAgICAgICAgbGV0IHIgPSBbXSxcbiAgICAgICAgICAgIGdsb2JhbEFycmF5ID0gdGhpcy5tYWtlR2xvYmFsQXJyYXkoKSxcbiAgICAgICAgICAgIG1heCA9IGdsb2JhbEFycmF5Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVjdXJzZSAoYXJyLCBpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbCA9IGdsb2JhbEFycmF5W2ldLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhID0gYXJyLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIGEucHVzaChnbG9iYWxBcnJheVtpXVtqXSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IG1heCkge1xuICAgICAgICAgICAgICAgICAgICByLnB1c2goYSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzZShhLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlY3Vyc2UoW10sIDApO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBtYWtlR2xvYmFsQXJyYXkgKCkge1xuICAgICAgICBsZXQgdGVtcE9iaiA9IHt9LFxuICAgICAgICAgICAgdGVtcEFyciA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmdsb2JhbERhdGEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09IHRoaXMubWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHRlbXBPYmpba2V5XSA9IHRoaXMuZ2xvYmFsRGF0YVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRlbXBBcnIgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKS5tYXAoa2V5ID0+IHRlbXBPYmpba2V5XSk7XG4gICAgICAgIHJldHVybiB0ZW1wQXJyO1xuICAgIH1cblxuICAgIGdldEZpbHRlckhhc2hNYXAgKCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IHRoaXMuY3JlYXRlRmlsdGVycygpLFxuICAgICAgICAgICAgZGF0YUNvbWJvcyA9IHRoaXMuY3JlYXRlRGF0YUNvbWJvcygpLFxuICAgICAgICAgICAgaGFzaE1hcCA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gZGF0YUNvbWJvcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkYXRhQ29tYm8gPSBkYXRhQ29tYm9zW2ldLFxuICAgICAgICAgICAgICAgIGtleSA9ICcnLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsZW4gPSBkYXRhQ29tYm8ubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMCwgbGVuZ3RoID0gZmlsdGVycy5sZW5ndGg7IGsgPCBsZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyVmFsID0gZmlsdGVyc1trXS5maWx0ZXJWYWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhQ29tYm9bal0gPT09IGZpbHRlclZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gZGF0YUNvbWJvW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gJ3wnICsgZGF0YUNvbWJvW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChmaWx0ZXJzW2tdLmZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaE1hcDtcbiAgICB9XG5cbiAgICByZW5kZXJDcm9zc3RhYiAoKSB7XG4gICAgICAgIGxldCBjcm9zc3RhYiA9IHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKSxcbiAgICAgICAgICAgIG1hdHJpeCA9IHRoaXMuY3JlYXRlTXVsdGlDaGFydChjcm9zc3RhYiksXG4gICAgICAgICAgICB0MiA9IHBlcmZvcm1hbmNlLm5vdygpLFxuICAgICAgICAgICAgZ2xvYmFsTWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgZ2xvYmFsTWluID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3dMYXN0Q2hhcnQgPSBjcm9zc3RhYltpXVtjcm9zc3RhYltpXS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChyb3dMYXN0Q2hhcnQubWF4IHx8IHJvd0xhc3RDaGFydC5taW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWF4IDwgcm93TGFzdENoYXJ0Lm1heCkge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSByb3dMYXN0Q2hhcnQubWF4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWluID4gcm93TGFzdENoYXJ0Lm1pbikge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSByb3dMYXN0Q2hhcnQubWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBtYXRyaXgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IG1hdHJpeFtpXSxcbiAgICAgICAgICAgICAgICByb3dBeGlzO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHJvd1tqXSxcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50ID0gY3Jvc3N0YWJbaV1bal07XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzdGFiRWxlbWVudC5jaGFydCAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQudHlwZSA9PT0gJ2F4aXMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0F4aXMgPSBjZWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93QXhpcy5jaGFydC5jaGFydENvbmZpZy5kYXRhU291cmNlLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6IDEwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGFwdGVyID0gdGhpcy5tYy5kYXRhQWRhcHRlcihhZGFwdGVyQ2ZnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0F4aXMuY29uZmlnLmNoYXJ0LmNvbmZpZ3VyYXRpb24gPSBhZGFwdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93QXhpcy51cGRhdGUocm93QXhpcy5jb25maWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyb3dBeGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNyb3NzdGFiRWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnY2hhcnQnKSB8fCBjcm9zc3RhYkVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2h0bWwnKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNsYXNzTmFtZSAhPT0gJ2JsYW5rLWNlbGwnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGltaXRzID0gcm93QXhpcy5jaGFydC5jaGFydE9iai5nZXRMaW1pdHMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5MaW1pdCA9IGxpbWl0c1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMaW1pdCA9IGxpbWl0c1sxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydCA9IHRoaXMuZ2V0Q2hhcnRPYmooY3Jvc3N0YWJFbGVtZW50LnJvd0hhc2gsIGNyb3NzdGFiRWxlbWVudC5jb2xIYXNoKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0LmNvbmZpZ3VyYXRpb24uRkNqc29uLmNoYXJ0LnlBeGlzTWluVmFsdWUgPSBtaW5MaW1pdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0LmNvbmZpZ3VyYXRpb24uRkNqc29uLmNoYXJ0LnlBeGlzTWF4VmFsdWUgPSBtYXhMaW1pdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY29uZmlnLmNoYXJ0ID0gY2hhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jdFBlcmYgKz0gKHBlcmZvcm1hbmNlLm5vdygpIC0gdDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC51cGRhdGUoY2VsbC5jb25maWcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHQyID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3ZlcmluJywgKGV2dCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdHJpeC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSBjcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dbal0uY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQudHlwZSA9PT0gJ2NhcHRpb24nIHx8IHJvd1tqXS5jaGFydC50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsQWRhcHRlciA9IHJvd1tqXS5jaGFydC5jb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSB0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlWYWwgPSBkYXRhLmRhdGFbY2F0ZWdvcnldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoY2F0ZWdvcnlWYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWMuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXJvdXQnLCAoZXZ0LCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBtYXRyaXgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSBjcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93W2pdLmNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQudHlwZSA9PT0gJ2NhcHRpb24nIHx8IHJvd1tqXS5jaGFydC50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxBZGFwdGVyID0gcm93W2pdLmNoYXJ0LmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFkYXB0ZXIuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZU11bHRpQ2hhcnQgKG1hdHJpeCkge1xuICAgICAgICBpZiAodGhpcy5tdWx0aWNoYXJ0T2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdCA9IHRoaXMubWMuY3JlYXRlTWF0cml4KHRoaXMuY3Jvc3N0YWJDb250YWluZXIsIG1hdHJpeCk7XG4gICAgICAgICAgICB3aW5kb3cuY3RQZXJmID0gcGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnQxO1xuICAgICAgICAgICAgdGhpcy5tdWx0aWNoYXJ0T2JqZWN0LmRyYXcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdC51cGRhdGUobWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdMaXN0ZW5lcih0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXI7XG4gICAgfVxuXG4gICAgcGVybXV0ZUFyciAoYXJyKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHBlcm11dGUgKGFyciwgbWVtKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgICAgIG1lbSA9IG1lbSB8fCBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobWVtLmNvbmNhdChjdXJyZW50KS5qb2luKCd8JykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZXJtdXRlKGFyci5zbGljZSgpLCBtZW0uY29uY2F0KGN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGksIDAsIGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBlcm11dGVTdHJzID0gcGVybXV0ZShhcnIpO1xuICAgICAgICByZXR1cm4gcGVybXV0ZVN0cnMuam9pbignKiElXicpO1xuICAgIH1cblxuICAgIG1hdGNoSGFzaCAoZmlsdGVyU3RyLCBoYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBoYXNoKSB7XG4gICAgICAgICAgICBpZiAoaGFzaC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBrZXkuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgICAgICAgICAga2V5UGVybXV0YXRpb25zID0gdGhpcy5wZXJtdXRlQXJyKGtleXMpLnNwbGl0KCcqISVeJyk7XG4gICAgICAgICAgICAgICAgaWYgKGtleVBlcm11dGF0aW9ucy5pbmRleE9mKGZpbHRlclN0cikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlQZXJtdXRhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDaGFydE9iaiAocm93RmlsdGVyLCBjb2xGaWx0ZXIpIHtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSBbXSxcbiAgICAgICAgICAgIGZpbHRlclN0ciA9ICcnLFxuICAgICAgICAgICAgcm93RmlsdGVycyA9IHJvd0ZpbHRlci5zcGxpdCgnfCcpLFxuICAgICAgICAgICAgZGF0YVByb2Nlc3NvcnMgPSBbXSxcbiAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IgPSB7fSxcbiAgICAgICAgICAgIG1hdGNoZWRIYXNoZXMgPSBbXSxcbiAgICAgICAgICAgIC8vIGZpbHRlcmVkSlNPTiA9IFtdLFxuICAgICAgICAgICAgLy8gbWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgLy8gbWluID0gSW5maW5pdHksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSB7fSxcbiAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7fSxcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB7fSxcbiAgICAgICAgICAgIGxpbWl0cyA9IHt9LFxuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IHRoaXMuZ2xvYmFsRGF0YVt0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdXTtcblxuICAgICAgICByb3dGaWx0ZXJzLnB1c2guYXBwbHkocm93RmlsdGVycyk7XG4gICAgICAgIGZpbHRlcnMgPSByb3dGaWx0ZXJzLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChhICE9PSAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWx0ZXJTdHIgPSBmaWx0ZXJzLmpvaW4oJ3wnKTtcbiAgICAgICAgbWF0Y2hlZEhhc2hlcyA9IHRoaXMuaGFzaFt0aGlzLm1hdGNoSGFzaChmaWx0ZXJTdHIsIHRoaXMuaGFzaCldO1xuICAgICAgICBpZiAobWF0Y2hlZEhhc2hlcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbWF0Y2hlZEhhc2hlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YVByb2Nlc3NvciA9IHRoaXMubWMuY3JlYXRlRGF0YVByb2Nlc3NvcigpO1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IuZmlsdGVyKG1hdGNoZWRIYXNoZXNbaV0pO1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzLnB1c2goZGF0YVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSB0aGlzLmRhdGFTdG9yZS5nZXRDaGlsZE1vZGVsKGRhdGFQcm9jZXNzb3JzKTtcbiAgICAgICAgICAgIC8vIGZpbHRlcmVkSlNPTiA9IGZpbHRlcmVkRGF0YS5nZXRKU09OKCk7XG4gICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWx0ZXJlZEpTT04ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgIGlmIChmaWx0ZXJlZEpTT05baV1bY29sRmlsdGVyXSA+IG1heCkge1xuICAgICAgICAgICAgLy8gICAgICAgICBtYXggPSBmaWx0ZXJlZEpTT05baV1bY29sRmlsdGVyXTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgaWYgKGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdIDwgbWluKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIG1pbiA9IGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpbWVuc2lvbjogW3RoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dLFxuICAgICAgICAgICAgICAgICAgICBtZWFzdXJlOiBbY29sRmlsdGVyXSxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzVHlwZTogJ1NTJyxcbiAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRlTW9kZTogdGhpcy5hZ2dyZWdhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcyxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB0aGlzLmNoYXJ0Q29uZmlnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkYXRhc3RvcmU6IGZpbHRlcmVkRGF0YVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgbGltaXRzID0gYWRhcHRlci5nZXRMaW1pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgICAgJ21heCc6IGxpbWl0cy5tYXgsXG4gICAgICAgICAgICAgICAgJ21pbic6IGxpbWl0cy5taW5cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLmNoYXJ0VHlwZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb246IGFkYXB0ZXJcbiAgICAgICAgICAgIH1dO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhZ0xpc3RlbmVyIChwbGFjZUhvbGRlcikge1xuICAgICAgICAvLyBHZXR0aW5nIG9ubHkgbGFiZWxzXG4gICAgICAgIGxldCBvcmlnQ29uZmlnID0gdGhpcy5zdG9yZVBhcmFtcy5jb25maWcsXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gb3JpZ0NvbmZpZy5kaW1lbnNpb25zIHx8IFtdLFxuICAgICAgICAgICAgbWVhc3VyZXMgPSBvcmlnQ29uZmlnLm1lYXN1cmVzIHx8IFtdLFxuICAgICAgICAgICAgbWVhc3VyZXNMZW5ndGggPSBtZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICBkaW1lbnNpb25zTGVuZ3RoID0gMCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnNIb2xkZXIsXG4gICAgICAgICAgICBtZWFzdXJlc0hvbGRlcixcbiAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyBsZXQgZW5kXG4gICAgICAgIHBsYWNlSG9sZGVyID0gcGxhY2VIb2xkZXJbMV07XG4gICAgICAgIC8vIE9taXR0aW5nIGxhc3QgZGltZW5zaW9uXG4gICAgICAgIGRpbWVuc2lvbnMgPSBkaW1lbnNpb25zLnNsaWNlKDAsIGRpbWVuc2lvbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIGRpbWVuc2lvbnNMZW5ndGggPSBkaW1lbnNpb25zLmxlbmd0aDtcbiAgICAgICAgLy8gU2V0dGluZyB1cCBkaW1lbnNpb24gaG9sZGVyXG4gICAgICAgIGRpbWVuc2lvbnNIb2xkZXIgPSBwbGFjZUhvbGRlci5zbGljZSgwLCBkaW1lbnNpb25zTGVuZ3RoKTtcbiAgICAgICAgLy8gU2V0dGluZyB1cCBtZWFzdXJlcyBob2xkZXJcbiAgICAgICAgbWVhc3VyZXNIb2xkZXIgPSBwbGFjZUhvbGRlci5zbGljZShkaW1lbnNpb25zTGVuZ3RoICsgMSwgZGltZW5zaW9uc0xlbmd0aCArIG1lYXN1cmVzTGVuZ3RoICsgMSk7XG4gICAgICAgIHNldHVwTGlzdGVuZXIoZGltZW5zaW9uc0hvbGRlciwgZGltZW5zaW9ucywgZGltZW5zaW9uc0xlbmd0aCwgdGhpcy5kaW1lbnNpb25zKTtcbiAgICAgICAgc2V0dXBMaXN0ZW5lcihtZWFzdXJlc0hvbGRlciwgbWVhc3VyZXMsIG1lYXN1cmVzTGVuZ3RoLCB0aGlzLm1lYXN1cmVzKTtcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBMaXN0ZW5lciAoaG9sZGVyLCBhcnIsIGFyckxlbiwgZ2xvYmFsQXJyKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsID0gaG9sZGVyW2ldLmdyYXBoaWNzLFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gaG9sZGVyW2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0uY2VsbFZhbHVlID0gYXJyW2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ0xlZnQgPSBwYXJzZUludChlbC5zdHlsZS5sZWZ0KTtcbiAgICAgICAgICAgICAgICBpdGVtLnJlZFpvbmUgPSBpdGVtLm9yaWdMZWZ0ICsgcGFyc2VJbnQoZWwuc3R5bGUud2lkdGgpIC8gMjtcbiAgICAgICAgICAgICAgICBpdGVtLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpdGVtLmFkanVzdCA9IDA7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmlnWiA9IGVsLnN0eWxlLnpJbmRleDtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXR1cERyYWcoaXRlbS5ncmFwaGljcywgZnVuY3Rpb24gZHJhZ1N0YXJ0IChkeCwgZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGl0ZW0ub3JpZ0xlZnQgKyBkeCArIGl0ZW0uYWRqdXN0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlU2hpZnRpbmcoaXRlbS5pbmRleCwgZmFsc2UsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZVNoaWZ0aW5nKGl0ZW0uaW5kZXgsIHRydWUsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZHJhZ0VuZCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFuZ2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkanVzdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnpJbmRleCA9IGl0ZW0ub3JpZ1o7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmxlZnQgPSBpdGVtLm9yaWdMZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGogPCBhcnJMZW47ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbEFycltqXSAhPT0gaG9sZGVyW2pdLmNlbGxWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEFycltqXSA9IGhvbGRlcltqXS5jZWxsVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5nbG9iYWxEYXRhID0gc2VsZi5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbmRlckNyb3NzdGFiKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1hbmFnZVNoaWZ0aW5nIChpbmRleCwgaXNSaWdodCwgaG9sZGVyKSB7XG4gICAgICAgICAgICBsZXQgc3RhY2sgPSBbXSxcbiAgICAgICAgICAgICAgICBkcmFnSXRlbSA9IGhvbGRlcltpbmRleF0sXG4gICAgICAgICAgICAgICAgbmV4dFBvcyA9IGlzUmlnaHQgPyBpbmRleCArIDEgOiBpbmRleCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dEl0ZW0gPSBob2xkZXJbbmV4dFBvc107XG4gICAgICAgICAgICAvLyBTYXZpbmcgZGF0YSBmb3IgbGF0ZXIgdXNlXG4gICAgICAgICAgICBpZiAobmV4dEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKCFpc1JpZ2h0ICYmIChwYXJzZUludChkcmFnSXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0KSA8IG5leHRJdGVtLnJlZFpvbmUpKTtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN0YWNrLnBvcCgpIHx8IChpc1JpZ2h0ICYmIHBhcnNlSW50KGRyYWdJdGVtLmdyYXBoaWNzLnN0eWxlLmxlZnQpID4gbmV4dEl0ZW0ub3JpZ0xlZnQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2sucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5yZWRab25lKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5vcmlnTGVmdCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLmFkanVzdCArPSBwYXJzZUludChuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5hZGp1c3QgLT0gcGFyc2VJbnQobmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLm9yaWdMZWZ0ID0gZHJhZ0l0ZW0ub3JpZ0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLnJlZFpvbmUgPSBkcmFnSXRlbS5yZWRab25lO1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5pbmRleCA9IGRyYWdJdGVtLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0ID0gbmV4dEl0ZW0ub3JpZ0xlZnQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGhvbGRlcltuZXh0UG9zXSk7XG4gICAgICAgICAgICAgICAgICAgIGhvbGRlcltuZXh0UG9zXSA9IGhvbGRlcltpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGhvbGRlcltpbmRleF0gPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXR0aW5nIG5ldyB2YWx1ZXMgZm9yIGRyYWdpdGVtXG4gICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgZHJhZ0l0ZW0uaW5kZXggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBkcmFnSXRlbS5vcmlnTGVmdCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRyYWdJdGVtLnJlZFpvbmUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXR1cERyYWcgKGVsLCBoYW5kbGVyLCBoYW5kbGVyMikge1xuICAgICAgICBsZXQgeCA9IDAsXG4gICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgZnVuY3Rpb24gY3VzdG9tSGFuZGxlciAoZSkge1xuICAgICAgICAgICAgaGFuZGxlcihlLmNsaWVudFggLSB4LCBlLmNsaWVudFkgLSB5KTtcbiAgICAgICAgfVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgeCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgIHkgPSBlLmNsaWVudFk7XG4gICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMC44O1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjdXN0b21IYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gbW91c2VVcEhhbmRsZXIgKGUpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjdXN0b21IYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoaGFuZGxlcjIsIDEwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbHRlckdlbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhKSA9PiBkYXRhW2tleV0gPT09IHZhbDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3Jvc3N0YWJFeHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY3Jvc3N0YWJFeHQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDYsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDEzXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxMCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogNyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogOVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiAxMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDMsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiA3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiA5LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogNyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDMsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA4LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDEyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDIsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogMTEsXG4gICAgICAgICdWaXNpdG9ycyc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDYsXG4gICAgICAgICdWaXNpdG9ycyc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTNcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDE2XG4gICAgfVxuXTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9sYXJnZURhdGEuanMiXSwic291cmNlUm9vdCI6IiJ9