/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={dimensions:['Product','State','Month'],measures:['Sale','Visitors','Profit'],chartType:'column2d',noDataMessage:'No data to display.',measureOnRow:!1,cellWidth:120,cellHeight:100,crosstabContainer:'crosstab-div',aggregation:'sum',chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',chartBottomMargin:'5',chartTopMargin:'5',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#ffffff',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'1',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#ffffff',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.data=b,'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now();else return{test:function(f){return f}};this.chartType=c.chartType,this.chartConfig=c.chartConfig,this.dimensions=c.dimensions,this.measures=c.measures,this.measureOnRow=c.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=c.cellWidth,this.cellHeight=c.cellHeight,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation,this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.dataStore.addEventListener('tempEvent',()=>{this.globalData=this.buildGlobalData(),this.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let f=0,g=b.length;f<g;f++)c[b[f]]=this.dataStore.getUniqueValues(b[f]);return c}return!1}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this.columnKeyArr.length,x=1/0,y=-(1/0),z={};for(p=0;p<q;p+=1){let A='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',A+='row-dimensions '+this.dimensions[g]+' '+o[p].toLowerCase(),w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:A},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{for(let D=0;D<v;D+=1){let E={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this.columnKeyArr[D]};b[b.length-1].push(E),z=this.getChartObj(u,this.columnKeyArr[D])[0],y=parseInt(z.max)>y?z.max:y,x=parseInt(z.min)<x?z.min:x}let B={config:{config:{chart:{dataMin:x,axisType:'y',dataMax:y,isAxisOpposite:!0,borderthickness:0,chartBottomMargin:5}}}},C=this.mc.dataadapter(B);b[b.length-1].push({rowspan:1,colspan:1,className:'y-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:C}})}m+=s.rowspan}return m}// createCol (table, data, colOrder, currentIndex, filteredDataStore) {
	//     var colspan = 0,
	//         fieldComponent = colOrder[currentIndex],
	//         fieldValues = data[fieldComponent],
	//         i, l = fieldValues.length,
	//         colElement,
	//         hasFurtherDepth = currentIndex < (colOrder.length - 1),
	//         filteredDataHashKey,
	//         htmlRef;
	//     if (table.length <= currentIndex) {
	//         table.push([]);
	//     }
	//     for (i = 0; i < l; i += 1) {
	//         let classStr = '';
	//         htmlRef = document.createElement('p');
	//         htmlRef.innerHTML = fieldValues[i];
	//         htmlRef.style.textAlign = 'center';
	//         document.body.appendChild(htmlRef);
	//         classStr += 'column-dimensions' +
	//             ' ' + this.measures[currentIndex] +
	//             ' ' + fieldValues[i].toLowerCase();
	//         this.cornerHeight = htmlRef.offsetHeight;
	//         document.body.removeChild(htmlRef);
	//         colElement = {
	//             width: this.cellWidth,
	//             height: this.cornerHeight,
	//             rowspan: 1,
	//             colspan: 1,
	//             html: htmlRef.outerHTML,
	//             className: classStr
	//         };
	//         filteredDataHashKey = filteredDataStore + fieldValues[i] + '|';
	//         table[currentIndex].push(colElement);
	//         if (hasFurtherDepth) {
	//             colElement.colspan = this.createCol(table, data, colOrder, currentIndex + 1, filteredDataHashKey);
	//         } else {
	//             this.columnKeyArr.push(filteredDataHashKey);
	//         }
	//         colspan += colElement.colspan;
	//     }
	//     return colspan;
	// }
	createCol(b,c,f){var g,m,n,h=this.measures.length;for(g=0;g<h;g+=1){let o='',p=f[g],q=c[p];n=document.createElement('p'),n.innerHTML=p,n.style.textAlign='center',document.body.appendChild(n),o+='column-dimensions '+this.measures[g]+' '+q[g].toLowerCase(),this.cornerHeight=n.offsetHeight,document.body.removeChild(n),m={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:n.outerHTML,className:o},this.columnKeyArr.push(this.measures[g]),b[0].push(m)}return 0}createRowDimHeading(){var f,b=[],c=0;for(c=0;c<this.dimensions.length-1;c++)f=document.createElement('p'),f.innerHTML=this.dimensions[c][0].toUpperCase()+this.dimensions[c].substr(1),f.style.textAlign='center',f.style.marginTop=(30*this.measures.length-15)/2+'px',b.push({width:10*this.dimensions[c],height:30*this.measures.length,rowspan:1,colspan:1,html:f.outerHTML,className:'corner-cell'});return b}createColDimHeading(b,c){for(var g,f=c;f<b.length;f++)g=document.createElement('p'),g.innerHTML='',g.style.textAlign='center',b[f].push({width:10*this.measures[f].length,height:30,rowspan:1,colspan:1,html:g.outerHTML,className:'corner-cell'});return b}createCaption(b,c){let f=this.mc.dataadapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:f}}]),b}createCrosstab(){var b=this,c=this.globalData,f=this.dimensions.filter(function(p,q,s){if(p!==s[s.length-1])return!0}),g=this.measures.filter(function(p,q,s){if(b.measureOnRow)return!0;return p!==s[s.length-1]||void 0}),h=[],m=[],n=0,o=0;if(c){for(h.push(this.createRowDimHeading(h,g.length)),this.createCol(h,c,this.measures),h=this.createColDimHeading(h,0),h.push([]),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;for(n=0;n<this.dimensions.length-1;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});for(n=0;n<o-this.dimensions.length;n++){let p=this.globalData[this.dimensions[this.dimensions.length-1]],q=this.mc.dataadapter({config:{config:{chart:{axisType:'x',borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:p}}});m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:q}})}h.push(m),h=this.createCaption(h,o),this.columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return h}rowDimReorder(b,c){var g,f='',h=this.dimensions;if(!0===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}colDimReorder(b,c){var g,f='',h=this.measures;if(!1===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,f=this.dimensions.length;c<f;c++)b.push(this.dimensions[c]);for(let c=0,f=this.measures.length;c<f;c++)b.push(this.measures[c]);return b}createFilters(){let m,b=[],c=0,f=this.dimensions.length-1,g=0,h=0;for(c=0;c<f;c++)for(m=this.globalData[this.dimensions[c]],g=0,h=m.length;g<h;g++)b.push({filter:this.filterGen(this.dimensions[c],m[g].toString()),filterVal:m[g]});return b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&f!==this.measure&&(b[f]=this.globalData[f]);return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}renderCrosstab(){let b=this.createCrosstab(),c=this.createMultiChart(b),f=performance.now();for(let g=0,h=c.length;g<h;g++){let m=c[g];for(let n=0,o=m.length;n<o;n++){let p=m[n],q=b[g][n],s=m[m.length-1];if(!(q.hasOwnProperty('chart')||q.hasOwnProperty('html'))&&'blank-cell'!==q.className){let t=s.chart.chartObj.getLimits(),u=t[0],v=t[1],w=this.getChartObj(q.rowHash,q.colHash)[1];w.configuration.FCjson.chart.yAxisMinValue=u,w.configuration.FCjson.chart.yAxisMaxValue=v,p.config.chart=w,q.chart=w,window.ctPerf+=performance.now()-f,p.update(p.config)}f=performance.now()}}this.mc.addEventListener('hoverin',(g,h)=>{if(h.data)for(let n=0,o=c.length;n<o;n++){let p=b[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.type&&'axis'!==p[m].chart.type){let q=p[m].chart.configuration,s=this.dimensions[this.dimensions.length-1],t=h.data[s];q.highlight(t)}}}),this.mc.addEventListener('hoverout',(g,h)=>{if(h.data)for(let n=0,o=c.length;n<o;n++){let p=b[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.type&&'axis'!==p[m].chart.type){let q=p[m].chart.configuration;q.highlight()}}})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(b),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c){let f=[],g='',h=b.split('|'),m=[],n={},o=[],p=[],q=-(1/0),s=1/0,t={},u={},v={},w=this.globalData[this.dimensions[this.dimensions.length-1]];if(h.push.apply(h),f=h.filter(x=>{return''!==x}),g=f.join('|'),o=this.hash[this.matchHash(g,this.hash)],o){for(let x=0,y=o.length;x<y;x++)n=this.mc.createDataProcessor(),n.filter(o[x]),m.push(n);t=this.dataStore.getData(m),t=t[t.length-1],p=t.getJSON();for(let x=0,y=p.length;x<y;x++)p[x][c]>q&&(q=p[x][c]),p[x][c]<s&&(s=p[x][c]);return u={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[c],seriesType:'SS',aggregateMode:this.aggregation,categories:w,config:this.chartConfig},datastore:t},v=this.mc.dataadapter(u),[{max:q,min:s},{type:this.chartType,width:'100%',height:'100%',jsonData:p,configuration:v}]}}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNGQzMTk3MzZjZGE1OGNkYzkxODAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jcm9zc3RhYkV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFyZ2VEYXRhLmpzIl0sIm5hbWVzIjpbIkNyb3NzdGFiRXh0IiwicmVxdWlyZSIsImRhdGEiLCJjb25maWciLCJkaW1lbnNpb25zIiwibWVhc3VyZXMiLCJjaGFydFR5cGUiLCJub0RhdGFNZXNzYWdlIiwibWVhc3VyZU9uUm93IiwiY2VsbFdpZHRoIiwiY2VsbEhlaWdodCIsImNyb3NzdGFiQ29udGFpbmVyIiwiYWdncmVnYXRpb24iLCJjaGFydENvbmZpZyIsImNoYXJ0Iiwid2luZG93IiwiY3Jvc3N0YWIiLCJyZW5kZXJDcm9zc3RhYiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsIk11bHRpQ2hhcnRpbmciLCJtYyIsImRhdGFTdG9yZSIsImNyZWF0ZURhdGFTdG9yZSIsInNldERhdGEiLCJkYXRhU291cmNlIiwidDEiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInRlc3QiLCJhIiwiZ2xvYmFsRGF0YSIsImJ1aWxkR2xvYmFsRGF0YSIsImNvbHVtbktleUFyciIsImhhc2giLCJnZXRGaWx0ZXJIYXNoTWFwIiwiY291bnQiLCJheGVzIiwiRkNEYXRhRmlsdGVyRXh0IiwiZGF0YUZpbHRlckV4dCIsImFkZEV2ZW50TGlzdGVuZXIiLCJnZXRLZXlzIiwiZmllbGRzIiwiaSIsImlpIiwibGVuZ3RoIiwiZ2V0VW5pcXVlVmFsdWVzIiwiY3JlYXRlUm93IiwidGFibGUiLCJyb3dPcmRlciIsImN1cnJlbnRJbmRleCIsImZpbHRlcmVkRGF0YVN0b3JlIiwicm93RWxlbWVudCIsImZpbHRlcmVkRGF0YUhhc2hLZXkiLCJodG1sUmVmIiwicm93c3BhbiIsImZpZWxkQ29tcG9uZW50IiwiZmllbGRWYWx1ZXMiLCJsIiwiaGFzRnVydGhlckRlcHRoIiwiY29sTGVuZ3RoIiwibWluIiwibWF4IiwibWlubWF4T2JqIiwiY2xhc3NTdHIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJzdHlsZSIsInRleHRBbGlnbiIsIm1hcmdpblRvcCIsInRvTG93ZXJDYXNlIiwidmlzaWJpbGl0eSIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNvcm5lcldpZHRoIiwicmVtb3ZlQ2hpbGQiLCJ3aWR0aCIsImhlaWdodCIsImNvbHNwYW4iLCJodG1sIiwib3V0ZXJIVE1MIiwiY2xhc3NOYW1lIiwicHVzaCIsImoiLCJjaGFydENlbGxPYmoiLCJyb3dIYXNoIiwiY29sSGFzaCIsImdldENoYXJ0T2JqIiwicGFyc2VJbnQiLCJhZGFwdGVyQ2ZnIiwiYWRhcHRlciIsImRhdGFhZGFwdGVyIiwiY3JlYXRlQ29sIiwibWVhc3VyZU9yZGVyIiwiY29sRWxlbWVudCIsImNvcm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsImNyZWF0ZVJvd0RpbUhlYWRpbmciLCJjb3JuZXJDZWxsQXJyIiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJjcmVhdGVDb2xEaW1IZWFkaW5nIiwiaW5kZXgiLCJjcmVhdGVDYXB0aW9uIiwibWF4TGVuZ3RoIiwidW5zaGlmdCIsImNyZWF0ZUNyb3NzdGFiIiwic2VsZiIsIm9iaiIsImZpbHRlciIsInZhbCIsImFyciIsImNvbE9yZGVyIiwieEF4aXNSb3ciLCJjYXRlZ29yaWVzIiwicm93RGltUmVvcmRlciIsInN1YmplY3QiLCJ0YXJnZXQiLCJidWZmZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiTWF0aCIsImNvbERpbVJlb3JkZXIiLCJtZXJnZURpbWVuc2lvbnMiLCJjcmVhdGVGaWx0ZXJzIiwibWF0Y2hlZFZhbHVlcyIsImZpbHRlcnMiLCJqaiIsImZpbHRlckdlbiIsInRvU3RyaW5nIiwiZmlsdGVyVmFsIiwiY3JlYXRlRGF0YUNvbWJvcyIsInJlY3Vyc2UiLCJnbG9iYWxBcnJheSIsInNsaWNlIiwiciIsIm1ha2VHbG9iYWxBcnJheSIsInRlbXBPYmoiLCJ0ZW1wQXJyIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJtZWFzdXJlIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsImRhdGFDb21ib3MiLCJoYXNoTWFwIiwiZGF0YUNvbWJvIiwidmFsdWUiLCJsZW4iLCJrIiwibWF0cml4IiwiY3JlYXRlTXVsdGlDaGFydCIsInQyIiwicm93IiwiY2VsbCIsImNyb3NzdGFiRWxlbWVudCIsInJvd0F4aXMiLCJsaW1pdHMiLCJjaGFydE9iaiIsImdldExpbWl0cyIsIm1pbkxpbWl0IiwibWF4TGltaXQiLCJjb25maWd1cmF0aW9uIiwiRkNqc29uIiwieUF4aXNNaW5WYWx1ZSIsInlBeGlzTWF4VmFsdWUiLCJjdFBlcmYiLCJ1cGRhdGUiLCJldnQiLCJ0eXBlIiwiY2VsbEFkYXB0ZXIiLCJjYXRlZ29yeSIsImNhdGVnb3J5VmFsIiwiaGlnaGxpZ2h0IiwibXVsdGljaGFydE9iamVjdCIsImNyZWF0ZU1hdHJpeCIsImRyYXciLCJwbGFjZUhvbGRlciIsInBlcm11dGVBcnIiLCJwZXJtdXRlIiwibWVtIiwiY3VycmVudCIsInJlc3VsdHMiLCJjb25jYXQiLCJqb2luIiwicGVybXV0ZVN0cnMiLCJtYXRjaEhhc2giLCJmaWx0ZXJTdHIiLCJzcGxpdCIsImtleVBlcm11dGF0aW9ucyIsInJvd0ZpbHRlciIsImNvbEZpbHRlciIsInJvd0ZpbHRlcnMiLCJkYXRhUHJvY2Vzc29ycyIsImRhdGFQcm9jZXNzb3IiLCJtYXRjaGVkSGFzaGVzIiwiZmlsdGVyZWRKU09OIiwiZmlsdGVyZWREYXRhIiwiYXBwbHkiLCJjcmVhdGVEYXRhUHJvY2Vzc29yIiwiZ2V0RGF0YSIsImdldEpTT04iLCJkaW1lbnNpb24iLCJzZXJpZXNUeXBlIiwiYWdncmVnYXRlTW9kZSIsImRhdGFzdG9yZSIsImpzb25EYXRhIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJB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USxNQUhULENBSUNrSSxTQUFVVixDQUpYLENBS0NsQyxjQUFlekUsQ0FMaEIsQ0FISSxDQVVWLENBQ0osQ0FFRHNDLFVBQVdXLENBQVgsQ0FBZ0I3QixDQUFoQixDQUFxQixDQUNqQixNQUFROUcsRUFBRCxFQUFVQSxFQUFLMkksQ0FBTCxJQUFjN0IsQ0FDbEMsQ0F6c0JhLENBNHNCbEI5RixPQUFPQyxPQUFQLENBQWlCbkIsVzs7Ozs7O0FDL3NCakJrQixRQUFPQyxPQUFQLG15TSIsImZpbGUiOiJjcm9zc3RhYi1leHQtZXM2Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDRkMzE5NzM2Y2RhNThjZGM5MTgwIiwiY29uc3QgQ3Jvc3N0YWJFeHQgPSByZXF1aXJlKCcuL2Nyb3NzdGFiRXh0JyksXG4gICAgZGF0YSA9IHJlcXVpcmUoJy4vbGFyZ2VEYXRhJyk7XG5cbnZhciBjb25maWcgPSB7XG4gICAgZGltZW5zaW9uczogWydQcm9kdWN0JywgJ1N0YXRlJywgJ01vbnRoJ10sXG4gICAgbWVhc3VyZXM6IFsnU2FsZScsICdWaXNpdG9ycycsICdQcm9maXQnXSxcbiAgICBjaGFydFR5cGU6ICdjb2x1bW4yZCcsXG4gICAgbm9EYXRhTWVzc2FnZTogJ05vIGRhdGEgdG8gZGlzcGxheS4nLFxuICAgIG1lYXN1cmVPblJvdzogZmFsc2UsXG4gICAgY2VsbFdpZHRoOiAxMjAsXG4gICAgY2VsbEhlaWdodDogMTAwLFxuICAgIGNyb3NzdGFiQ29udGFpbmVyOiAnY3Jvc3N0YWItZGl2JyxcbiAgICBhZ2dyZWdhdGlvbjogJ3N1bScsXG4gICAgY2hhcnRDb25maWc6IHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICdzaG93Qm9yZGVyJzogJzAnLFxuICAgICAgICAgICAgJ3Nob3dWYWx1ZXMnOiAnMCcsXG4gICAgICAgICAgICAnZGl2TGluZUFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ251bWJlclByZWZpeCc6ICfigrknLFxuICAgICAgICAgICAgJ3JvdGF0ZVZhbHVlcyc6ICcxJyxcbiAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6ICc1JyxcbiAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6ICc1JyxcbiAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiAnNScsXG4gICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6ICc1JyxcbiAgICAgICAgICAgICd6ZXJvUGxhbmVUaGlja25lc3MnOiAnMScsXG4gICAgICAgICAgICAnc2hvd1plcm9QbGFuZVZhbHVlJzogJzEnLFxuICAgICAgICAgICAgJ3plcm9QbGFuZUFscGhhJzogJzEwMCcsXG4gICAgICAgICAgICAnYmdDb2xvcic6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgICdzaG93WEF4aXNMaW5lJzogJzEnLFxuICAgICAgICAgICAgJ3Bsb3RCb3JkZXJBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdzaG93WGF4aXNWYWx1ZXMnOiAnMCcsXG4gICAgICAgICAgICAnc2hvd1lBeGlzVmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ2FuaW1hdGlvbic6ICcxJyxcbiAgICAgICAgICAgICd0cmFuc3Bvc2VBbmltYXRpb24nOiAnMScsXG4gICAgICAgICAgICAnYWx0ZXJuYXRlSEdyaWRBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdwbG90Q29sb3JJblRvb2x0aXAnOiAnMCcsXG4gICAgICAgICAgICAnY2FudmFzQm9yZGVyQWxwaGEnOiAnMTAwJyxcbiAgICAgICAgICAgICdhbHRlcm5hdGVWR3JpZEFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ3BhbGV0dGVDb2xvcnMnOiAnI0I1QjlCQScsXG4gICAgICAgICAgICAndXNlUGxvdEdyYWRpZW50Q29sb3InOiAnMCcsXG4gICAgICAgICAgICAndmFsdWVGb250Q29sb3InOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAnZHJhd1RyZW5kUmVnaW9uJzogJzEnXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICB3aW5kb3cuY3Jvc3N0YWIgPSBuZXcgQ3Jvc3N0YWJFeHQoZGF0YSwgY29uZmlnKTtcbiAgICB3aW5kb3cuY3Jvc3N0YWIucmVuZGVyQ3Jvc3N0YWIoKTtcbn0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBDcm9zc3RhYkV4dDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIi8qKlxuICogUmVwcmVzZW50cyBhIGNyb3NzdGFiLlxuICovXG5jbGFzcyBDcm9zc3RhYkV4dCB7XG4gICAgY29uc3RydWN0b3IgKGRhdGEsIGNvbmZpZykge1xuICAgICAgICAvLyBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgIGlmICh0eXBlb2YgTXVsdGlDaGFydGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5tYyA9IG5ldyBNdWx0aUNoYXJ0aW5nKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZSA9IHRoaXMubWMuY3JlYXRlRGF0YVN0b3JlKCk7XG4gICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5zZXREYXRhKHsgZGF0YVNvdXJjZTogdGhpcy5kYXRhIH0pO1xuICAgICAgICAgICAgdGhpcy50MSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0ZXN0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnRUeXBlID0gY29uZmlnLmNoYXJ0VHlwZTtcbiAgICAgICAgdGhpcy5jaGFydENvbmZpZyA9IGNvbmZpZy5jaGFydENvbmZpZztcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gY29uZmlnLmRpbWVuc2lvbnM7XG4gICAgICAgIHRoaXMubWVhc3VyZXMgPSBjb25maWcubWVhc3VyZXM7XG4gICAgICAgIHRoaXMubWVhc3VyZU9uUm93ID0gY29uZmlnLm1lYXN1cmVPblJvdztcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgdGhpcy5jZWxsV2lkdGggPSBjb25maWcuY2VsbFdpZHRoO1xuICAgICAgICB0aGlzLmNlbGxIZWlnaHQgPSBjb25maWcuY2VsbEhlaWdodDtcbiAgICAgICAgdGhpcy5jcm9zc3RhYkNvbnRhaW5lciA9IGNvbmZpZy5jcm9zc3RhYkNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5oYXNoID0gdGhpcy5nZXRGaWx0ZXJIYXNoTWFwKCk7XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0aW9uID0gY29uZmlnLmFnZ3JlZ2F0aW9uO1xuICAgICAgICB0aGlzLmF4ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ub0RhdGFNZXNzYWdlID0gY29uZmlnLm5vRGF0YU1lc3NhZ2U7XG4gICAgICAgIGlmICh0eXBlb2YgRkNEYXRhRmlsdGVyRXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVyQ29uZmlnID0ge307XG4gICAgICAgICAgICB0aGlzLmRhdGFGaWx0ZXJFeHQgPSBuZXcgRkNEYXRhRmlsdGVyRXh0KHRoaXMuZGF0YVN0b3JlLCBmaWx0ZXJDb25maWcsICdjb250cm9sLWJveCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YVN0b3JlLmFkZEV2ZW50TGlzdGVuZXIoJ3RlbXBFdmVudCcsIChlLCBkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSB0aGlzLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJDcm9zc3RhYigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBnbG9iYWwgZGF0YSBmcm9tIHRoZSBkYXRhIHN0b3JlIGZvciBpbnRlcm5hbCB1c2UuXG4gICAgICovXG4gICAgYnVpbGRHbG9iYWxEYXRhICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSkge1xuICAgICAgICAgICAgbGV0IGZpZWxkcyA9IHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSxcbiAgICAgICAgICAgICAgICBnbG9iYWxEYXRhID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWVsZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGdsb2JhbERhdGFbZmllbGRzW2ldXSA9IHRoaXMuZGF0YVN0b3JlLmdldFVuaXF1ZVZhbHVlcyhmaWVsZHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbERhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVSb3cgKHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuICAgICAgICB2YXIgcm93c3BhbiA9IDAsXG4gICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IHJvd09yZGVyW2N1cnJlbnRJbmRleF0sXG4gICAgICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuICAgICAgICAgICAgaSwgbCA9IGZpZWxkVmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgIHJvd0VsZW1lbnQsXG4gICAgICAgICAgICBoYXNGdXJ0aGVyRGVwdGggPSBjdXJyZW50SW5kZXggPCAocm93T3JkZXIubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuICAgICAgICAgICAgY29sTGVuZ3RoID0gdGhpcy5jb2x1bW5LZXlBcnIubGVuZ3RoLFxuICAgICAgICAgICAgaHRtbFJlZixcbiAgICAgICAgICAgIG1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgbWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgbWlubWF4T2JqID0ge307XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJyc7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZFZhbHVlc1tpXTtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICgodGhpcy5jZWxsSGVpZ2h0IC0gMTApIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgY2xhc3NTdHIgKz0gJ3Jvdy1kaW1lbnNpb25zJyArXG4gICAgICAgICAgICAgICAgJyAnICsgdGhpcy5kaW1lbnNpb25zW2N1cnJlbnRJbmRleF0gK1xuICAgICAgICAgICAgICAgICcgJyArIGZpZWxkVmFsdWVzW2ldLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAvLyBpZiAoY3VycmVudEluZGV4ID4gMCkge1xuICAgICAgICAgICAgLy8gICAgIGh0bWxSZWYuY2xhc3NMaXN0LmFkZCh0aGlzLmRpbWVuc2lvbnNbY3VycmVudEluZGV4IC0gMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICB0aGlzLmNvcm5lcldpZHRoID0gZmllbGRWYWx1ZXNbaV0ubGVuZ3RoICogMTA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgcm93RWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jb3JuZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1LFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG4gICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3Jvd0VsZW1lbnRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChyb3dFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNGdXJ0aGVyRGVwdGgpIHtcbiAgICAgICAgICAgICAgICByb3dFbGVtZW50LnJvd3NwYW4gPSB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCArIDEsIGZpbHRlcmVkRGF0YUhhc2hLZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbExlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydENlbGxPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jZWxsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY2VsbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93SGFzaDogZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEhhc2g6IHRoaXMuY29sdW1uS2V5QXJyW2pdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdLnB1c2goY2hhcnRDZWxsT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgbWlubWF4T2JqID0gdGhpcy5nZXRDaGFydE9iaihmaWx0ZXJlZERhdGFIYXNoS2V5LCB0aGlzLmNvbHVtbktleUFycltqXSlbMF07XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IChwYXJzZUludChtaW5tYXhPYmoubWF4KSA+IG1heCkgPyBtaW5tYXhPYmoubWF4IDogbWF4O1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSAocGFyc2VJbnQobWlubWF4T2JqLm1pbikgPCBtaW4pID8gbWlubWF4T2JqLm1pbiA6IG1pbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogbWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNYXgnOiBtYXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXNBeGlzT3Bwb3NpdGUnOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFhZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgICAgIHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd5LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm93c3BhbiArPSByb3dFbGVtZW50LnJvd3NwYW47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJvd3NwYW47XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlQ29sICh0YWJsZSwgZGF0YSwgY29sT3JkZXIsIGN1cnJlbnRJbmRleCwgZmlsdGVyZWREYXRhU3RvcmUpIHtcbiAgICAvLyAgICAgdmFyIGNvbHNwYW4gPSAwLFxuICAgIC8vICAgICAgICAgZmllbGRDb21wb25lbnQgPSBjb2xPcmRlcltjdXJyZW50SW5kZXhdLFxuICAgIC8vICAgICAgICAgZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XSxcbiAgICAvLyAgICAgICAgIGksIGwgPSBmaWVsZFZhbHVlcy5sZW5ndGgsXG4gICAgLy8gICAgICAgICBjb2xFbGVtZW50LFxuICAgIC8vICAgICAgICAgaGFzRnVydGhlckRlcHRoID0gY3VycmVudEluZGV4IDwgKGNvbE9yZGVyLmxlbmd0aCAtIDEpLFxuICAgIC8vICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAvLyAgICAgICAgIGh0bWxSZWY7XG5cbiAgICAvLyAgICAgaWYgKHRhYmxlLmxlbmd0aCA8PSBjdXJyZW50SW5kZXgpIHtcbiAgICAvLyAgICAgICAgIHRhYmxlLnB1c2goW10pO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcbiAgICAvLyAgICAgICAgIGxldCBjbGFzc1N0ciA9ICcnO1xuICAgIC8vICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAvLyAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRWYWx1ZXNbaV07XG4gICAgLy8gICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgIC8vICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAvLyAgICAgICAgIGNsYXNzU3RyICs9ICdjb2x1bW4tZGltZW5zaW9ucycgK1xuICAgIC8vICAgICAgICAgICAgICcgJyArIHRoaXMubWVhc3VyZXNbY3VycmVudEluZGV4XSArXG4gICAgLy8gICAgICAgICAgICAgJyAnICsgZmllbGRWYWx1ZXNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICAvLyAgICAgICAgIHRoaXMuY29ybmVySGVpZ2h0ID0gaHRtbFJlZi5vZmZzZXRIZWlnaHQ7XG4gICAgLy8gICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuICAgIC8vICAgICAgICAgY29sRWxlbWVudCA9IHtcbiAgICAvLyAgICAgICAgICAgICB3aWR0aDogdGhpcy5jZWxsV2lkdGgsXG4gICAgLy8gICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNvcm5lckhlaWdodCxcbiAgICAvLyAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgIC8vICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgLy8gICAgICAgICAgICAgaHRtbDogaHRtbFJlZi5vdXRlckhUTUwsXG4gICAgLy8gICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuICAgIC8vICAgICAgICAgfTtcblxuICAgIC8vICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG5cbiAgICAvLyAgICAgICAgIHRhYmxlW2N1cnJlbnRJbmRleF0ucHVzaChjb2xFbGVtZW50KTtcblxuICAgIC8vICAgICAgICAgaWYgKGhhc0Z1cnRoZXJEZXB0aCkge1xuICAgIC8vICAgICAgICAgICAgIGNvbEVsZW1lbnQuY29sc3BhbiA9IHRoaXMuY3JlYXRlQ29sKHRhYmxlLCBkYXRhLCBjb2xPcmRlciwgY3VycmVudEluZGV4ICsgMSwgZmlsdGVyZWREYXRhSGFzaEtleSk7XG4gICAgLy8gICAgICAgICB9IGVsc2Uge1xuICAgIC8vICAgICAgICAgICAgIHRoaXMuY29sdW1uS2V5QXJyLnB1c2goZmlsdGVyZWREYXRhSGFzaEtleSk7XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgICBjb2xzcGFuICs9IGNvbEVsZW1lbnQuY29sc3BhbjtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgICByZXR1cm4gY29sc3BhbjtcbiAgICAvLyB9XG5cbiAgICBjcmVhdGVDb2wgKHRhYmxlLCBkYXRhLCBtZWFzdXJlT3JkZXIpIHtcbiAgICAgICAgdmFyIGNvbHNwYW4gPSAwLFxuICAgICAgICAgICAgaSwgbCA9IHRoaXMubWVhc3VyZXMubGVuZ3RoLFxuICAgICAgICAgICAgY29sRWxlbWVudCxcbiAgICAgICAgICAgIGh0bWxSZWY7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJycsXG4gICAgICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSBtZWFzdXJlT3JkZXJbaV0sXG4gICAgICAgICAgICAgICAgZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XTtcbiAgICAgICAgICAgIGh0bWxSZWYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICAgICAgICBodG1sUmVmLmlubmVySFRNTCA9IGZpZWxkQ29tcG9uZW50O1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBjbGFzc1N0ciArPSAnY29sdW1uLWRpbWVuc2lvbnMnICtcbiAgICAgICAgICAgICAgICAnICcgKyB0aGlzLm1lYXN1cmVzW2ldICtcbiAgICAgICAgICAgICAgICAnICcgKyBmaWVsZFZhbHVlc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBjb2xFbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29ybmVySGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaCh0aGlzLm1lYXN1cmVzW2ldKTtcbiAgICAgICAgICAgIHRhYmxlWzBdLnB1c2goY29sRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGZpbHRlcmVkRGF0YUhhc2hLZXkgPSBmaWx0ZXJlZERhdGFTdG9yZSArIGZpZWxkVmFsdWVzW2ldICsgJ3wnO1xuXG4gICAgICAgICAgICAvLyB0YWJsZVtpXS5wdXNoKGNvbEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBpZiAoaGFzRnVydGhlckRlcHRoKSB7XG4gICAgICAgICAgICAvLyAgICAgY29sRWxlbWVudC5jb2xzcGFuID0gdGhpcy5jcmVhdGVDb2wodGFibGUsIGRhdGEsIGNvbE9yZGVyKTtcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaChmaWx0ZXJlZERhdGFIYXNoS2V5KTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGNvbHNwYW4gKz0gY29sRWxlbWVudC5jb2xzcGFuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZVJvd0RpbUhlYWRpbmcgKHRhYmxlLCBjb2xPcmRlckxlbmd0aCkge1xuICAgICAgICB2YXIgY29ybmVyQ2VsbEFyciA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBodG1sUmVmO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSB0aGlzLmRpbWVuc2lvbnNbaV1bMF0udG9VcHBlckNhc2UoKSArIHRoaXMuZGltZW5zaW9uc1tpXS5zdWJzdHIoMSk7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGggLSAxNSkgLyAyKSArICdweCc7XG4gICAgICAgICAgICBjb3JuZXJDZWxsQXJyLnB1c2goe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmRpbWVuc2lvbnNbaV0gKiAxMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Nvcm5lci1jZWxsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcm5lckNlbGxBcnI7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29sRGltSGVhZGluZyAodGFibGUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpID0gaW5kZXgsXG4gICAgICAgICAgICBodG1sUmVmO1xuICAgICAgICBmb3IgKDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICB0YWJsZVtpXS5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5tZWFzdXJlc1tpXS5sZW5ndGggKiAxMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdjb3JuZXItY2VsbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBjcmVhdGVDYXB0aW9uICh0YWJsZSwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcHRpb24nOiAnU2FsZSBvZiBDZXJlYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJjYXB0aW9uJzogJ0Fjcm9zcyBTdGF0ZXMsIEFjcm9zcyBZZWFycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6ICcwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFhZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICB0YWJsZS51bnNoaWZ0KFt7XG4gICAgICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgIGNvbHNwYW46IG1heExlbmd0aCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NhcHRpb24tY2hhcnQnLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjYXB0aW9uJyxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlQ3Jvc3N0YWIgKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBvYmogPSB0aGlzLmdsb2JhbERhdGEsXG4gICAgICAgICAgICByb3dPcmRlciA9IHRoaXMuZGltZW5zaW9ucy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gYXJyW2Fyci5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNvbE9yZGVyID0gdGhpcy5tZWFzdXJlcy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWVhc3VyZU9uUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0YWJsZSA9IFtdLFxuICAgICAgICAgICAgeEF4aXNSb3cgPSBbXSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGFibGUucHVzaCh0aGlzLmNyZWF0ZVJvd0RpbUhlYWRpbmcodGFibGUsIGNvbE9yZGVyLmxlbmd0aCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5jcmVhdGVDb2wodGFibGUsIG9iaiwgY29sT3JkZXIsIDAsICcnKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29sKHRhYmxlLCBvYmosIHRoaXMubWVhc3VyZXMpO1xuICAgICAgICAgICAgdGFibGUgPSB0aGlzLmNyZWF0ZUNvbERpbUhlYWRpbmcodGFibGUsIDApO1xuICAgICAgICAgICAgdGFibGUucHVzaChbXSk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgb2JqLCByb3dPcmRlciwgMCwgJycpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gKG1heExlbmd0aCA8IHRhYmxlW2ldLmxlbmd0aCkgPyB0YWJsZVtpXS5sZW5ndGggOiBtYXhMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdibGFuay1jZWxsJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWF4TGVuZ3RoIC0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhbnZhc1BhZGRpbmcnOiAxMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFhZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YWJsZS5wdXNoKHhBeGlzUm93KTtcbiAgICAgICAgICAgIHRhYmxlID0gdGhpcy5jcmVhdGVDYXB0aW9uKHRhYmxlLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhYmxlLnB1c2goW3tcbiAgICAgICAgICAgICAgICBodG1sOiAnPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj4nICsgdGhpcy5ub0RhdGFNZXNzYWdlICsgJzwvcD4nLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoXG4gICAgICAgICAgICB9XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cblxuICAgIHJvd0RpbVJlb3JkZXIgKHN1YmplY3QsIHRhcmdldCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gJycsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IHRoaXMuZGltZW5zaW9ucztcbiAgICAgICAgaWYgKHRoaXMubWVhc3VyZU9uUm93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkaW1lbnNpb25zLnNwbGljZShkaW1lbnNpb25zLmxlbmd0aCAtIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaW1lbnNpb25zLmluZGV4T2YoTWF0aC5tYXgoc3ViamVjdCwgdGFyZ2V0KSkgPj0gZGltZW5zaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnd3JvbmcgaW5kZXgnO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPiB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGRpbWVuc2lvbnNbc3ViamVjdF07XG4gICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0IC0gMTsgaSA+PSB0YXJnZXQ7IGktLSkge1xuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnNbaSArIDFdID0gZGltZW5zaW9uc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpbWVuc2lvbnNbdGFyZ2V0XSA9IGJ1ZmZlcjtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0IDwgdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBkaW1lbnNpb25zW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCArIDE7IGkgPD0gdGFyZ2V0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zW2kgLSAxXSA9IGRpbWVuc2lvbnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaW1lbnNpb25zW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuICAgIH1cblxuICAgIGNvbERpbVJlb3JkZXIgKHN1YmplY3QsIHRhcmdldCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gJycsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbWVhc3VyZXMgPSB0aGlzLm1lYXN1cmVzO1xuICAgICAgICBpZiAodGhpcy5tZWFzdXJlT25Sb3cgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtZWFzdXJlcy5zcGxpY2UobWVhc3VyZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lYXN1cmVzLmluZGV4T2YoTWF0aC5tYXgoc3ViamVjdCwgdGFyZ2V0KSkgPj0gbWVhc3VyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3dyb25nIGluZGV4JztcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0ID4gdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBtZWFzdXJlc1tzdWJqZWN0XTtcbiAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgLSAxOyBpID49IHRhcmdldDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZXNbaSArIDFdID0gbWVhc3VyZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZWFzdXJlc1t0YXJnZXRdID0gYnVmZmVyO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG1lYXN1cmVzW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCArIDE7IGkgPD0gdGFyZ2V0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlc1tpIC0gMV0gPSBtZWFzdXJlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lYXN1cmVzW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuICAgIH1cblxuICAgIG1lcmdlRGltZW5zaW9ucyAoKSB7XG4gICAgICAgIGxldCBkaW1lbnNpb25zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHRoaXMuZGltZW5zaW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLm1lYXN1cmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHRoaXMubWVhc3VyZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgIH1cblxuICAgIGNyZWF0ZUZpbHRlcnMgKCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBpaSA9IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICBqaiA9IDAsXG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzID0gdGhpcy5nbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1tpXV07XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IG1hdGNoZWRWYWx1ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXJHZW4odGhpcy5kaW1lbnNpb25zW2ldLCBtYXRjaGVkVmFsdWVzW2pdLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWYWw6IG1hdGNoZWRWYWx1ZXNbal1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVycztcbiAgICB9XG5cbiAgICBjcmVhdGVEYXRhQ29tYm9zICgpIHtcbiAgICAgICAgbGV0IHIgPSBbXSxcbiAgICAgICAgICAgIGdsb2JhbEFycmF5ID0gdGhpcy5tYWtlR2xvYmFsQXJyYXkoKSxcbiAgICAgICAgICAgIG1heCA9IGdsb2JhbEFycmF5Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVjdXJzZSAoYXJyLCBpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbCA9IGdsb2JhbEFycmF5W2ldLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhID0gYXJyLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIGEucHVzaChnbG9iYWxBcnJheVtpXVtqXSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IG1heCkge1xuICAgICAgICAgICAgICAgICAgICByLnB1c2goYSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzZShhLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlY3Vyc2UoW10sIDApO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBtYWtlR2xvYmFsQXJyYXkgKCkge1xuICAgICAgICBsZXQgdGVtcE9iaiA9IHt9LFxuICAgICAgICAgICAgdGVtcEFyciA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmdsb2JhbERhdGEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09IHRoaXMubWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHRlbXBPYmpba2V5XSA9IHRoaXMuZ2xvYmFsRGF0YVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRlbXBBcnIgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKS5tYXAoa2V5ID0+IHRlbXBPYmpba2V5XSk7XG4gICAgICAgIHJldHVybiB0ZW1wQXJyO1xuICAgIH1cblxuICAgIGdldEZpbHRlckhhc2hNYXAgKCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IHRoaXMuY3JlYXRlRmlsdGVycygpLFxuICAgICAgICAgICAgZGF0YUNvbWJvcyA9IHRoaXMuY3JlYXRlRGF0YUNvbWJvcygpLFxuICAgICAgICAgICAgaGFzaE1hcCA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gZGF0YUNvbWJvcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkYXRhQ29tYm8gPSBkYXRhQ29tYm9zW2ldLFxuICAgICAgICAgICAgICAgIGtleSA9ICcnLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsZW4gPSBkYXRhQ29tYm8ubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMCwgbGVuZ3RoID0gZmlsdGVycy5sZW5ndGg7IGsgPCBsZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyVmFsID0gZmlsdGVyc1trXS5maWx0ZXJWYWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhQ29tYm9bal0gPT09IGZpbHRlclZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gZGF0YUNvbWJvW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gJ3wnICsgZGF0YUNvbWJvW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChmaWx0ZXJzW2tdLmZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaE1hcDtcbiAgICB9XG5cbiAgICByZW5kZXJDcm9zc3RhYiAoKSB7XG4gICAgICAgIGxldCBjcm9zc3RhYiA9IHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKSxcbiAgICAgICAgICAgIG1hdHJpeCA9IHRoaXMuY3JlYXRlTXVsdGlDaGFydChjcm9zc3RhYiksXG4gICAgICAgICAgICB0MiA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBtYXRyaXgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IG1hdHJpeFtpXTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSByb3dbal0sXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudCA9IGNyb3NzdGFiW2ldW2pdLFxuICAgICAgICAgICAgICAgICAgICByb3dBeGlzID0gcm93W3Jvdy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBpZiAoIShjcm9zc3RhYkVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2NoYXJ0JykgfHwgY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdodG1sJykpICYmXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdibGFuay1jZWxsJykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGltaXRzID0gcm93QXhpcy5jaGFydC5jaGFydE9iai5nZXRMaW1pdHMoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbWl0ID0gbGltaXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4TGltaXQgPSBsaW1pdHNbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydCA9IHRoaXMuZ2V0Q2hhcnRPYmooY3Jvc3N0YWJFbGVtZW50LnJvd0hhc2gsIGNyb3NzdGFiRWxlbWVudC5jb2xIYXNoKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuY29uZmlndXJhdGlvbi5GQ2pzb24uY2hhcnQueUF4aXNNaW5WYWx1ZSA9IG1pbkxpbWl0O1xuICAgICAgICAgICAgICAgICAgICBjaGFydC5jb25maWd1cmF0aW9uLkZDanNvbi5jaGFydC55QXhpc01heFZhbHVlID0gbWF4TGltaXQ7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY29uZmlnLmNoYXJ0ID0gY2hhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydCA9IGNoYXJ0O1xuICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3RQZXJmICs9IChwZXJmb3JtYW5jZS5ub3coKSAtIHQyKTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC51cGRhdGUoY2VsbC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0MiA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3ZlcmluJywgKGV2dCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdHJpeC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSBjcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dbal0uY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQudHlwZSA9PT0gJ2NhcHRpb24nIHx8IHJvd1tqXS5jaGFydC50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsQWRhcHRlciA9IHJvd1tqXS5jaGFydC5jb25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSB0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlWYWwgPSBkYXRhLmRhdGFbY2F0ZWdvcnldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoY2F0ZWdvcnlWYWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWMuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXJvdXQnLCAoZXZ0LCBkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbWF0cml4Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdyA9IGNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJvdy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd1tqXS5jaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJvd1tqXS5jaGFydC50eXBlID09PSAnY2FwdGlvbicgfHwgcm93W2pdLmNoYXJ0LnR5cGUgPT09ICdheGlzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxBZGFwdGVyID0gcm93W2pdLmNoYXJ0LmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxBZGFwdGVyLmhpZ2hsaWdodCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlTXVsdGlDaGFydCAobWF0cml4KSB7XG4gICAgICAgIGlmICh0aGlzLm11bHRpY2hhcnRPYmplY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5tdWx0aWNoYXJ0T2JqZWN0ID0gdGhpcy5tYy5jcmVhdGVNYXRyaXgodGhpcy5jcm9zc3RhYkNvbnRhaW5lciwgbWF0cml4KTtcbiAgICAgICAgICAgIHdpbmRvdy5jdFBlcmYgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMudDE7XG4gICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QuZHJhdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tdWx0aWNoYXJ0T2JqZWN0LnVwZGF0ZShtYXRyaXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXI7XG4gICAgfVxuXG4gICAgcGVybXV0ZUFyciAoYXJyKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHBlcm11dGUgKGFyciwgbWVtKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgICAgIG1lbSA9IG1lbSB8fCBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobWVtLmNvbmNhdChjdXJyZW50KS5qb2luKCd8JykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZXJtdXRlKGFyci5zbGljZSgpLCBtZW0uY29uY2F0KGN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGksIDAsIGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBlcm11dGVTdHJzID0gcGVybXV0ZShhcnIpO1xuICAgICAgICByZXR1cm4gcGVybXV0ZVN0cnMuam9pbignKiElXicpO1xuICAgIH1cblxuICAgIG1hdGNoSGFzaCAoZmlsdGVyU3RyLCBoYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBoYXNoKSB7XG4gICAgICAgICAgICBpZiAoaGFzaC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBrZXkuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgICAgICAgICAga2V5UGVybXV0YXRpb25zID0gdGhpcy5wZXJtdXRlQXJyKGtleXMpLnNwbGl0KCcqISVeJyk7XG4gICAgICAgICAgICAgICAgaWYgKGtleVBlcm11dGF0aW9ucy5pbmRleE9mKGZpbHRlclN0cikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlQZXJtdXRhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDaGFydE9iaiAocm93RmlsdGVyLCBjb2xGaWx0ZXIpIHtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSBbXSxcbiAgICAgICAgICAgIGZpbHRlclN0ciA9ICcnLFxuICAgICAgICAgICAgcm93RmlsdGVycyA9IHJvd0ZpbHRlci5zcGxpdCgnfCcpLFxuICAgICAgICAgICAgZGF0YVByb2Nlc3NvcnMgPSBbXSxcbiAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IgPSB7fSxcbiAgICAgICAgICAgIG1hdGNoZWRIYXNoZXMgPSBbXSxcbiAgICAgICAgICAgIGZpbHRlcmVkSlNPTiA9IFtdLFxuICAgICAgICAgICAgbWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgbWluID0gSW5maW5pdHksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSB7fSxcbiAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7fSxcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB7fSxcbiAgICAgICAgICAgIGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV07XG5cbiAgICAgICAgcm93RmlsdGVycy5wdXNoLmFwcGx5KHJvd0ZpbHRlcnMpO1xuICAgICAgICBmaWx0ZXJzID0gcm93RmlsdGVycy5maWx0ZXIoKGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoYSAhPT0gJycpO1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyU3RyID0gZmlsdGVycy5qb2luKCd8Jyk7XG4gICAgICAgIG1hdGNoZWRIYXNoZXMgPSB0aGlzLmhhc2hbdGhpcy5tYXRjaEhhc2goZmlsdGVyU3RyLCB0aGlzLmhhc2gpXTtcbiAgICAgICAgaWYgKG1hdGNoZWRIYXNoZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdGNoZWRIYXNoZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IgPSB0aGlzLm1jLmNyZWF0ZURhdGFQcm9jZXNzb3IoKTtcbiAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29yLmZpbHRlcihtYXRjaGVkSGFzaGVzW2ldKTtcbiAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29ycy5wdXNoKGRhdGFQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsdGVyZWREYXRhID0gdGhpcy5kYXRhU3RvcmUuZ2V0RGF0YShkYXRhUHJvY2Vzc29ycyk7XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSBmaWx0ZXJlZERhdGFbZmlsdGVyZWREYXRhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgZmlsdGVyZWRKU09OID0gZmlsdGVyZWREYXRhLmdldEpTT04oKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGZpbHRlcmVkSlNPTi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdID4gbWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRKU09OW2ldW2NvbEZpbHRlcl0gPCBtaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgbWluID0gZmlsdGVyZWRKU09OW2ldW2NvbEZpbHRlcl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWRhcHRlckNmZyA9IHtcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uOiBbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IFtjb2xGaWx0ZXJdLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNUeXBlOiAnU1MnLFxuICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVNb2RlOiB0aGlzLmFnZ3JlZ2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHRoaXMuY2hhcnRDb25maWdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGFzdG9yZTogZmlsdGVyZWREYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YWFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICAnbWF4JzogbWF4LFxuICAgICAgICAgICAgICAgICdtaW4nOiBtaW5cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLmNoYXJ0VHlwZSxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGpzb25EYXRhOiBmaWx0ZXJlZEpTT04sXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbjogYWRhcHRlclxuICAgICAgICAgICAgfV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaWx0ZXJHZW4gKGtleSwgdmFsKSB7XG4gICAgICAgIHJldHVybiAoZGF0YSkgPT4gZGF0YVtrZXldID09PSB2YWw7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENyb3NzdGFiRXh0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Nyb3NzdGFiRXh0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBbXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTEsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxM1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE2XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDIsXG4gICAgICAgICdWaXNpdG9ycyc6IDlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMyxcbiAgICAgICAgJ1Byb2ZpdCc6IDEsXG4gICAgICAgICdWaXNpdG9ycyc6IDlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDEyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogMTMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDE5XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMyxcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA4LFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDEwLFxuICAgICAgICAnVmlzaXRvcnMnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDEwLFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDEzXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogMTMsXG4gICAgICAgICdWaXNpdG9ycyc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDE5XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA5LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA3LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH1cbl07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGFyZ2VEYXRhLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==