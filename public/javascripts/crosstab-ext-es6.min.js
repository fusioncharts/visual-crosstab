/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={rowDimensions:['Product','State'],colDimensions:['Year','Quality','Month'],chartType:'column2d',noDataMessage:'No data to display.',measure:'Sale',measureOnRow:!1,cellWidth:120,cellHeight:100,crosstabContainer:'crosstab-div',aggregation:'sum',chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',chartBottomMargin:'5',chartTopMargin:'5',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#ffffff',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'0',transposeAnimation:'1',alternateHGridAlpha:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#ffffff',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.data=b,'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now();else return{test:function(f){return f}};this.chartType=c.chartType,this.chartConfig=c.chartConfig,this.rowDimensions=c.rowDimensions,this.colDimensions=c.colDimensions,this.dimensions=this.mergeDimensions(),this.measure=c.measure,this.measureOnRow=c.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=c.cellWidth,this.cellHeight=c.cellHeight,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation,this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.dataStore.addEventListener('tempEvent',()=>{this.globalData=this.buildGlobalData(),this.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let f=0,g=b.length;f<g;f++)c[b[f]]=this.dataStore.getUniqueValues(b[f]);return c}return!1}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this.columnKeyArr.length,x=1/0,y=-(1/0),z={};for(p=0;p<q;p+=1){let A='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',A+='row-dimensions '+this.rowDimensions[g]+' '+o[p].toLowerCase(),w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:A},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{for(let D=0;D<v;D+=1){let E={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this.columnKeyArr[D]};b[b.length-1].push(E),z=this.getChartObj(u,this.columnKeyArr[D])[0],y=parseInt(z.max)>y?z.max:y,x=parseInt(z.min)<x?z.min:x}let B={config:{config:{chart:{dataMin:x,axisType:'y',dataMax:y,isAxisOpposite:!0,borderthickness:0,chartBottomMargin:5}}}},C=this.mc.dataadapter(B);b[b.length-1].push({rowspan:1,colspan:1,className:'y-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:C}})}m+=s.rowspan}return m}createCol(b,c,f,g,h){var p,s,u,v,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1;for(b.length<=g&&b.push([]),p=0;p<q;p+=1){let w='';v=document.createElement('p'),v.innerHTML=o[p],v.style.textAlign='center',document.body.appendChild(v),w+='column-dimensions '+this.colDimensions[g]+' '+o[p].toLowerCase(),this.cornerHeight=v.offsetHeight,document.body.removeChild(v),s={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:v.outerHTML,className:w},u=h+o[p]+'|',b[g].push(s),t?s.colspan=this.createCol(b,c,f,g+1,u):this.columnKeyArr.push(u),m+=s.colspan}return m}createRowDimHeading(b,c){var h,f=[],g=0;for(g=0;g<this.rowDimensions.length;g++)h=document.createElement('p'),h.innerHTML=this.rowDimensions[g][0].toUpperCase()+this.rowDimensions[g].substr(1),h.style.textAlign='center',h.style.marginTop=(30*this.colDimensions.length-15)/2+'px',f.push({width:10*this.rowDimensions[g],height:30*this.colDimensions.length,rowspan:c,colspan:1,html:h.outerHTML,className:'corner-cell'});return f}createColDimHeading(b,c){for(var g,f=c;f<b.length;f++)g=document.createElement('p'),g.innerHTML=this.colDimensions[f][0].toUpperCase()+this.colDimensions[f].substr(1),g.style.textAlign='center',b[f].push({width:10*this.colDimensions[f].length,height:30,rowspan:1,colspan:1,html:g.outerHTML,className:'corner-cell'});return b}createCaption(b,c){let f=this.mc.dataadapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:f}}]),b}createCrosstab(){var b=this,c=this.globalData,f=this.rowDimensions.filter(function(p,q,s){if(!b.measureOnRow)return!0;else if(p!==s[s.length-1])return!0}),g=this.colDimensions.filter(function(p,q,s){if(b.measureOnRow)return!0;return p!==s[s.length-1]||void 0}),h=[],m=[],n=0,o=0;if(c){for(h.push(this.createRowDimHeading(h,g.length)),this.createCol(h,c,g,0,''),h=this.createColDimHeading(h,0),h.push([]),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;for(n=0;n<this.rowDimensions.length;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});for(n=0;n<o-1-this.rowDimensions.length;n++){let p=this.globalData[this.colDimensions[this.colDimensions.length-1]],q=this.mc.dataadapter({config:{config:{chart:{axisType:'x',borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:p}}});m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:q}})}h.push(m),h=this.createCaption(h,o),this.columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.rowDimensions.length*this.colDimensions.length}]);return h}rowDimReorder(b,c){var g,f='',h=this.rowDimensions;if(!0===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}colDimReorder(b,c){var g,f='',h=this.colDimensions;if(!1===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,f=this.rowDimensions.length;c<f;c++)b.push(this.rowDimensions[c]);for(let c=0,f=this.colDimensions.length;c<f;c++)b.push(this.colDimensions[c]);return b}createFilters(){let b=[];for(let c=0,f=this.dimensions.length;c<f;c++)if(this.measureOnRow&&this.dimensions[c]!==this.rowDimensions[this.rowDimensions.length-1]){let g=this.globalData[this.dimensions[c]];for(let h=0,m=g.length;h<m;h++)b.push({filter:this.filterGen(this.dimensions[c],g[h].toString()),filterVal:g[h]})}else if(!this.measureOnRow&&this.dimensions[c]!==this.colDimensions[this.colDimensions.length-1]){let g=this.globalData[this.dimensions[c]];for(let h=0,m=g.length;h<m;h++)b.push({filter:this.filterGen(this.dimensions[c],g[h].toString()),filterVal:g[h]})}return b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&f!==this.measure&&(this.measureOnRow&&f!==this.rowDimensions[this.rowDimensions.length-1]?b[f]=this.globalData[f]:!this.measureOnRow&&f!==this.colDimensions[this.colDimensions.length-1]&&(b[f]=this.globalData[f]));return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}renderCrosstab(){let b=this.createCrosstab(),c=this.createMultiChart(b),f=performance.now();for(let g=0,h=c.length;g<h;g++){let m=c[g];for(let n=0,o=m.length;n<o;n++){let p=m[n],q=b[g][n],s=m[m.length-1];if(!(q.hasOwnProperty('chart')||q.hasOwnProperty('html'))&&'blank-cell'!==q.className){let t=s.chart.chartObj.getLimits(),u=t[0],v=t[1],w=this.getChartObj(q.rowHash,q.colHash)[1];w.configuration.FCjson.chart.yAxisMinValue=u,w.configuration.FCjson.chart.yAxisMaxValue=v,p.config.chart=w,q.chart=w,window.ctPerf+=performance.now()-f,p.update(p.config)}f=performance.now()}}this.mc.addEventListener('hoverin',(g,h)=>{if(h.data)for(let n=0,o=c.length;n<o;n++){let p=b[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.type&&'axis'!==p[m].chart.type){let q=p[m].chart.configuration,s=this.dimensions[this.dimensions.length-1],t=h.data[s];q.highlight(t)}}}),this.mc.addEventListener('hoverout',(g,h)=>{if(h.data)for(let n=0,o=c.length;n<o;n++){let p=b[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.type&&'axis'!==p[m].chart.type){let q=p[m].chart.configuration;q.highlight()}}})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(b),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c){let f=[],g='',h=b.split('|'),m=c.split('|'),n=[],o={},p=[],q=[],s=-(1/0),t=1/0,u={},v={},w={},x=this.globalData[this.colDimensions[this.colDimensions.length-1]];if(h.push.apply(h,m),f=h.filter(y=>{return''!==y}),g=f.join('|'),p=this.hash[this.matchHash(g,this.hash)],p){for(let y=0,z=p.length;y<z;y++)o=this.mc.createDataProcessor(),o.filter(p[y]),n.push(o);u=this.dataStore.getData(n),u=u[u.length-1],q=u.getJSON();for(let y=0,z=q.length;y<z;y++)q[y][this.measure]>s&&(s=q[y][this.measure]),q[y][this.measure]<t&&(t=q[y][this.measure]);return v={config:{dimension:this.measureOnRow?[this.rowDimensions[this.rowDimensions.length-1]]:[this.colDimensions[this.colDimensions.length-1]],measure:[this.measure],seriesType:'SS',aggregateMode:this.aggregation,categories:x,config:this.chartConfig},datastore:u},w=this.mc.dataadapter(v),[{max:s,min:t},{type:this.chartType,width:'100%',height:'100%',jsonData:q,configuration:w}]}}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,