!function(t){function e(i){if(a[i])return a[i].exports;var o=a[i]={exports:{},id:i,loaded:!1};return t[i].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(1),o=e(2),r={rowDimensions:["Product","State"],colDimensions:["Year","Quality","Month"],chartType:"column2d",noDataMessage:"No data to display.",measure:"Sale",measureOnRow:!1,cellWidth:120,cellHeight:100,crosstabContainer:"crosstab-div",aggregation:"sum",chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",chartBottomMargin:"5",chartTopMargin:"5",chartLeftMargin:"5",chartRightMargin:"5",zeroPlaneThickness:"1",showZeroPlaneValue:"1",zeroPlaneAlpha:"100",bgColor:"#ffffff",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"0",transposeAnimation:"1",alternateHGridAlpha:"0",canvasBorderAlpha:"100",alternateVGridAlpha:"0",paletteColors:"#B5B9BA",usePlotGradientColor:"0",valueFontColor:"#ffffff"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new i(o,r),window.crosstab.renderCrosstab()):t.exports=i},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),i=function(){function t(a,i){e(this,t);var o=this;if(this.data=a,"function"!=typeof MultiCharting)return{test:function(t){return t}};if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now(),this.chartType=i.chartType,this.chartConfig=i.chartConfig,this.rowDimensions=i.rowDimensions,this.colDimensions=i.colDimensions,this.dimensions=this.mergeDimensions(),this.measure=i.measure,this.measureOnRow=i.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=i.cellWidth,this.cellHeight=i.cellHeight,this.crosstabContainer=i.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=i.aggregation,this.axes=[],this.noDataMessage=i.noDataMessage,"function"==typeof FCDataFilterExt){var r={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,r,"control-box")}this.mc.addEventListener("dataModified",function(){o.globalData=o.buildGlobalData(),o.renderCrosstab()})}return a(t,[{key:"buildGlobalData",value:function(){if(this.dataStore.getKeys()){for(var t=this.dataStore.getKeys(),e={},a=0,i=t.length;a<i;a++)e[t[a]]=this.dataStore.getUniqueValues(t[a]);return e}return!1}},{key:"createRow",value:function(t,e,a,i,o){var r,n,s,h,l=0,u=a[i],c=e[u],d=c.length,g=i<a.length-1,m=this.columnKeyArr.length,f=1/0,p=-(1/0),y={};for(r=0;r<d;r+=1){var S="";if(h=document.createElement("p"),h.innerHTML=c[r],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",S+="row-dimensions "+this.rowDimensions[i]+" "+c[r].toLowerCase(),h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*c[r].length,document.body.removeChild(h),h.style.visibility="visible",n={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:S},s=o+c[r]+"|",r?t.push([n]):t[t.length-1].push(n),g)n.rowspan=this.createRow(t,e,a,i+1,s);else{for(var M=0;M<m;M+=1){var w={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:s,colHash:this.columnKeyArr[M]};t[t.length-1].push(w),y=this.getChartObj(s,this.columnKeyArr[M])[0],p=parseInt(y.max)>p?y.max:p,f=parseInt(y.min)<f?y.min:f}var v={config:{config:{chart:{dataMin:f,dataMax:p,isAxisOpposite:!0,borderthickness:0,chartBottomMargin:5}}}},D=this.mc.dataadapter(v);t[t.length-1].push({rowspan:1,colspan:1,className:"y-axis-chart",chart:{type:"axis",axisType:"y",width:"100%",height:"100%",dataFormat:"json",configuration:D}})}l+=n.rowspan}return l}},{key:"createCol",value:function(t,e,a,i,o){var r,n,s,h,l=0,u=a[i],c=e[u],d=c.length,g=i<a.length-1;for(t.length<=i&&t.push([]),r=0;r<d;r+=1){var m="";h=document.createElement("p"),h.innerHTML=c[r],h.style.textAlign="center",document.body.appendChild(h),m+="column-dimensions "+this.colDimensions[i]+" "+c[r].toLowerCase(),this.cornerHeight=h.offsetHeight,document.body.removeChild(h),n={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:h.outerHTML,className:m},s=o+c[r]+"|",t[i].push(n),g?n.colspan=this.createCol(t,e,a,i+1,s):this.columnKeyArr.push(s),l+=n.colspan}return l}},{key:"createRowDimHeading",value:function(t,e){var a,i=[],o=0;for(o=0;o<this.rowDimensions.length;o++)a=document.createElement("p"),a.innerHTML=this.rowDimensions[o][0].toUpperCase()+this.rowDimensions[o].substr(1),a.style.textAlign="center",a.style.marginTop=(30*this.colDimensions.length-15)/2+"px",i.push({width:10*this.rowDimensions[o],height:30*this.colDimensions.length,rowspan:e,colspan:1,html:a.outerHTML,className:"corner-cell"});return i}},{key:"createColDimHeading",value:function(t,e){for(var a,i=e;i<t.length;i++)a=document.createElement("p"),a.innerHTML=this.colDimensions[i][0].toUpperCase()+this.colDimensions[i].substr(1),a.style.textAlign="center",t[i].push({width:10*this.colDimensions[i].length,height:30,rowspan:1,colspan:1,html:a.outerHTML,className:"corner-cell"});return t}},{key:"createCaption",value:function(t,e){var a={config:{config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}}},i=this.mc.dataadapter(a);return t.unshift([{height:50,rowspan:1,colspan:e,className:"caption-chart",chart:{type:"caption",width:"100%",height:"100%",dataFormat:"json",configuration:i}}]),t}},{key:"createCrosstab",value:function(){var t=this,e=this.globalData,a=this.rowDimensions.filter(function(e,a,i){return!t.measureOnRow||(e!==i[i.length-1]||void 0)}),i=this.colDimensions.filter(function(e,a,i){return!!t.measureOnRow||(e!==i[i.length-1]||void 0)}),o=[],r=[],n=0,s=0;if(e){for(o.push(this.createRowDimHeading(o,i.length)),this.createCol(o,e,i,0,""),o=this.createColDimHeading(o,0),o.push([]),this.createRow(o,e,a,0,""),n=0;n<o.length;n++)s=s<o[n].length?o[n].length:s;for(n=0;n<this.rowDimensions.length;n++)r.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(n=0;n<s-1-this.rowDimensions.length;n++){var h=this.globalData[this.colDimensions[this.colDimensions.length-1]],l={config:{config:{chart:{borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:h}}},u=this.mc.dataadapter(l);r.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",axisType:"x",configuration:u}})}o.push(r),o=this.createCaption(o,s),this.columnKeyArr=[]}else o.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.rowDimensions.length*this.colDimensions.length}]);return o}},{key:"rowDimReorder",value:function(t,e){var a,i="",o=this.rowDimensions;if(this.measureOnRow===!0&&o.splice(o.length-1,1),o.indexOf(Math.max(t,e))>=o.length)return"wrong index";if(t>e){for(i=o[t],a=t-1;a>=e;a--)o[a+1]=o[a];o[e]=i}else if(t<e){for(i=o[t],a=t+1;a<=e;a++)o[a-1]=o[a];o[e]=i}this.createCrosstab()}},{key:"colDimReorder",value:function(t,e){var a,i="",o=this.colDimensions;if(this.measureOnRow===!1&&o.splice(o.length-1,1),o.indexOf(Math.max(t,e))>=o.length)return"wrong index";if(t>e){for(i=o[t],a=t-1;a>=e;a--)o[a+1]=o[a];o[e]=i}else if(t<e){for(i=o[t],a=t+1;a<=e;a++)o[a-1]=o[a];o[e]=i}this.createCrosstab()}},{key:"mergeDimensions",value:function(){for(var t=[],e=0,a=this.rowDimensions.length;e<a;e++)t.push(this.rowDimensions[e]);for(var i=0,o=this.colDimensions.length;i<o;i++)t.push(this.colDimensions[i]);return t}},{key:"createFilters",value:function(){for(var t=[],e=0,a=this.dimensions.length;e<a;e++)if(this.measureOnRow&&this.dimensions[e]!==this.rowDimensions[this.rowDimensions.length-1])for(var i=this.globalData[this.dimensions[e]],o=0,r=i.length;o<r;o++)t.push({filter:this.filterGen(this.dimensions[e],i[o].toString()),filterVal:i[o]});else if(!this.measureOnRow&&this.dimensions[e]!==this.colDimensions[this.colDimensions.length-1])for(var n=this.globalData[this.dimensions[e]],s=0,h=n.length;s<h;s++)t.push({filter:this.filterGen(this.dimensions[e],n[s].toString()),filterVal:n[s]});return t}},{key:"createDataCombos",value:function(){function t(o,r){for(var n=0,s=a[r].length;n<s;n++){var h=o.slice(0);h.push(a[r][n]),r===i?e.push(h):t(h,r+1)}}var e=[],a=this.makeGlobalArray(),i=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&a!==this.measure&&(this.measureOnRow&&a!==this.rowDimensions[this.rowDimensions.length-1]?t[a]=this.globalData[a]:this.measureOnRow||a===this.colDimensions[this.colDimensions.length-1]||(t[a]=this.globalData[a]));return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},i=0,o=e.length;i<o;i++){for(var r=e[i],n="",s=[],h=0,l=r.length;h<l;h++)for(var u=0,c=t.length;u<c;u++){var d=t[u].filterVal;r[h]===d&&(n+=0===h?r[h]:"|"+r[h],s.push(t[u].filter))}a[n]=s}return a}},{key:"renderCrosstab",value:function(){for(var t=this,e=this.createCrosstab(),a=this.createMultiChart(e),i=performance.now(),o=0,r=a.length;o<r;o++)for(var n=a[o],s=0,h=n.length;s<h;s++){var l=n[s],u=e[o][s],c=n[n.length-1];if(!u.hasOwnProperty("chart")&&!u.hasOwnProperty("html")&&"blank-cell"!==u.className){var d=c.chart.chartObj.getLimits(),g=d[0],m=d[1],f=this.getChartObj(u.rowHash,u.colHash)[1];f.configuration.FCjson.chart.yAxisMinValue=g,f.configuration.FCjson.chart.yAxisMaxValue=m,l.config.chart=f,u.chart=f,window.ctPerf+=performance.now()-i,l.update(l.config)}i=performance.now()}this.mc.addEventListener("hoverin",function(i,o){if(!((new Date).getTime()-window.time<200)&&(window.time=(new Date).getTime(),o.data))for(var r=0,n=a.length;r<n;r++)for(var s=e[r],h=0;h<s.length;h++)if(s[h].chart&&"caption"!==s[h].chart.type&&"axis"!==s[h].chart.type){var l=s[h].chart.configuration,u=t.dimensions[t.dimensions.length-1],c=o.data[u];l.highlight(c)}})}},{key:"createMultiChart",value:function(t){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,t),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(t),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,i){var o=void 0;i=i||[];for(var r=0,n=t.length;r<n;r++)o=t.splice(r,1),0===t.length&&a.push(i.concat(o).join("|")),e(t.slice(),i.concat(o)),t.splice(r,0,o[0]);return a}var a=[],i=e(t);return i.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var i=a.split("|"),o=this.permuteArr(i).split("*!%^");if(o.indexOf(t)!==-1)return o[0]}else;return!1}},{key:"getChartObj",value:function(t,e){var a=[],i="",o=t.split("|"),r=e.split("|"),n=[],s={},h=[],l=[],u=-(1/0),c=1/0,d={},g={},m={},f=this.globalData[this.colDimensions[this.colDimensions.length-1]];if(o.push.apply(o,r),a=o.filter(function(t){return""!==t}),i=a.join("|"),h=this.hash[this.matchHash(i,this.hash)]){for(var p=0,y=h.length;p<y;p++)s=this.mc.createDataProcessor(),s.filter(h[p]),n.push(s);d=this.dataStore.getData(n),d=d[d.length-1],l=d.getJSON();for(var S=0,M=l.length;S<M;S++)l[S][this.measure]>u&&(u=l[S][this.measure]),l[S][this.measure]<c&&(c=l[S][this.measure]);return g={config:{dimension:this.measureOnRow?[this.rowDimensions[this.rowDimensions.length-1]]:[this.colDimensions[this.colDimensions.length-1]],measure:[this.measure],seriesType:"SS",aggregateMode:this.aggregation,categories:f,config:this.chartConfig},datastore:d},m=this.mc.dataadapter(g),[{max:u,min:c},{type:this.chartType,width:"100%",height:"100%",jsonData:l,configuration:m}]}}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=i},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,