!function(t){function e(i){if(a[i])return a[i].exports;var r=a[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(1),r=e(2),o={dimensions:["Product","State","Month"],measures:["Sale","Visitors","Profit"],chartType:"column2d",noDataMessage:"No data to display.",measureOnRow:!1,cellWidth:120,cellHeight:100,crosstabContainer:"crosstab-div",aggregation:"sum",chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",chartBottomMargin:"5",chartTopMargin:"5",chartLeftMargin:"5",chartRightMargin:"5",zeroPlaneThickness:"1",showZeroPlaneValue:"1",zeroPlaneAlpha:"100",bgColor:"#ffffff",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"100",alternateVGridAlpha:"0",paletteColors:"#B5B9BA",usePlotGradientColor:"0",valueFontColor:"#ffffff",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new i(r,o),window.crosstab.renderCrosstab()):t.exports=i},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),i=function(){function t(a,i){var r=this;if(e(this,t),this.data=a,"function"!=typeof MultiCharting)return{test:function(t){return t}};if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now(),this.chartType=i.chartType,this.chartConfig=i.chartConfig,this.dimensions=i.dimensions,this.measures=i.measures,this.measureOnRow=i.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=i.cellWidth,this.cellHeight=i.cellHeight,this.crosstabContainer=i.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=i.aggregation,this.axes=[],this.noDataMessage=i.noDataMessage,"function"==typeof FCDataFilterExt){var o={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,o,"control-box")}this.dataStore.addEventListener("tempEvent",function(t,e){r.globalData=r.buildGlobalData(),r.renderCrosstab()})}return a(t,[{key:"buildGlobalData",value:function(){if(this.dataStore.getKeys()){for(var t=this.dataStore.getKeys(),e={},a=0,i=t.length;a<i;a++)e[t[a]]=this.dataStore.getUniqueValues(t[a]);return e}return!1}},{key:"createRow",value:function(t,e,a,i,r){var o,n,s,h,l=0,u=a[i],c=e[u],d=c.length,f=i<a.length-1,g=this.columnKeyArr.length,m=1/0,y=-(1/0),p={};for(o=0;o<d;o+=1){var S="";if(h=document.createElement("p"),h.innerHTML=c[o],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",S+="row-dimensions "+this.dimensions[i]+" "+c[o].toLowerCase(),h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*c[o].length,document.body.removeChild(h),h.style.visibility="visible",n={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:S},s=r+c[o]+"|",o?t.push([n]):t[t.length-1].push(n),f)n.rowspan=this.createRow(t,e,a,i+1,s);else{for(var P=0;P<g;P+=1){var M={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:s,colHash:this.columnKeyArr[P]};t[t.length-1].push(M),p=this.getChartObj(s,this.columnKeyArr[P])[0],y=parseInt(p.max)>y?p.max:y,m=parseInt(p.min)<m?p.min:m}var v={config:{config:{chart:{dataMin:m,axisType:"y",dataMax:y,isAxisOpposite:!0,borderthickness:0,chartBottomMargin:5}}}},V=this.mc.dataadapter(v);t[t.length-1].push({rowspan:1,colspan:1,className:"y-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",configuration:V}})}l+=n.rowspan}return l}},{key:"createCol",value:function(t,e,a){var i,r,o,n=0,s=this.measures.length;for(i=0;i<s;i+=1){var h="",l=a[i],u=e[l];o=document.createElement("p"),o.innerHTML=l,o.style.textAlign="center",document.body.appendChild(o),h+="column-dimensions "+this.measures[i]+" "+u[i].toLowerCase(),this.cornerHeight=o.offsetHeight,document.body.removeChild(o),r={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:o.outerHTML,className:h},this.columnKeyArr.push(this.measures[i]),t[0].push(r)}return n}},{key:"createRowDimHeading",value:function(t,e){var a,i=[],r=0;for(r=0;r<this.dimensions.length-1;r++)a=document.createElement("p"),a.innerHTML=this.dimensions[r][0].toUpperCase()+this.dimensions[r].substr(1),a.style.textAlign="center",a.style.marginTop=(30*this.measures.length-15)/2+"px",i.push({width:10*this.dimensions[r],height:30*this.measures.length,rowspan:1,colspan:1,html:a.outerHTML,className:"corner-cell"});return i}},{key:"createColDimHeading",value:function(t,e){for(var a,i=e;i<t.length;i++)a=document.createElement("p"),a.innerHTML="",a.style.textAlign="center",t[i].push({width:10*this.measures[i].length,height:30,rowspan:1,colspan:1,html:a.outerHTML,className:"corner-cell"});return t}},{key:"createCaption",value:function(t,e){var a={config:{config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}}},i=this.mc.dataadapter(a);return t.unshift([{height:50,rowspan:1,colspan:e,className:"caption-chart",chart:{type:"caption",width:"100%",height:"100%",dataFormat:"json",configuration:i}}]),t}},{key:"createCrosstab",value:function(){var t=this,e=this.globalData,a=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),i=this.measures.filter(function(e,a,i){return!!t.measureOnRow||(e!==i[i.length-1]||void 0)}),r=[],o=[],n=0,s=0;if(e){for(r.push(this.createRowDimHeading(r,i.length)),this.createCol(r,e,this.measures),r=this.createColDimHeading(r,0),r.push([]),this.createRow(r,e,a,0,""),n=0;n<r.length;n++)s=s<r[n].length?r[n].length:s;for(n=0;n<this.dimensions.length-1;n++)o.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(n=0;n<s-this.dimensions.length;n++){var h=this.globalData[this.dimensions[this.dimensions.length-1]],l={config:{config:{chart:{axisType:"x",borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:h}}},u=this.mc.dataadapter(l);o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",configuration:u}})}r.push(o),r=this.createCaption(r,s),this.columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"rowDimReorder",value:function(t,e){var a,i="",r=this.dimensions;if(this.measureOnRow===!0&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"colDimReorder",value:function(t,e){var a,i="",r=this.measures;if(this.measureOnRow===!1&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"mergeDimensions",value:function(){for(var t=[],e=0,a=this.dimensions.length;e<a;e++)t.push(this.dimensions[e]);for(var i=0,r=this.measures.length;i<r;i++)t.push(this.measures[i]);return t}},{key:"createFilters",value:function(){var t=[],e=0,a=this.dimensions.length-1,i=0,r=0,o=void 0;for(e=0;e<a;e++)for(o=this.globalData[this.dimensions[e]],i=0,r=o.length;i<r;i++)t.push({filter:this.filterGen(this.dimensions[e],o[i].toString()),filterVal:o[i]});return t}},{key:"createDataCombos",value:function(){function t(r,o){for(var n=0,s=a[o].length;n<s;n++){var h=r.slice(0);h.push(a[o][n]),o===i?e.push(h):t(h,o+1)}}var e=[],a=this.makeGlobalArray(),i=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&a!==this.measure&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},i=0,r=e.length;i<r;i++){for(var o=e[i],n="",s=[],h=0,l=o.length;h<l;h++)for(var u=0,c=t.length;u<c;u++){var d=t[u].filterVal;o[h]===d&&(n+=0===h?o[h]:"|"+o[h],s.push(t[u].filter))}a[n]=s}return a}},{key:"renderCrosstab",value:function(){for(var t=this,e=this.createCrosstab(),a=this.createMultiChart(e),i=performance.now(),r=0,o=a.length;r<o;r++)for(var n=a[r],s=0,h=n.length;s<h;s++){var l=n[s],u=e[r][s],c=n[n.length-1];if(!u.hasOwnProperty("chart")&&!u.hasOwnProperty("html")&&"blank-cell"!==u.className){var d=c.chart.chartObj.getLimits(),f=d[0],g=d[1],m=this.getChartObj(u.rowHash,u.colHash)[1];m.configuration.FCjson.chart.yAxisMinValue=f,m.configuration.FCjson.chart.yAxisMaxValue=g,l.config.chart=m,u.chart=m,window.ctPerf+=performance.now()-i,l.update(l.config)}i=performance.now()}this.mc.addEventListener("hoverin",function(i,r){if(r.data)for(var o=0,n=a.length;o<n;o++)for(var s=e[o],h=0;h<s.length;h++)if(s[h].chart&&"caption"!==s[h].chart.type&&"axis"!==s[h].chart.type){var l=s[h].chart.configuration,u=t.dimensions[t.dimensions.length-1],c=r.data[u];l.highlight(c)}}),this.mc.addEventListener("hoverout",function(t,i){if(i.data)for(var r=0,o=a.length;r<o;r++)for(var n=e[r],s=0;s<n.length;s++)if(n[s].chart&&"caption"!==n[s].chart.type&&"axis"!==n[s].chart.type){var h=n[s].chart.configuration;h.highlight()}})}},{key:"createMultiChart",value:function(t){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,t),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(t),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,i){var r=void 0;i=i||[];for(var o=0,n=t.length;o<n;o++)r=t.splice(o,1),0===t.length&&a.push(i.concat(r).join("|")),e(t.slice(),i.concat(r)),t.splice(o,0,r[0]);return a}var a=[],i=e(t);return i.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var i=a.split("|"),r=this.permuteArr(i).split("*!%^");if(r.indexOf(t)!==-1)return r[0]}else;return!1}},{key:"getChartObj",value:function(t,e){var a=[],i="",r=t.split("|"),o=[],n={},s=[],h=[],l=-(1/0),u=1/0,c={},d={},f={},g=this.globalData[this.dimensions[this.dimensions.length-1]];if(r.push.apply(r),a=r.filter(function(t){return""!==t}),i=a.join("|"),s=this.hash[this.matchHash(i,this.hash)]){for(var m=0,y=s.length;m<y;m++)n=this.mc.createDataProcessor(),n.filter(s[m]),o.push(n);c=this.dataStore.getData(o),c=c[c.length-1],h=c.getJSON();for(var p=0,S=h.length;p<S;p++)h[p][e]>l&&(l=h[p][e]),h[p][e]<u&&(u=h[p][e]);return d={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[e],seriesType:"SS",aggregateMode:this.aggregation,categories:g,config:this.chartConfig},datastore:c},f=this.mc.dataadapter(d),[{max:l,min:u},{type:this.chartType,width:"100%",height:"100%",jsonData:h,configuration:f}]}}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=i},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,