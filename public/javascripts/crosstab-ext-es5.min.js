!function(t){function e(a){if(i[a])return i[a].exports;var r=i[a]={exports:{},id:a,loaded:!1};return t[a].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,exports,e){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=e(1),r=e(2),o={dimensions:["Product","State","Month"],measures:["Profit","Visitors","Sale"],chartType:"column2d",noDataMessage:"No data to display.",measureOnRow:!1,cellWidth:210,cellHeight:113,showFilter:!0,crosstabContainer:"crosstab-div",aggregation:"sum",chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#B2B6DD",columnHoverColor:"#616FF9",chartBottomMargin:"10",chartTopMargin:"10",chartLeftMargin:"5",chartRightMargin:"5",zeroPlaneThickness:"1",showZeroPlaneValue:"1",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"100",alternateVGridAlpha:"0",paletteColors:"#B5B9BA",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":i(window))?(window.crosstab=new a(r,o),window.crosstab.renderCrosstab()):t.exports=a},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var i=0;i<e.length;i++){var a=e[i];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(t,a.key,a)}}return function(e,i,a){return i&&t(e.prototype,i),a&&t(e,a),e}}(),a=function(){function t(i,a){var r=this;if(e(this,t),this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.data=i,"function"!=typeof MultiCharting)return{test:function(t){return t}};if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now(),this.storeParams={data:i,config:a},this.chartType=a.chartType,this.showFilter=a.showFilter,this.chartConfig=a.chartConfig,this.dimensions=a.dimensions,this.measures=a.measures,this.measureOnRow=a.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=a.cellWidth,this.cellHeight=a.cellHeight,this.crosstabContainer=a.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=a.aggregation,this.axes=[],this.noDataMessage=a.noDataMessage,"function"==typeof FCDataFilterExt&&this.showFilter){var o={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,o,"control-box")}this.dataStore.addEventListener(this.eventList.modelUpdated,function(t,e){r.globalData=r.buildGlobalData(),r.renderCrosstab()})}return i(t,[{key:"buildGlobalData",value:function(){if(this.dataStore.getKeys()){for(var t=this.dataStore.getKeys(),e={},i=0,a=t.length;i<a;i++)e[t[i]]=this.dataStore.getUniqueValues(t[i]);return e}return!1}},{key:"createRow",value:function(t,e,i,a,r){var o,n,s,l,h=0,u=i[a],c=e[u],d=c.length,f=a<i.length-1,g=this.columnKeyArr.length,m=1/0,p=-(1/0),y={};for(o=0;o<d;o+=1){var S="";if(l=document.createElement("p"),l.innerHTML=c[o],l.style.textAlign="center",l.style.marginTop=(this.cellHeight-10)/2+"px",S+="row-dimensions "+this.dimensions[a].toLowerCase()+" "+c[o].toLowerCase()+" no-select",l.style.visibility="hidden",document.body.appendChild(l),this.cornerWidth=10*c[o].length,document.body.removeChild(l),l.style.visibility="visible",n={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:l.outerHTML,className:S},s=r+c[o]+"|",o?t.push([n]):t[t.length-1].push(n),f)n.rowspan=this.createRow(t,e,i,a+1,s);else{var P={config:{config:{chart:{axisType:"y"}}}},M=this.mc.dataAdapter(P);t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"y-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",configuration:M}});for(var v=0;v<g;v+=1){var w={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:s,colHash:this.columnKeyArr[v]};t[t.length-1].push(w),y=this.getChartObj(s,this.columnKeyArr[v])[0],p=parseInt(y.max)>p?y.max:p,m=parseInt(y.min)<m?y.min:m,w.max=p,w.min=m}}h+=n.rowspan}return h}},{key:"createCol",value:function(t,e,i){var a,r,o,n=0,s=this.measures.length;for(a=0;a<s;a+=1){var l="",h=i[a];o=document.createElement("p"),o.innerHTML=h,o.style.textAlign="center",o.style.marginTop=(30*this.measures.length-15)/2+"px",document.body.appendChild(o),l+="column-dimensions "+this.measures[a].toLowerCase()+" no-select",this.cornerHeight=o.offsetHeight,document.body.removeChild(o),r={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:o.outerHTML,className:l},this.columnKeyArr.push(this.measures[a]),t[0].push(r)}return n}},{key:"createRowDimHeading",value:function(t,e){var i,a=[],r=0;for(r=0;r<this.dimensions.length-1;r++)i=document.createElement("p"),i.innerHTML=this.dimensions[r][0].toUpperCase()+this.dimensions[r].substr(1),i.style.textAlign="center",i.style.marginTop=(30*this.measures.length-15)/2+"px",a.push({width:10*this.dimensions[r],height:30*this.measures.length,rowspan:1,colspan:1,html:i.outerHTML,className:"corner-cell no-select"});return a}},{key:"createColDimHeading",value:function(t,e){for(var i,a=e;a<t.length;a++)i=document.createElement("p"),i.innerHTML="",i.style.textAlign="center",t[a].push({width:40,height:30,rowspan:1,colspan:1,html:i.outerHTML,className:"axis-header-cell"});return t}},{key:"createCaption",value:function(t,e){var i={config:{config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}}},a=this.mc.dataAdapter(i);return t.unshift([{height:50,rowspan:1,colspan:e,className:"caption-chart",chart:{type:"caption",width:"100%",height:"100%",dataFormat:"json",configuration:a}}]),t}},{key:"createCrosstab",value:function(){var t=this,e=this.globalData,i=this.dimensions.filter(function(t,e,i){if(t!==i[i.length-1])return!0}),a=this.measures.filter(function(e,i,a){return!!t.measureOnRow||(e!==a[a.length-1]||void 0)}),r=[],o=[],n=0,s=0;if(e){for(r.push(this.createRowDimHeading(r,a.length)),r=this.createColDimHeading(r,0),this.createCol(r,e,this.measures),r.push([]),this.createRow(r,e,i,0,""),n=0;n<r.length;n++)s=s<r[n].length?r[n].length:s;for(n=0;n<this.dimensions.length-1;n++)o.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(o.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),n=0;n<s-this.dimensions.length;n++){var l=this.globalData[this.dimensions[this.dimensions.length-1]],h={config:{config:{chart:{axisType:"x",borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:l}}},u=this.mc.dataAdapter(h);o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",configuration:u}})}r.push(o),r=this.createCaption(r,s),this.columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"rowDimReorder",value:function(t,e){var i,a="",r=this.dimensions;if(this.measureOnRow===!0&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(a=r[t],i=t-1;i>=e;i--)r[i+1]=r[i];r[e]=a}else if(t<e){for(a=r[t],i=t+1;i<=e;i++)r[i-1]=r[i];r[e]=a}this.createCrosstab()}},{key:"colDimReorder",value:function(t,e){var i,a="",r=this.measures;if(this.measureOnRow===!1&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(a=r[t],i=t-1;i>=e;i--)r[i+1]=r[i];r[e]=a}else if(t<e){for(a=r[t],i=t+1;i<=e;i++)r[i-1]=r[i];r[e]=a}this.createCrosstab()}},{key:"mergeDimensions",value:function(){for(var t=[],e=0,i=this.dimensions.length;e<i;e++)t.push(this.dimensions[e]);for(var a=0,r=this.measures.length;a<r;a++)t.push(this.measures[a]);return t}},{key:"createFilters",value:function(){var t=[],e=0,i=this.dimensions.length-1,a=0,r=0,o=void 0;for(e=0;e<i;e++)for(o=this.globalData[this.dimensions[e]],a=0,r=o.length;a<r;a++)t.push({filter:this.filterGen(this.dimensions[e],o[a].toString()),filterVal:o[a]});return t}},{key:"createDataCombos",value:function(){function t(r,o){for(var n=0,s=i[o].length;n<s;n++){var l=r.slice(0);l.push(i[o][n]),o===a?e.push(l):t(l,o+1)}}var e=[],i=this.makeGlobalArray(),a=i.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var i in this.globalData)this.globalData.hasOwnProperty(i)&&i!==this.measure&&(t[i]=this.globalData[i]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),i={},a=0,r=e.length;a<r;a++){for(var o=e[a],n="",s=[],l=0,h=o.length;l<h;l++)for(var u=0,c=t.length;u<c;u++){var d=t[u].filterVal;o[l]===d&&(n+=0===l?o[l]:"|"+o[l],s.push(t[u].filter))}i[n]=s}return i}},{key:"renderCrosstab",value:function(){for(var t=this,e=this.createCrosstab(),i=this.createMultiChart(e),a=performance.now(),r=-(1/0),o=1/0,n=0,s=e.length;n<s;n++){var l=e[n][e[n].length-1];(l.max||l.min)&&(r<l.max&&(r=l.max),o>l.min&&(o=l.min))}for(var h=0,u=i.length;h<u;h++)for(var c=i[h],d=void 0,f=0,g=c.length;f<g;f++){var m=c[f],p=e[h][f];if(p.chart&&"axis"===p.chart.type&&(d=m,"y"===d.chart.chartConfig.dataSource.chart.axisType)){var y={config:{config:{chart:{dataMin:o,axisType:"y",dataMax:r,borderthickness:0,chartBottomMargin:10,chartTopMargin:10}}}},S=this.mc.dataAdapter(y);d.config.chart.configuration=S,d.update(d.config)}if(d){if(!p.hasOwnProperty("chart")&&!p.hasOwnProperty("html")&&"blank-cell"!==p.className){var P=d.chart.chartObj.getLimits(),M=P[0],v=P[1],w=this.getChartObj(p.rowHash,p.colHash)[1];w.configuration.FCjson.chart.yAxisMinValue=M,w.configuration.FCjson.chart.yAxisMaxValue=v,m.config.chart=w,p.chart=w,window.ctPerf+=performance.now()-a,m.update(m.config)}a=performance.now()}}this.mc.addEventListener("hoverin",function(a,r){if(r.data)for(var o=0,n=i.length;o<n;o++)for(var s=e[o],l=0;l<s.length;l++)if(s[l].chart&&"caption"!==s[l].chart.type&&"axis"!==s[l].chart.type){var h=s[l].chart.configuration,u=t.dimensions[t.dimensions.length-1],c=r.data[u];h.highlight(c)}}),this.mc.addEventListener("hoverout",function(t,a){for(var r=0,o=i.length;r<o;r++)for(var n=e[r],s=0;s<n.length;s++)if(n[s].chart&&"caption"!==n[s].chart.type&&"axis"!==n[s].chart.type){var l=n[s].chart.configuration;l.highlight()}})}},{key:"createMultiChart",value:function(t){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,t),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(t),this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,a){var r=void 0;a=a||[];for(var o=0,n=t.length;o<n;o++)r=t.splice(o,1),0===t.length&&i.push(a.concat(r).join("|")),e(t.slice(),a.concat(r)),t.splice(o,0,r[0]);return i}var i=[],a=e(t);return a.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var i in e)if(e.hasOwnProperty(i)){var a=i.split("|"),r=this.permuteArr(a).split("*!%^");if(r.indexOf(t)!==-1)return r[0]}else;return!1}},{key:"getChartObj",value:function(t,e){var i=[],a="",r=t.split("|"),o=[],n={},s=[],l={},h={},u={},c={},d=this.globalData[this.dimensions[this.dimensions.length-1]];if(r.push.apply(r),i=r.filter(function(t){return""!==t}),a=i.join("|"),s=this.hash[this.matchHash(a,this.hash)]){for(var f=0,g=s.length;f<g;f++)n=this.mc.createDataProcessor(),n.filter(s[f]),o.push(n);return l=this.dataStore.getChildModel(o),h={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[e],seriesType:"SS",aggregateMode:this.aggregation,categories:d,config:this.chartConfig},datastore:l},u=this.mc.dataAdapter(h),c=u.getLimit(),[{max:c.max,min:c.min},{type:this.chartType,width:"100%",height:"100%",configuration:u}]}}},{key:"dragListener",value:function(t){function e(t,e,a,r){for(var o=function(o){var n=t[o].graphics,s=t[o];s.cellValue=e[o],s.origLeft=parseInt(n.style.left),s.redZone=s.origLeft+parseInt(n.style.width)/2,s.index=o,s.adjust=0,s.origZ=n.style.zIndex,u._setupDrag(s.graphics,function(e,a){n.style.left=s.origLeft+e+s.adjust+"px",n.style.zIndex=1e3,i(s.index,!1,t),i(s.index,!0,t)},function(){var e=!1,i=0;for(s.adjust=0,n.style.zIndex=s.origZ,n.style.left=s.origLeft+"px";i<a;++i)r[i]!==t[i].cellValue&&(r[i]=t[i].cellValue,e=!0);e&&window.setTimeout(function(){u.globalData=u.buildGlobalData(),u.renderCrosstab()},10)})},n=0;n<a;++n)o(n)}function i(t,e,i){var a=[],r=i[t],o=e?t+1:t-1,n=i[o];n&&(a.push(!e&&parseInt(r.graphics.style.left)<n.redZone),a.push(a.pop()||e&&parseInt(r.graphics.style.left)>n.origLeft),a.pop()&&(a.push(n.redZone),a.push(n.origLeft),a.push(n.index),e?r.adjust-=parseInt(n.graphics.style.width):r.adjust+=parseInt(n.graphics.style.width),n.origLeft=r.origLeft,n.redZone=r.redZone,n.index=r.index,n.graphics.style.left=n.origLeft+"px",a.push(i[o]),i[o]=i[t],i[t]=a.pop())),3===a.length&&(r.index=a.pop(),r.origLeft=a.pop(),r.redZone=a.pop())}var a=this.storeParams.config,r=a.dimensions||[],o=a.measures||[],n=o.length,s=0,l=void 0,h=void 0,u=this;t=t[1],r=r.slice(0,r.length-1),s=r.length,l=t.slice(0,s),h=t.slice(s+1,s+n+1),e(l,r,s,this.dimensions),e(h,o,n,this.measures)}},{key:"_setupDrag",value:function(t,e,i){function a(t){e(t.clientX-o,t.clientY-n)}function r(e){t.style.opacity=1,window.document.removeEventListener("mousemove",a),window.document.removeEventListener("mouseup",r),window.setTimeout(i,10)}var o=0,n=0;t.addEventListener("mousedown",function(e){o=e.clientX,n=e.clientY,t.style.opacity=.8,window.document.addEventListener("mousemove",a),window.document.addEventListener("mouseup",r)})}},{key:"filterGen",value:function(t,e){return function(i){return i[t]===e}}}]),t}();t.exports=a},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,