/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={dimensions:['Product','State','Month'],measures:['Sale','Profit','Visitors'],chartType:'bar2d',noDataMessage:'No data to display.',crosstabContainer:'crosstab-div',cellWidth:150,cellHeight:80,// showFilter: true,
	draggableHeaders:!0,// aggregation: 'sum',
	chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',rollOverBandColor:'#badaf0',columnHoverColor:'#1b83cc',chartBottomMargin:'2',chartTopMargin:'2',chartLeftMargin:'5',chartRightMargin:'7',zeroPlaneThickness:'0',zeroPlaneAlpha:'100',bgColor:'#FFFFFF',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'1',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'0',alternateVGridAlpha:'0',paletteColors:'#5B5B5B',usePlotGradientColor:'0',valueFontColor:'#FFFFFF',canvasBorderThickness:'0',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.data=b,this.eventList={modelUpdated:'modelupdated',modelDeleted:'modeldeleted',metaInfoUpdate:'metainfoupdated',processorUpdated:'processorupdated',processorDeleted:'processordeleted'},this.storeParams={data:b,config:c},this._columnKeyArr=[],this.measures=c.measures,this.chartType=c.chartType,this.dimensions=c.dimensions,this.chartConfig=c.chartConfig,this.crosstabContainer=c.crosstabContainer,this.cellWidth=c.cellWidth||210,this.cellHeight=c.cellHeight||113,this.showFilter=c.showFilter||!1,this.aggregation=c.aggregation||'sum',this.draggableHeaders=c.draggableHeaders||!1,this.noDataMessage=c.noDataMessage||'No data to display.','function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data});else throw new Error('MultiChartng module not found.');if(this.showFilter)if('function'==typeof FCDataFilterExt)this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box');else throw new Error('DataFilter module not found.');// Building a data structure for internal use.
	this.globalData=this.buildGlobalData(),this.hash=this.getFilterHashMap()}/**
	     * Build an array of arrays data structure from the data store for internal use.
	     * @return {Array} An array of arrays generated from the dataStore's array of objects
	     */buildGlobalData(){let b=this.dataStore,c=b.getKeys();if(c){let f={};for(let g=0,h=c.length;g<h;g++)f[c[g]]=b.getUniqueValues(c[g]);return f}throw new Error('Could not generate keys from data store')}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this._columnKeyArr.length,z=1/0,A=-(1/0),B={};for(0===g&&b.push([]),p=0;p<q;p+=1){let C='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',C+='row-dimensions '+this.dimensions[g].toLowerCase()+' '+o[p].toLowerCase()+' no-select',w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:C},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{if('bar2d'===this.chartType){let D=this.globalData[this.dimensions[this.dimensions.length-1]];b[b.length-1].push({rowspan:1,colspan:1,width:40,className:'vertical-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'x',borderthickness:0,isHorizontal:0,chartTopMargin:this.chartConfig.chart.chartTopMargin,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,valuePadding:0.5},categories:D}})})}else b[b.length-1].push({rowspan:1,colspan:1,width:40,className:'vertical-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'y'}}})});for(let D=0;D<v;D+=1){let E={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this._columnKeyArr[D],// chart: this.getChartObj(filteredDataHashKey, this._columnKeyArr[j])[1],
	className:'chart-cell '+(D+1)};D==v-1&&(E.className='chart-cell last-col'),b[b.length-1].push(E),B=this.getChartObj(u,this._columnKeyArr[D])[0],A=parseInt(B.max)>A?B.max:A,z=parseInt(B.min)<z?B.min:z,E.max=A,E.min=z}}m+=s.rowspan}return m}createMeasureHeadings(b,c,f){var g,m,n,o,p,h=this.measures.length;for(g=0;g<h;g+=1){let q='',s=f[g];// fieldValues = data[fieldComponent];
	o=document.createElement('div'),o.style.textAlign='center',p=document.createElement('div'),p.setAttribute('class','measure-drag-handle'),p.style.height='5px',p.style.paddingTop='3px',p.style.paddingBottom='1px',this.appendDragHandle(p,25),n=document.createElement('p'),n.innerHTML=s,n.style.textAlign='center',n.style.marginTop='5px',document.body.appendChild(n),q+='column-measures '+this.measures[g].toLowerCase()+' no-select',this.draggableHeaders&&(q+=' draggable'),this.cornerHeight=n.offsetHeight,document.body.removeChild(n),o.appendChild(p),o.appendChild(n),m={width:this.cellWidth,height:35,rowspan:1,colspan:1,html:o.outerHTML,className:q},this._columnKeyArr.push(this.measures[g]),b[0].push(m)}return 0}createDimensionHeadings(){var f,h,m,b=[],c=0,g='';for(c=0;c<this.dimensions.length-1;c++)h=document.createElement('div'),h.style.textAlign='center',m=document.createElement('div'),m.setAttribute('class','dimension-drag-handle'),m.style.height='5px',m.style.paddingTop='3px',m.style.paddingBottom='1px',this.appendDragHandle(m,25),f=document.createElement('p'),f.innerHTML=this.dimensions[c][0].toUpperCase()+this.dimensions[c].substr(1),f.style.textAlign='center',f.style.marginTop='5px',g='dimension-header '+this.dimensions[c].toLowerCase()+' no-select',this.draggableHeaders&&(g+=' draggable'),h.appendChild(m),h.appendChild(f),b.push({width:10*this.dimensions[c].length,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:g});return b}createVerticalAxisHeader(){let b=document.createElement('p');return b.innerHTML='',b.style.textAlign='center',{width:40,height:35,rowspan:1,colspan:1,html:b.outerHTML,className:'axis-header-cell'}}createCaption(b){return[{height:50,rowspan:1,colspan:b,className:'caption-chart',chart:this.mc.chart({type:'caption',width:'100%',height:'100%',dataFormat:'json',config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}})}]}createCrosstab(){var b=this.globalData,c=this.dimensions.filter(function(o,p,q){if(o!==q[q.length-1])return!0}),f=this.measures.filter(function(o,p,q){if(o!==q[q.length])return!0}),g=[],h=[],m=0,n=0;if(b){// Find row with max length in the table
	for(g.push(this.createDimensionHeadings(g,f.length)),g[0].push(this.createVerticalAxisHeader()),this.createMeasureHeadings(g,b,this.measures),this.createRow(g,b,c,0,''),m=0;m<g.length;m++)n=n<g[m].length?g[m].length:n;// Push blank padding cells under the dimensions in the same row as the horizontal axis
	for(m=0;m<this.dimensions.length-1;m++)h.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});// Extra cell for y axis. Essentially Y axis footer.
	// Push horizontal axes into the last row of the table
	for(h.push({rowspan:1,colspan:1,height:30,width:40,className:'axis-footer-cell'}),m=0;m<n-this.dimensions.length;m++){let o=this.globalData[this.dimensions[this.dimensions.length-1]];'bar2d'===this.chartType?h.push({width:'100%',height:20,rowspan:1,colspan:1,className:'horizontal-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'y',isHorizontal:1}}})}):h.push({width:'100%',height:20,rowspan:1,colspan:1,className:'horizontal-axis',chart:this.mc.chart({type:'axis',width:'100%',height:'100%',dataFormat:'json',config:{chart:{axisType:'x',borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,valuePadding:0.5},categories:o}})})}g.push(h),g.unshift(this.createCaption(n)),this._columnKeyArr=[]}else g.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return g}createFilters(){let f,b=[],c=this.dimensions.slice(0,this.dimensions.length-1);return c.forEach(g=>{f=this.globalData[g],f.forEach(h=>{b.push({filter:this.filterGen(g,h.toString()),filterVal:h})})}),b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&-1!==this.dimensions.indexOf(f)&&f!==this.dimensions[this.dimensions.length-1]&&(b[f]=this.globalData[f]);return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}appendDragHandle(b,c){let f,g;for(f=0;f<c;f++)g=document.createElement('span'),g.style.marginLeft='1px',g.style.fontSize='3px',g.style.lineHeight='1',g.style.verticalAlign='top',b.appendChild(g)}renderCrosstab(){let f,b=-(1/0),c=1/0;// Generate the crosstab array
	this.crosstab=this.createCrosstab();// Find the global maximum and minimum for the axes
	for(let g=0,h=this.crosstab.length;g<h;g++){let m=this.crosstab[g][this.crosstab[g].length-1];(m.max||m.min)&&(b<m.max&&(b=m.max),c>m.min&&(c=m.min))}// Update the Y axis charts in the crosstab array with the global maximum and minimum
	for(let g=0,h=this.crosstab.length;g<h;g++){let n,m=this.crosstab[g];for(let o=0,p=m.length;o<p;o++){let q=m[o];if(q.chart&&'axis'===q.chart.conf.type&&(n=q,'y'===n.chart.conf.config.chart.axisType)){let s=n.chart,t=s.conf;t.config.chart={dataMin:c,axisType:'y',dataMax:b,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},'bar2d'===this.chartType&&(t.config.chart={dataMin:c,axisType:'y',dataMax:b,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),s=this.mc.chart(t),n.chart=s}}}// Draw the crosstab with only the axes, caption and html text.
	// Required since axes cannot return limits unless they are drawn
	this.createMultiChart(this.crosstab),f=f||this.findYAxisChart();// Place a chart object with limits from the Y Axis in the correct cell
	for(let g=0,h=this.crosstab.length;g<h;g++){let m=this.crosstab[g];for(let n=0,o=m.length;n<o;n++){let p=m[n];if(f&&!p.hasOwnProperty('html')&&!p.hasOwnProperty('chart')&&'blank-cell'!==p.className&&'axis-footer-cell'!==p.className){let q=f.chart,s=q.getChartInstance(),t=s.getLimits(),u=t[0],v=t[1],w=this.getChartObj(p.rowHash,p.colHash,u,v)[1];p.chart=w}}}// Update the crosstab
	this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,()=>{this.globalData=this.buildGlobalData(),this.updateCrosstab()}),this.mc.addEventListener('hoverin',(g,h)=>{if(h.data)for(let n=0,o=this.crosstab.length;n<o;n++){let p=this.crosstab[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.conf.type&&'axis'!==p[m].chart.conf.type){let q=p[m].chart,s=this.dimensions[this.dimensions.length-1],t=h.data[s];q.highlight(t)}}}),this.mc.addEventListener('hoverout',()=>{for(let h=0,m=this.crosstab.length;h<m;h++){let n=this.crosstab[h];for(var g=0;g<n.length;g++)if(n[g].chart&&'caption'!==n[g].chart.conf.type&&'axis'!==n[g].chart.conf.type){let o=n[g].chart;o.highlight()}}})}updateCrosstab(){let c,f,g,h,b=this.createCrosstab(),m=[],n=-(1/0),o=1/0,p=[];for(c=0,f=this.crosstab.length;c<f;c++){let q=this.crosstab[c];for(g=0,h=q.length;g<h;g++){let s=q[g];if(s.chart){let t=s.chart.getConf();'caption'!==t.type&&'axis'!==t.type&&m.push(s)}}}for(c=0,f=b.length;c<f;c++){let q=b[c];for(g=0,h=q.length;g<h;g++){let s=q[g];if(s.rowHash&&s.colHash){let t=this.getOldChart(m,s.rowHash,s.colHash),u={};if(!t){let v=this.getChartObj(s.rowHash,s.colHash);t=v[1],u=v[0]}s.chart=t,0!==Object.keys(u).length&&(s.max=u.max,s.min=u.min)}}}for(c=0,f=b.length;c<f;c++){let q=b[c];for(g=0,h=q.length;g<h;g++){let s=q[g];(s.max||s.min)&&(n<s.max&&(n=s.max),o>s.min&&(o=s.min))}}for(c=0,f=b.length;c<f;c++){let q=b[c];for(g=0,h=q.length;g<h;g++){let s=q[g];if(s.chart&&'axis'===s.chart.conf.type){let t=s;if('y'===t.chart.conf.config.chart.axisType){let u=t.chart,v=u.conf;v.config.chart={dataMin:o,axisType:'y',dataMax:n,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},'bar2d'===this.chartType&&(v.config.chart={dataMin:o,axisType:'y',dataMax:n,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),u=this.mc.chart(v),t.chart=u}}}}this.crosstab=b,this.createMultiChart(),p=this.getYAxisLimits();for(let q=0,s=this.crosstab.length;q<s;q++){let t=this.crosstab[q];for(let u=0,v=t.length;u<v;u++){let w=t[u];if(!w.hasOwnProperty('html')&&'blank-cell'!==w.className&&'axis-footer-cell'!==w.className&&'caption'!==w.chart.getConf().type&&'axis'!==w.chart.getConf().type){let z=this.getChartObj(w.rowHash,w.colHash,p[0],p[1])[1];w.chart.update(z.getConf())}}}}findYAxisChart(){for(let b=0,c=this.crosstab.length;b<c;b++){let f=this.crosstab[b];for(let g=0,h=f.length;g<h;g++){let m=f[g];if(m.chart&&'y'===m.chart.conf.config.chart.axisType)return m}}}getYAxisLimits(){let b,c,f,g;for(b=0,c=this.crosstab.length;b<c;b++){let h=this.crosstab[b];for(f=0,g=h.length;f<g;f++){let m=h[f];if(m.chart){let n=m.chart.getConf();if('axis'===n.type&&'y'===n.config.chart.axisType)return m.chart.getChartInstance().getLimits()}}}}getOldChart(b,c,f){for(var g=b.length-1;0<=g;g--)if(b[g].rowHash===c&&b[g].colHash===f)return b[g].chart}createMultiChart(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c,f,g){let h=[],m='',n=b.split('|'),o=[],p={},q=[],// filteredJSON = [],
	// max = -Infinity,
	// min = Infinity,
	s={},// adapter = {},
	t={},u={},v=this.globalData[this.dimensions[this.dimensions.length-1]];if(n.push.apply(n),h=n.filter(w=>{return''!==w}),m=h.join('|'),q=this.hash[this.matchHash(m,this.hash)],q){for(let w=0,z=q.length;w<z;w++)p=this.mc.createDataProcessor(),p.filter(q[w]),o.push(p);return s=this.dataStore.getChildModel(o),void 0!==f&&void 0!==g&&(this.chartConfig.chart.yAxisMinValue=f,this.chartConfig.chart.yAxisMaxValue=g),u=this.mc.chart({dataSource:s,type:this.chartType,width:'100%',height:'100%',dimension:[this.dimensions[this.dimensions.length-1]],measure:[c],seriesType:'SS',aggregateMode:this.aggregation,categories:v,config:this.chartConfig}),t=u.getLimit(),[{max:t.max,min:t.min},u]}}dragListener(b){function c(t,u,v,w){let z=0,A=0,B=Math.log2;t[0]&&(z=parseInt(t[0].graphics.style.left),A=parseInt(t[v-1].graphics.style.left));for(let C=0;C<v;++C){let D=t[C].graphics,E=t[C],F=0,G=0;E.cellValue=u[C],E.origLeft=parseInt(D.style.left),E.redZone=E.origLeft+parseInt(D.style.width)/2,E.index=C,E.adjust=0,E.origZ=D.style.zIndex,s._setupDrag(E.graphics,function(I){F=E.origLeft+I+E.adjust,F<z&&(G=z-F,F=z-B(G)),F>A&&(G=F-A,F=A+B(G)),D.style.left=F+'px',D.style.zIndex=1e3,f(E.index,!1,t),f(E.index,!0,t)},function(){let I=!1,J=0;for(E.adjust=0,D.style.zIndex=E.origZ,D.style.left=E.origLeft+'px';J<v;++J)w[J]!==t[J].cellValue&&(w[J]=t[J].cellValue,I=!0);I&&window.setTimeout(function(){s.globalData=s.buildGlobalData(),s.updateCrosstab()},10)})}}function f(t,u,v){let w=[],z=v[t],A=u?t+1:t-1,B=v[A];// Saving data for later use
	B&&(w.push(!u&&parseInt(z.graphics.style.left)<B.redZone),w.push(w.pop()||u&&parseInt(z.graphics.style.left)>B.origLeft),w.pop()&&(w.push(B.redZone),w.push(B.origLeft),w.push(B.index),u?z.adjust-=parseInt(B.graphics.style.width):z.adjust+=parseInt(B.graphics.style.width),B.origLeft=z.origLeft,B.redZone=z.redZone,B.index=z.index,B.graphics.style.left=B.origLeft+'px',w.push(v[A]),v[A]=v[t],v[t]=w.pop())),3===w.length&&(z.index=w.pop(),z.origLeft=w.pop(),z.redZone=w.pop())}// Getting only labels
	let p,q,g=this.storeParams.config,h=g.dimensions||[],m=g.measures||[],n=m.length,o=0,s=this;// let end
	b=b[1],h=h.slice(0,h.length-1),o=h.length,p=b.slice(0,o),q=b.slice(o+1,o+n+1),c(p,h,o,this.dimensions),c(q,m,n,this.measures)}_setupDrag(b,c,f){function g(o){c(o.clientX-m,o.clientY-n)}function h(){b.style.opacity=1,b.classList.remove('dragging'),window.document.removeEventListener('mousemove',g),window.document.removeEventListener('mouseup',h),window.setTimeout(f,10)}let m=0,n=0;b.addEventListener('mousedown',function(o){m=o.clientX,n=o.clientY,b.style.opacity=0.8,b.classList.add('dragging'),window.document.addEventListener('mousemove',g),window.document.addEventListener('mouseup',h)})}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,