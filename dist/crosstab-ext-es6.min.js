/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={dimensions:['Product','Month','Year','State'],measures:['Sale','Visitors','Profit'],chartType:'column2d',noDataMessage:'No data to display.',measureOnRow:!1,cellWidth:120,cellHeight:100,crosstabContainer:'crosstab-div',aggregation:'sum',chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',chartBottomMargin:'5',chartTopMargin:'5',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#ffffff',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'1',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#ffffff',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.data=b,'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now();else return{test:function(f){return f}};this.storeParams={data:b,config:c},this.chartType=c.chartType,this.chartConfig=c.chartConfig,this.dimensions=c.dimensions,this.measures=c.measures,this.measureOnRow=c.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=c.cellWidth,this.cellHeight=c.cellHeight,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation,this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.dataStore.addEventListener('tempEvent',()=>{this.globalData=this.buildGlobalData(),this.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let f=0,g=b.length;f<g;f++)c[b[f]]=this.dataStore.getUniqueValues(b[f]);return c}return!1}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this.columnKeyArr.length,z=1/0,A=-(1/0),B={};for(p=0;p<q;p+=1){let C='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',C+='row-dimensions '+this.dimensions[g].toLowerCase()+' '+o[p].toLowerCase(),w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:C},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{let D=this.mc.dataAdapter({config:{config:{chart:{axisType:'y'}}}});b[b.length-1].push({rowspan:1,colspan:1,width:40,className:'y-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:D}});for(let E=0;E<v;E+=1){let F={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this.columnKeyArr[E]};b[b.length-1].push(F),B=this.getChartObj(u,this.columnKeyArr[E])[0],A=parseInt(B.max)>A?B.max:A,z=parseInt(B.min)<z?B.min:z,F.max=A,F.min=z}}m+=s.rowspan}return m}// createCol (table, data, colOrder, currentIndex, filteredDataStore) {
	//     var colspan = 0,
	//         fieldComponent = colOrder[currentIndex],
	//         fieldValues = data[fieldComponent],
	//         i, l = fieldValues.length,
	//         colElement,
	//         hasFurtherDepth = currentIndex < (colOrder.length - 1),
	//         filteredDataHashKey,
	//         htmlRef;
	//     if (table.length <= currentIndex) {
	//         table.push([]);
	//     }
	//     for (i = 0; i < l; i += 1) {
	//         let classStr = '';
	//         htmlRef = document.createElement('p');
	//         htmlRef.innerHTML = fieldValues[i];
	//         htmlRef.style.textAlign = 'center';
	//         document.body.appendChild(htmlRef);
	//         classStr += 'column-dimensions' +
	//             ' ' + this.measures[currentIndex] +
	//             ' ' + fieldValues[i].toLowerCase();
	//         this.cornerHeight = htmlRef.offsetHeight;
	//         document.body.removeChild(htmlRef);
	//         colElement = {
	//             width: this.cellWidth,
	//             height: this.cornerHeight,
	//             rowspan: 1,
	//             colspan: 1,
	//             html: htmlRef.outerHTML,
	//             className: classStr
	//         };
	//         filteredDataHashKey = filteredDataStore + fieldValues[i] + '|';
	//         table[currentIndex].push(colElement);
	//         if (hasFurtherDepth) {
	//             colElement.colspan = this.createCol(table, data, colOrder, currentIndex + 1, filteredDataHashKey);
	//         } else {
	//             this.columnKeyArr.push(filteredDataHashKey);
	//         }
	//         colspan += colElement.colspan;
	//     }
	//     return colspan;
	// }
	createCol(b,c,f){var g,m,n,h=this.measures.length;for(g=0;g<h;g+=1){let o='',p=f[g];// fieldValues = data[fieldComponent];
	n=document.createElement('p'),n.innerHTML=p,n.style.textAlign='center',n.style.marginTop=(30*this.measures.length-15)/2+'px',document.body.appendChild(n),o+='column-dimensions '+this.measures[g].toLowerCase(),this.cornerHeight=n.offsetHeight,document.body.removeChild(n),m={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:n.outerHTML,className:o},this.columnKeyArr.push(this.measures[g]),b[0].push(m)}return 0}createRowDimHeading(){var f,b=[],c=0;for(c=0;c<this.dimensions.length-1;c++)f=document.createElement('p'),f.innerHTML=this.dimensions[c][0].toUpperCase()+this.dimensions[c].substr(1),f.style.textAlign='center',f.style.marginTop=(30*this.measures.length-15)/2+'px',b.push({width:10*this.dimensions[c],height:30*this.measures.length,rowspan:1,colspan:1,html:f.outerHTML,className:'corner-cell'});return b}createColDimHeading(b,c){for(var g,f=c;f<b.length;f++)g=document.createElement('p'),g.innerHTML='',g.style.textAlign='center',b[f].push({width:40,height:30,rowspan:1,colspan:1,html:g.outerHTML,className:'axis-header-cell'});return b}createCaption(b,c){let f=this.mc.dataAdapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:f}}]),b}createCrosstab(){var b=this,c=this.globalData,f=this.dimensions.filter(function(p,q,s){if(p!==s[s.length-1])return!0}),g=this.measures.filter(function(p,q,s){if(b.measureOnRow)return!0;return p!==s[s.length-1]||void 0}),h=[],m=[],n=0,o=0;if(c){for(h.push(this.createRowDimHeading(h,g.length)),h=this.createColDimHeading(h,0),this.createCol(h,c,this.measures),h.push([]),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;for(n=0;n<this.dimensions.length-1;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});// Extra cell for y axis. Essentially Y axis footer.
	for(m.push({rowspan:1,colspan:1,height:30,width:40,className:'axis-footer-cell'}),n=0;n<o-this.dimensions.length;n++){let p=this.globalData[this.dimensions[this.dimensions.length-1]],q=this.mc.dataAdapter({config:{config:{chart:{axisType:'x',borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:p}}});m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:q}})}h.push(m),h=this.createCaption(h,o),this.columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return h}rowDimReorder(b,c){var g,f='',h=this.dimensions;if(!0===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}colDimReorder(b,c){var g,f='',h=this.measures;if(!1===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,f=this.dimensions.length;c<f;c++)b.push(this.dimensions[c]);for(let c=0,f=this.measures.length;c<f;c++)b.push(this.measures[c]);return b}createFilters(){let m,b=[],c=0,f=this.dimensions.length-1,g=0,h=0;for(c=0;c<f;c++)for(m=this.globalData[this.dimensions[c]],g=0,h=m.length;g<h;g++)b.push({filter:this.filterGen(this.dimensions[c],m[g].toString()),filterVal:m[g]});return b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&f!==this.measure&&(b[f]=this.globalData[f]);return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}renderCrosstab(){let b=this.createCrosstab(),c=this.createMultiChart(b),f=performance.now(),g=-(1/0),h=1/0;for(let m=0,n=b.length;m<n;m++){let o=b[m][b[m].length-1];(o.max||o.min)&&(g<o.max&&(g=o.max),h>o.min&&(h=o.min))}for(let m=0,n=c.length;m<n;m++){let p,o=c[m];for(let q=0,s=o.length;q<s;q++){let t=o[q],u=b[m][q];if(u.chart&&'axis'===u.chart.type&&(p=t,'y'===p.chart.chartConfig.dataSource.chart.axisType)){let v={config:{config:{chart:{dataMin:h,axisType:'y',dataMax:g,borderthickness:0,chartBottomMargin:5,chartTopMargin:5}}}},w=this.mc.dataAdapter(v);p.config.chart.configuration=w,p.update(p.config)}if(p){if(!(u.hasOwnProperty('chart')||u.hasOwnProperty('html'))&&'blank-cell'!==u.className){let v=p.chart.chartObj.getLimits(),w=v[0],z=v[1],A=this.getChartObj(u.rowHash,u.colHash)[1];A.configuration.FCjson.chart.yAxisMinValue=w,A.configuration.FCjson.chart.yAxisMaxValue=z,t.config.chart=A,u.chart=A,window.ctPerf+=performance.now()-f,t.update(t.config)}f=performance.now()}}}this.mc.addEventListener('hoverin',(m,n)=>{if(n.data)for(let p=0,q=c.length;p<q;p++){let s=b[p];for(var o=0;o<s.length;o++)if(s[o].chart&&'caption'!==s[o].chart.type&&'axis'!==s[o].chart.type){let t=s[o].chart.configuration,u=this.dimensions[this.dimensions.length-1],v=n.data[u];t.highlight(v)}}}),this.mc.addEventListener('hoverout',(m,n)=>{if(n.data)for(let p=0,q=c.length;p<q;p++){let s=b[p];for(var o=0;o<s.length;o++)if(s[o].chart&&'caption'!==s[o].chart.type&&'axis'!==s[o].chart.type){let t=s[o].chart.configuration;t.highlight()}}})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(b),this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c){let f=[],g='',h=b.split('|'),m=[],n={},o=[],// filteredJSON = [],
	// max = -Infinity,
	// min = Infinity,
	p={},q={},s={},t={},u=this.globalData[this.dimensions[this.dimensions.length-1]];if(h.push.apply(h),f=h.filter(v=>{return''!==v}),g=f.join('|'),o=this.hash[this.matchHash(g,this.hash)],o){for(let v=0,w=o.length;v<w;v++)n=this.mc.createDataProcessor(),n.filter(o[v]),m.push(n);return p=this.dataStore.getData(m),p=p[p.length-1],q={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[c],seriesType:'SS',aggregateMode:this.aggregation,categories:u,config:this.chartConfig},datastore:p},s=this.mc.dataAdapter(q),t=s.getLimit(),[{max:t.max,min:t.min},{type:this.chartType,width:'100%',height:'100%',configuration:s}]}}dragListener(b){function c(t,u,v,w){for(let z=0;z<v;++z){let A=t[z].graphics,B=t[z];B.cellValue=u[z],B.origLeft=parseInt(A.style.left),B.redZone=B.origLeft+parseInt(A.style.width)/2,B.index=z,B.adjust=0,B.origZ=A.style.zIndex,s._setupDrag(B.graphics,function(D){A.style.left=B.origLeft+D+B.adjust+'px',A.style.zIndex=1e3,f(B.index,!1,t),f(B.index,!0,t)},function(){let D=!1,E=0;for(B.adjust=0,A.style.zIndex=B.origZ,A.style.left=B.origLeft+'px';E<v;++E)w[E]!==t[E].cellValue&&(w[E]=t[E].cellValue,D=!0);D&&window.setTimeout(function(){s.globalData=s.buildGlobalData(),s.renderCrosstab()},10)})}}function f(t,u,v){let w=[],z=v[t],A=u?t+1:t-1,B=v[A];// Saving data for later use
	B&&(w.push(!u&&parseInt(z.graphics.style.left)<B.redZone),w.push(w.pop()||u&&parseInt(z.graphics.style.left)>B.origLeft),w.pop()&&(w.push(B.redZone),w.push(B.origLeft),w.push(B.index),u?z.adjust-=parseInt(B.graphics.style.width):z.adjust+=parseInt(B.graphics.style.width),B.origLeft=z.origLeft,B.redZone=z.redZone,B.index=z.index,B.graphics.style.left=B.origLeft+'px',w.push(v[A]),v[A]=v[t],v[t]=w.pop())),3===w.length&&(z.index=w.pop(),z.origLeft=w.pop(),z.redZone=w.pop())}// Getting only labels
	let p,q,g=this.storeParams.config,h=g.dimensions||[],m=g.measures||[],n=m.length,o=0,s=this;// let end
	b=b[1],h=h.slice(0,h.length-1),o=h.length,p=b.slice(0,o),q=b.slice(o,o+n),c(p,h,o,this.dimensions),c(q,m,n,this.measures)}_setupDrag(b,c,f){function g(o){c(o.clientX-m,o.clientY-n)}function h(){b.style.opacity=1,window.document.removeEventListener('mousemove',g),window.document.removeEventListener('mouseup',h),window.setTimeout(f,10)}let m=0,n=0;b.addEventListener('mousedown',function(o){m=o.clientX,n=o.clientY,b.style.opacity=0.8,window.document.addEventListener('mousemove',g),window.document.addEventListener('mouseup',h)})}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMmJlMDIwMTkxMmU1MzIyYmRmOGMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9jcm9zc3RhYkV4dC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGFyZ2VEYXRhLmpzIl0sIm5hbWVzIjpbIkNyb3NzdGFiRXh0IiwicmVxdWlyZSIsImRhdGEiLCJjb25maWciLCJkaW1lbnNpb25zIiwibWVhc3VyZXMiLCJjaGFydFR5cGUiLCJub0RhdGFNZXNzYWdlIiwibWVhc3VyZU9uUm93IiwiY2VsbFdpZHRoIiwiY2VsbEhlaWdodCIsImNyb3NzdGFiQ29udGFpbmVyIiwiYWdncmVnYXRpb24iLCJjaGFydENvbmZpZyIsImNoYXJ0Iiwid2luZG93IiwiY3Jvc3N0YWIiLCJyZW5kZXJDcm9zc3RhYiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb25zdHJ1Y3RvciIsIk11bHRpQ2hhcnRpbmciLCJtYyIsImRhdGFTdG9yZSIsImNyZWF0ZURhdGFTdG9yZSIsInNldERhdGEiLCJkYXRhU291cmNlIiwidDEiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInRlc3QiLCJhIiwic3RvcmVQYXJhbXMiLCJnbG9iYWxEYXRhIiwiYnVpbGRHbG9iYWxEYXRhIiwiY29sdW1uS2V5QXJyIiwiaGFzaCIsImdldEZpbHRlckhhc2hNYXAiLCJjb3VudCIsImF4ZXMiLCJGQ0RhdGFGaWx0ZXJFeHQiLCJkYXRhRmlsdGVyRXh0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEtleXMiLCJmaWVsZHMiLCJpIiwiaWkiLCJsZW5ndGgiLCJnZXRVbmlxdWVWYWx1ZXMiLCJjcmVhdGVSb3ciLCJ0YWJsZSIsInJvd09yZGVyIiwiY3VycmVudEluZGV4IiwiZmlsdGVyZWREYXRhU3RvcmUiLCJyb3dFbGVtZW50IiwiZmlsdGVyZWREYXRhSGFzaEtleSIsImh0bWxSZWYiLCJyb3dzcGFuIiwiZmllbGRDb21wb25lbnQiLCJmaWVsZFZhbHVlcyIsImwiLCJoYXNGdXJ0aGVyRGVwdGgiLCJjb2xMZW5ndGgiLCJtaW4iLCJtYXgiLCJtaW5tYXhPYmoiLCJjbGFzc1N0ciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInN0eWxlIiwidGV4dEFsaWduIiwibWFyZ2luVG9wIiwidG9Mb3dlckNhc2UiLCJ2aXNpYmlsaXR5IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY29ybmVyV2lkdGgiLCJyZW1vdmVDaGlsZCIsIndpZHRoIiwiaGVpZ2h0IiwiY29sc3BhbiIsImh0bWwiLCJvdXRlckhUTUwiLCJjbGFzc05hbWUiLCJwdXNoIiwiYWRhcHRlciIsImRhdGFBZGFwdGVyIiwiaiIsImNoYXJ0Q2VsbE9iaiIsInJvd0hhc2giLCJjb2xIYXNoIiwiZ2V0Q2hhcnRPYmoiLCJwYXJzZUludCIsImNyZWF0ZUNvbCIsIm1lYXN1cmVPcmRlciIsImNvbEVsZW1lbnQiLCJjb3JuZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJjcmVhdGVSb3dEaW1IZWFkaW5nIiwiY29ybmVyQ2VsbEFyciIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwiY3JlYXRlQ29sRGltSGVhZGluZyIsImluZGV4IiwiY3JlYXRlQ2FwdGlvbiIsIm1heExlbmd0aCIsInVuc2hpZnQiLCJjcmVhdGVDcm9zc3RhYiIsInNlbGYiLCJvYmoiLCJmaWx0ZXIiLCJ2YWwiLCJhcnIiLCJjb2xPcmRlciIsInhBeGlzUm93IiwiY2F0ZWdvcmllcyIsInJvd0RpbVJlb3JkZXIiLCJzdWJqZWN0IiwidGFyZ2V0IiwiYnVmZmVyIiwic3BsaWNlIiwiaW5kZXhPZiIsIk1hdGgiLCJjb2xEaW1SZW9yZGVyIiwibWVyZ2VEaW1lbnNpb25zIiwiY3JlYXRlRmlsdGVycyIsIm1hdGNoZWRWYWx1ZXMiLCJmaWx0ZXJzIiwiamoiLCJmaWx0ZXJHZW4iLCJ0b1N0cmluZyIsImZpbHRlclZhbCIsImNyZWF0ZURhdGFDb21ib3MiLCJyZWN1cnNlIiwiZ2xvYmFsQXJyYXkiLCJzbGljZSIsInIiLCJtYWtlR2xvYmFsQXJyYXkiLCJ0ZW1wT2JqIiwidGVtcEFyciIsImtleSIsImhhc093blByb3BlcnR5IiwibWVhc3VyZSIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJkYXRhQ29tYm9zIiwiaGFzaE1hcCIsImRhdGFDb21ibyIsInZhbHVlIiwibGVuIiwiayIsIm1hdHJpeCIsImNyZWF0ZU11bHRpQ2hhcnQiLCJ0MiIsImdsb2JhbE1heCIsImdsb2JhbE1pbiIsInJvd0xhc3RDaGFydCIsInJvd0F4aXMiLCJyb3ciLCJjZWxsIiwiY3Jvc3N0YWJFbGVtZW50IiwidHlwZSIsImF4aXNUeXBlIiwiYWRhcHRlckNmZyIsImNvbmZpZ3VyYXRpb24iLCJ1cGRhdGUiLCJsaW1pdHMiLCJjaGFydE9iaiIsImdldExpbWl0cyIsIm1pbkxpbWl0IiwibWF4TGltaXQiLCJGQ2pzb24iLCJ5QXhpc01pblZhbHVlIiwieUF4aXNNYXhWYWx1ZSIsImN0UGVyZiIsImV2dCIsImNlbGxBZGFwdGVyIiwiY2F0ZWdvcnkiLCJjYXRlZ29yeVZhbCIsImhpZ2hsaWdodCIsIm11bHRpY2hhcnRPYmplY3QiLCJjcmVhdGVNYXRyaXgiLCJkcmF3IiwiZHJhZ0xpc3RlbmVyIiwicGxhY2VIb2xkZXIiLCJwZXJtdXRlQXJyIiwicGVybXV0ZSIsIm1lbSIsImN1cnJlbnQiLCJyZXN1bHRzIiwiY29uY2F0Iiwiam9pbiIsInBlcm11dGVTdHJzIiwibWF0Y2hIYXNoIiwiZmlsdGVyU3RyIiwic3BsaXQiLCJrZXlQZXJtdXRhdGlvbnMiLCJyb3dGaWx0ZXIiLCJjb2xGaWx0ZXIiLCJyb3dGaWx0ZXJzIiwiZGF0YVByb2Nlc3NvcnMiLCJkYXRhUHJvY2Vzc29yIiwibWF0Y2hlZEhhc2hlcyIsImZpbHRlcmVkRGF0YSIsImFwcGx5IiwiY3JlYXRlRGF0YVByb2Nlc3NvciIsImdldERhdGEiLCJkaW1lbnNpb24iLCJzZXJpZXNUeXBlIiwiYWdncmVnYXRlTW9kZSIsImRhdGFzdG9yZSIsImdldExpbWl0Iiwic2V0dXBMaXN0ZW5lciIsImhvbGRlciIsImFyckxlbiIsImdsb2JhbEFyciIsImVsIiwiZ3JhcGhpY3MiLCJpdGVtIiwiY2VsbFZhbHVlIiwib3JpZ0xlZnQiLCJsZWZ0IiwicmVkWm9uZSIsImFkanVzdCIsIm9yaWdaIiwiekluZGV4IiwiX3NldHVwRHJhZyIsImR4IiwibWFuYWdlU2hpZnRpbmciLCJjaGFuZ2UiLCJzZXRUaW1lb3V0IiwiaXNSaWdodCIsInN0YWNrIiwiZHJhZ0l0ZW0iLCJuZXh0UG9zIiwibmV4dEl0ZW0iLCJwb3AiLCJkaW1lbnNpb25zSG9sZGVyIiwibWVhc3VyZXNIb2xkZXIiLCJvcmlnQ29uZmlnIiwibWVhc3VyZXNMZW5ndGgiLCJkaW1lbnNpb25zTGVuZ3RoIiwiaGFuZGxlciIsImhhbmRsZXIyIiwiY3VzdG9tSGFuZGxlciIsImUiLCJjbGllbnRYIiwieCIsImNsaWVudFkiLCJ5IiwibW91c2VVcEhhbmRsZXIiLCJvcGFjaXR5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUN0Q0EsTUFBTUEsYUFBYyxtQkFBQUMsQ0FBUSxDQUFSLENBQXBCLENBQ0lDLEtBQU8sbUJBQUFELENBQVEsQ0FBUixDQURYLENBR0EsR0FBSUUsUUFBUyxDQUNUQyw2Q0FEUyxDQUVUQyxxQ0FGUyxDQUdUQyxVQUFXLFVBSEYsQ0FJVEMsY0FBZSxxQkFKTixDQUtUQyxlQUxTLENBTVRDLFVBQVcsR0FORixDQU9UQyxXQUFZLEdBUEgsQ0FRVEMsa0JBQW1CLGNBUlYsQ0FTVEMsWUFBYSxLQVRKLENBVVRDLFlBQWEsQ0FDVEMsb2pCQURTLENBVkosQ0FBYixDQTJDc0IsUUFBbEIsUUFBT0MsTyxFQUNQQSxPQUFP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QixDQUNsQyxDQTkyQmEsQ0FpM0JsQjlGLE9BQU9DLE9BQVAsQ0FBaUJuQixXOzs7Ozs7QUNwM0JqQmtCLFFBQU9DLE9BQVAsbXlNIiwiZmlsZSI6ImNyb3NzdGFiLWV4dC1lczYubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMmJlMDIwMTkxMmU1MzIyYmRmOGMiLCJjb25zdCBDcm9zc3RhYkV4dCA9IHJlcXVpcmUoJy4vY3Jvc3N0YWJFeHQnKSxcbiAgICBkYXRhID0gcmVxdWlyZSgnLi9sYXJnZURhdGEnKTtcblxudmFyIGNvbmZpZyA9IHtcbiAgICBkaW1lbnNpb25zOiBbJ1Byb2R1Y3QnLCAnTW9udGgnLCAnWWVhcicsICdTdGF0ZSddLFxuICAgIG1lYXN1cmVzOiBbJ1NhbGUnLCAnVmlzaXRvcnMnLCAnUHJvZml0J10sXG4gICAgY2hhcnRUeXBlOiAnY29sdW1uMmQnLFxuICAgIG5vRGF0YU1lc3NhZ2U6ICdObyBkYXRhIHRvIGRpc3BsYXkuJyxcbiAgICBtZWFzdXJlT25Sb3c6IGZhbHNlLFxuICAgIGNlbGxXaWR0aDogMTIwLFxuICAgIGNlbGxIZWlnaHQ6IDEwMCxcbiAgICBjcm9zc3RhYkNvbnRhaW5lcjogJ2Nyb3NzdGFiLWRpdicsXG4gICAgYWdncmVnYXRpb246ICdzdW0nLFxuICAgIGNoYXJ0Q29uZmlnOiB7XG4gICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAnc2hvd0JvcmRlcic6ICcwJyxcbiAgICAgICAgICAgICdzaG93VmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ2RpdkxpbmVBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdudW1iZXJQcmVmaXgnOiAn4oK5JyxcbiAgICAgICAgICAgICdyb3RhdGVWYWx1ZXMnOiAnMScsXG4gICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiAnNScsXG4gICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiAnNScsXG4gICAgICAgICAgICAnY2hhcnRMZWZ0TWFyZ2luJzogJzUnLFxuICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiAnNScsXG4gICAgICAgICAgICAnemVyb1BsYW5lVGhpY2tuZXNzJzogJzEnLFxuICAgICAgICAgICAgJ3Nob3daZXJvUGxhbmVWYWx1ZSc6ICcxJyxcbiAgICAgICAgICAgICd6ZXJvUGxhbmVBbHBoYSc6ICcxMDAnLFxuICAgICAgICAgICAgJ2JnQ29sb3InOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAnc2hvd1hBeGlzTGluZSc6ICcxJyxcbiAgICAgICAgICAgICdwbG90Qm9yZGVyQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAnc2hvd1hheGlzVmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ3Nob3dZQXhpc1ZhbHVlcyc6ICcwJyxcbiAgICAgICAgICAgICdhbmltYXRpb24nOiAnMScsXG4gICAgICAgICAgICAndHJhbnNwb3NlQW5pbWF0aW9uJzogJzEnLFxuICAgICAgICAgICAgJ2FsdGVybmF0ZUhHcmlkQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAncGxvdENvbG9ySW5Ub29sdGlwJzogJzAnLFxuICAgICAgICAgICAgJ2NhbnZhc0JvcmRlckFscGhhJzogJzEwMCcsXG4gICAgICAgICAgICAnYWx0ZXJuYXRlVkdyaWRBbHBoYSc6ICcwJyxcbiAgICAgICAgICAgICdwYWxldHRlQ29sb3JzJzogJyNCNUI5QkEnLFxuICAgICAgICAgICAgJ3VzZVBsb3RHcmFkaWVudENvbG9yJzogJzAnLFxuICAgICAgICAgICAgJ3ZhbHVlRm9udENvbG9yJzogJyNmZmZmZmYnLFxuICAgICAgICAgICAgJ2RyYXdUcmVuZFJlZ2lvbic6ICcxJ1xuICAgICAgICB9XG4gICAgfVxufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSB7XG4gICAgd2luZG93LmNyb3NzdGFiID0gbmV3IENyb3NzdGFiRXh0KGRhdGEsIGNvbmZpZyk7XG4gICAgd2luZG93LmNyb3NzdGFiLnJlbmRlckNyb3NzdGFiKCk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gQ3Jvc3N0YWJFeHQ7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiLCIvKipcbiAqIFJlcHJlc2VudHMgYSBjcm9zc3RhYi5cbiAqL1xuY2xhc3MgQ3Jvc3N0YWJFeHQge1xuICAgIGNvbnN0cnVjdG9yIChkYXRhLCBjb25maWcpIHtcbiAgICAgICAgLy8gbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICBpZiAodHlwZW9mIE11bHRpQ2hhcnRpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMubWMgPSBuZXcgTXVsdGlDaGFydGluZygpO1xuICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUgPSB0aGlzLm1jLmNyZWF0ZURhdGFTdG9yZSgpO1xuICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUuc2V0RGF0YSh7IGRhdGFTb3VyY2U6IHRoaXMuZGF0YSB9KTtcbiAgICAgICAgICAgIHRoaXMudDEgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3JlUGFyYW1zID0ge1xuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hhcnRUeXBlID0gY29uZmlnLmNoYXJ0VHlwZTtcbiAgICAgICAgdGhpcy5jaGFydENvbmZpZyA9IGNvbmZpZy5jaGFydENvbmZpZztcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gY29uZmlnLmRpbWVuc2lvbnM7XG4gICAgICAgIHRoaXMubWVhc3VyZXMgPSBjb25maWcubWVhc3VyZXM7XG4gICAgICAgIHRoaXMubWVhc3VyZU9uUm93ID0gY29uZmlnLm1lYXN1cmVPblJvdztcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgdGhpcy5jZWxsV2lkdGggPSBjb25maWcuY2VsbFdpZHRoO1xuICAgICAgICB0aGlzLmNlbGxIZWlnaHQgPSBjb25maWcuY2VsbEhlaWdodDtcbiAgICAgICAgdGhpcy5jcm9zc3RhYkNvbnRhaW5lciA9IGNvbmZpZy5jcm9zc3RhYkNvbnRhaW5lcjtcbiAgICAgICAgdGhpcy5oYXNoID0gdGhpcy5nZXRGaWx0ZXJIYXNoTWFwKCk7XG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0aW9uID0gY29uZmlnLmFnZ3JlZ2F0aW9uO1xuICAgICAgICB0aGlzLmF4ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5ub0RhdGFNZXNzYWdlID0gY29uZmlnLm5vRGF0YU1lc3NhZ2U7XG4gICAgICAgIGlmICh0eXBlb2YgRkNEYXRhRmlsdGVyRXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVyQ29uZmlnID0ge307XG4gICAgICAgICAgICB0aGlzLmRhdGFGaWx0ZXJFeHQgPSBuZXcgRkNEYXRhRmlsdGVyRXh0KHRoaXMuZGF0YVN0b3JlLCBmaWx0ZXJDb25maWcsICdjb250cm9sLWJveCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YVN0b3JlLmFkZEV2ZW50TGlzdGVuZXIoJ3RlbXBFdmVudCcsIChlLCBkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSB0aGlzLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJDcm9zc3RhYigpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBnbG9iYWwgZGF0YSBmcm9tIHRoZSBkYXRhIHN0b3JlIGZvciBpbnRlcm5hbCB1c2UuXG4gICAgICovXG4gICAgYnVpbGRHbG9iYWxEYXRhICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSkge1xuICAgICAgICAgICAgbGV0IGZpZWxkcyA9IHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSxcbiAgICAgICAgICAgICAgICBnbG9iYWxEYXRhID0ge307XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWVsZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGdsb2JhbERhdGFbZmllbGRzW2ldXSA9IHRoaXMuZGF0YVN0b3JlLmdldFVuaXF1ZVZhbHVlcyhmaWVsZHNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbERhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVSb3cgKHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuICAgICAgICB2YXIgcm93c3BhbiA9IDAsXG4gICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IHJvd09yZGVyW2N1cnJlbnRJbmRleF0sXG4gICAgICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuICAgICAgICAgICAgaSwgbCA9IGZpZWxkVmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgIHJvd0VsZW1lbnQsXG4gICAgICAgICAgICBoYXNGdXJ0aGVyRGVwdGggPSBjdXJyZW50SW5kZXggPCAocm93T3JkZXIubGVuZ3RoIC0gMSksXG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuICAgICAgICAgICAgY29sTGVuZ3RoID0gdGhpcy5jb2x1bW5LZXlBcnIubGVuZ3RoLFxuICAgICAgICAgICAgaHRtbFJlZixcbiAgICAgICAgICAgIG1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgbWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgbWlubWF4T2JqID0ge307XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJyc7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZFZhbHVlc1tpXTtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICgodGhpcy5jZWxsSGVpZ2h0IC0gMTApIC8gMikgKyAncHgnO1xuICAgICAgICAgICAgY2xhc3NTdHIgKz0gJ3Jvdy1kaW1lbnNpb25zJyArXG4gICAgICAgICAgICAgICAgJyAnICsgdGhpcy5kaW1lbnNpb25zW2N1cnJlbnRJbmRleF0udG9Mb3dlckNhc2UoKSArXG4gICAgICAgICAgICAgICAgJyAnICsgZmllbGRWYWx1ZXNbaV0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIC8vIGlmIChjdXJyZW50SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAvLyAgICAgaHRtbFJlZi5jbGFzc0xpc3QuYWRkKHRoaXMuZGltZW5zaW9uc1tjdXJyZW50SW5kZXggLSAxXS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIHRoaXMuY29ybmVyV2lkdGggPSBmaWVsZFZhbHVlc1tpXS5sZW5ndGggKiAxMDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICByb3dFbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNvcm5lcldpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NTdHJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5ID0gZmlsdGVyZWREYXRhU3RvcmUgKyBmaWVsZFZhbHVlc1tpXSArICd8JztcbiAgICAgICAgICAgIGlmIChpKSB7XG4gICAgICAgICAgICAgICAgdGFibGUucHVzaChbcm93RWxlbWVudF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXS5wdXNoKHJvd0VsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhc0Z1cnRoZXJEZXB0aCkge1xuICAgICAgICAgICAgICAgIHJvd0VsZW1lbnQucm93c3BhbiA9IHRoaXMuY3JlYXRlUm93KHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4ICsgMSwgZmlsdGVyZWREYXRhSGFzaEtleSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAneS1heGlzLWNoYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nOiBhZGFwdGVyXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbExlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydENlbGxPYmogPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jZWxsV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY2VsbEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93SGFzaDogZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbEhhc2g6IHRoaXMuY29sdW1uS2V5QXJyW2pdXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdLnB1c2goY2hhcnRDZWxsT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgbWlubWF4T2JqID0gdGhpcy5nZXRDaGFydE9iaihmaWx0ZXJlZERhdGFIYXNoS2V5LCB0aGlzLmNvbHVtbktleUFycltqXSlbMF07XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IChwYXJzZUludChtaW5tYXhPYmoubWF4KSA+IG1heCkgPyBtaW5tYXhPYmoubWF4IDogbWF4O1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSAocGFyc2VJbnQobWlubWF4T2JqLm1pbikgPCBtaW4pID8gbWlubWF4T2JqLm1pbiA6IG1pbjtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLm1heCA9IG1heDtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRDZWxsT2JqLm1pbiA9IG1pbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3dzcGFuICs9IHJvd0VsZW1lbnQucm93c3BhbjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm93c3BhbjtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGVDb2wgKHRhYmxlLCBkYXRhLCBjb2xPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuICAgIC8vICAgICB2YXIgY29sc3BhbiA9IDAsXG4gICAgLy8gICAgICAgICBmaWVsZENvbXBvbmVudCA9IGNvbE9yZGVyW2N1cnJlbnRJbmRleF0sXG4gICAgLy8gICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuICAgIC8vICAgICAgICAgaSwgbCA9IGZpZWxkVmFsdWVzLmxlbmd0aCxcbiAgICAvLyAgICAgICAgIGNvbEVsZW1lbnQsXG4gICAgLy8gICAgICAgICBoYXNGdXJ0aGVyRGVwdGggPSBjdXJyZW50SW5kZXggPCAoY29sT3JkZXIubGVuZ3RoIC0gMSksXG4gICAgLy8gICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5LFxuICAgIC8vICAgICAgICAgaHRtbFJlZjtcblxuICAgIC8vICAgICBpZiAodGFibGUubGVuZ3RoIDw9IGN1cnJlbnRJbmRleCkge1xuICAgIC8vICAgICAgICAgdGFibGUucHVzaChbXSk7XG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgIC8vICAgICAgICAgbGV0IGNsYXNzU3RyID0gJyc7XG4gICAgLy8gICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIC8vICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZFZhbHVlc1tpXTtcbiAgICAvLyAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgLy8gICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuICAgIC8vICAgICAgICAgY2xhc3NTdHIgKz0gJ2NvbHVtbi1kaW1lbnNpb25zJyArXG4gICAgLy8gICAgICAgICAgICAgJyAnICsgdGhpcy5tZWFzdXJlc1tjdXJyZW50SW5kZXhdICtcbiAgICAvLyAgICAgICAgICAgICAnICcgKyBmaWVsZFZhbHVlc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcbiAgICAvLyAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgLy8gICAgICAgICBjb2xFbGVtZW50ID0ge1xuICAgIC8vICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcbiAgICAvLyAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29ybmVySGVpZ2h0LFxuICAgIC8vICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgLy8gICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAvLyAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAvLyAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgLy8gICAgICAgICB9O1xuXG4gICAgLy8gICAgICAgICBmaWx0ZXJlZERhdGFIYXNoS2V5ID0gZmlsdGVyZWREYXRhU3RvcmUgKyBmaWVsZFZhbHVlc1tpXSArICd8JztcblxuICAgIC8vICAgICAgICAgdGFibGVbY3VycmVudEluZGV4XS5wdXNoKGNvbEVsZW1lbnQpO1xuXG4gICAgLy8gICAgICAgICBpZiAoaGFzRnVydGhlckRlcHRoKSB7XG4gICAgLy8gICAgICAgICAgICAgY29sRWxlbWVudC5jb2xzcGFuID0gdGhpcy5jcmVhdGVDb2wodGFibGUsIGRhdGEsIGNvbE9yZGVyLCBjdXJyZW50SW5kZXggKyAxLCBmaWx0ZXJlZERhdGFIYXNoS2V5KTtcbiAgICAvLyAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaChmaWx0ZXJlZERhdGFIYXNoS2V5KTtcbiAgICAvLyAgICAgICAgIH1cbiAgICAvLyAgICAgICAgIGNvbHNwYW4gKz0gY29sRWxlbWVudC5jb2xzcGFuO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHJldHVybiBjb2xzcGFuO1xuICAgIC8vIH1cblxuICAgIGNyZWF0ZUNvbCAodGFibGUsIGRhdGEsIG1lYXN1cmVPcmRlcikge1xuICAgICAgICB2YXIgY29sc3BhbiA9IDAsXG4gICAgICAgICAgICBpLCBsID0gdGhpcy5tZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICBjb2xFbGVtZW50LFxuICAgICAgICAgICAgaHRtbFJlZjtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSArPSAxKSB7XG4gICAgICAgICAgICBsZXQgY2xhc3NTdHIgPSAnJyxcbiAgICAgICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IG1lYXN1cmVPcmRlcltpXTtcbiAgICAgICAgICAgICAgICAvLyBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdO1xuICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRDb21wb25lbnQ7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGggLSAxNSkgLyAyKSArICdweCc7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgY2xhc3NTdHIgKz0gJ2NvbHVtbi1kaW1lbnNpb25zJyArXG4gICAgICAgICAgICAgICAgJyAnICsgdGhpcy5tZWFzdXJlc1tpXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICBjb2xFbGVtZW50ID0ge1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmNlbGxXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY29ybmVySGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaCh0aGlzLm1lYXN1cmVzW2ldKTtcbiAgICAgICAgICAgIHRhYmxlWzBdLnB1c2goY29sRWxlbWVudCk7XG5cbiAgICAgICAgICAgIC8vIGZpbHRlcmVkRGF0YUhhc2hLZXkgPSBmaWx0ZXJlZERhdGFTdG9yZSArIGZpZWxkVmFsdWVzW2ldICsgJ3wnO1xuXG4gICAgICAgICAgICAvLyB0YWJsZVtpXS5wdXNoKGNvbEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAvLyBpZiAoaGFzRnVydGhlckRlcHRoKSB7XG4gICAgICAgICAgICAvLyAgICAgY29sRWxlbWVudC5jb2xzcGFuID0gdGhpcy5jcmVhdGVDb2wodGFibGUsIGRhdGEsIGNvbE9yZGVyKTtcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaChmaWx0ZXJlZERhdGFIYXNoS2V5KTtcbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIGNvbHNwYW4gKz0gY29sRWxlbWVudC5jb2xzcGFuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZVJvd0RpbUhlYWRpbmcgKHRhYmxlLCBjb2xPcmRlckxlbmd0aCkge1xuICAgICAgICB2YXIgY29ybmVyQ2VsbEFyciA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBodG1sUmVmO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSB0aGlzLmRpbWVuc2lvbnNbaV1bMF0udG9VcHBlckNhc2UoKSArIHRoaXMuZGltZW5zaW9uc1tpXS5zdWJzdHIoMSk7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGggLSAxNSkgLyAyKSArICdweCc7XG4gICAgICAgICAgICBjb3JuZXJDZWxsQXJyLnB1c2goe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLmRpbWVuc2lvbnNbaV0gKiAxMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Nvcm5lci1jZWxsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcm5lckNlbGxBcnI7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29sRGltSGVhZGluZyAodGFibGUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpID0gaW5kZXgsXG4gICAgICAgICAgICBodG1sUmVmO1xuICAgICAgICBmb3IgKDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICB0YWJsZVtpXS5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaHRtbDogaHRtbFJlZi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXhpcy1oZWFkZXItY2VsbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBjcmVhdGVDYXB0aW9uICh0YWJsZSwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcHRpb24nOiAnU2FsZSBvZiBDZXJlYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdWJjYXB0aW9uJzogJ0Fjcm9zcyBTdGF0ZXMsIEFjcm9zcyBZZWFycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6ICcwJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICB0YWJsZS51bnNoaWZ0KFt7XG4gICAgICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgIGNvbHNwYW46IG1heExlbmd0aCxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NhcHRpb24tY2hhcnQnLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjYXB0aW9uJyxcbiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfV0pO1xuICAgICAgICByZXR1cm4gdGFibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlQ3Jvc3N0YWIgKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBvYmogPSB0aGlzLmdsb2JhbERhdGEsXG4gICAgICAgICAgICByb3dPcmRlciA9IHRoaXMuZGltZW5zaW9ucy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gYXJyW2Fyci5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNvbE9yZGVyID0gdGhpcy5tZWFzdXJlcy5maWx0ZXIoZnVuY3Rpb24gKHZhbCwgaSwgYXJyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYubWVhc3VyZU9uUm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB0YWJsZSA9IFtdLFxuICAgICAgICAgICAgeEF4aXNSb3cgPSBbXSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKG9iaikge1xuICAgICAgICAgICAgdGFibGUucHVzaCh0aGlzLmNyZWF0ZVJvd0RpbUhlYWRpbmcodGFibGUsIGNvbE9yZGVyLmxlbmd0aCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5jcmVhdGVDb2wodGFibGUsIG9iaiwgY29sT3JkZXIsIDAsICcnKTtcbiAgICAgICAgICAgIHRhYmxlID0gdGhpcy5jcmVhdGVDb2xEaW1IZWFkaW5nKHRhYmxlLCAwKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQ29sKHRhYmxlLCBvYmosIHRoaXMubWVhc3VyZXMpO1xuICAgICAgICAgICAgdGFibGUucHVzaChbXSk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgb2JqLCByb3dPcmRlciwgMCwgJycpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoID0gKG1heExlbmd0aCA8IHRhYmxlW2ldLmxlbmd0aCkgPyB0YWJsZVtpXS5sZW5ndGggOiBtYXhMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdibGFuay1jZWxsJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFeHRyYSBjZWxsIGZvciB5IGF4aXMuIEVzc2VudGlhbGx5IFkgYXhpcyBmb290ZXIuXG4gICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXhpcy1mb290ZXItY2VsbCdcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWF4TGVuZ3RoIC0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXJDZmcgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhbnZhc1BhZGRpbmcnOiAxMyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiA1XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkYXB0ZXIgPSB0aGlzLm1jLmRhdGFBZGFwdGVyKGFkYXB0ZXJDZmcpO1xuICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29uZmlndXJhdGlvbic6IGFkYXB0ZXJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YWJsZS5wdXNoKHhBeGlzUm93KTtcbiAgICAgICAgICAgIHRhYmxlID0gdGhpcy5jcmVhdGVDYXB0aW9uKHRhYmxlLCBtYXhMZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhYmxlLnB1c2goW3tcbiAgICAgICAgICAgICAgICBodG1sOiAnPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj4nICsgdGhpcy5ub0RhdGFNZXNzYWdlICsgJzwvcD4nLFxuICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoXG4gICAgICAgICAgICB9XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cblxuICAgIHJvd0RpbVJlb3JkZXIgKHN1YmplY3QsIHRhcmdldCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gJycsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgZGltZW5zaW9ucyA9IHRoaXMuZGltZW5zaW9ucztcbiAgICAgICAgaWYgKHRoaXMubWVhc3VyZU9uUm93ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkaW1lbnNpb25zLnNwbGljZShkaW1lbnNpb25zLmxlbmd0aCAtIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaW1lbnNpb25zLmluZGV4T2YoTWF0aC5tYXgoc3ViamVjdCwgdGFyZ2V0KSkgPj0gZGltZW5zaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiAnd3JvbmcgaW5kZXgnO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPiB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGRpbWVuc2lvbnNbc3ViamVjdF07XG4gICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0IC0gMTsgaSA+PSB0YXJnZXQ7IGktLSkge1xuICAgICAgICAgICAgICAgIGRpbWVuc2lvbnNbaSArIDFdID0gZGltZW5zaW9uc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpbWVuc2lvbnNbdGFyZ2V0XSA9IGJ1ZmZlcjtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0IDwgdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBkaW1lbnNpb25zW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCArIDE7IGkgPD0gdGFyZ2V0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zW2kgLSAxXSA9IGRpbWVuc2lvbnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaW1lbnNpb25zW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuICAgIH1cblxuICAgIGNvbERpbVJlb3JkZXIgKHN1YmplY3QsIHRhcmdldCkge1xuICAgICAgICB2YXIgYnVmZmVyID0gJycsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbWVhc3VyZXMgPSB0aGlzLm1lYXN1cmVzO1xuICAgICAgICBpZiAodGhpcy5tZWFzdXJlT25Sb3cgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtZWFzdXJlcy5zcGxpY2UobWVhc3VyZXMubGVuZ3RoIC0gMSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lYXN1cmVzLmluZGV4T2YoTWF0aC5tYXgoc3ViamVjdCwgdGFyZ2V0KSkgPj0gbWVhc3VyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3dyb25nIGluZGV4JztcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0ID4gdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBtZWFzdXJlc1tzdWJqZWN0XTtcbiAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgLSAxOyBpID49IHRhcmdldDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZXNbaSArIDFdID0gbWVhc3VyZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZWFzdXJlc1t0YXJnZXRdID0gYnVmZmVyO1xuICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPCB0YXJnZXQpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IG1lYXN1cmVzW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCArIDE7IGkgPD0gdGFyZ2V0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBtZWFzdXJlc1tpIC0gMV0gPSBtZWFzdXJlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lYXN1cmVzW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuICAgIH1cblxuICAgIG1lcmdlRGltZW5zaW9ucyAoKSB7XG4gICAgICAgIGxldCBkaW1lbnNpb25zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5kaW1lbnNpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHRoaXMuZGltZW5zaW9uc1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSB0aGlzLm1lYXN1cmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5wdXNoKHRoaXMubWVhc3VyZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaW1lbnNpb25zO1xuICAgIH1cblxuICAgIGNyZWF0ZUZpbHRlcnMgKCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBpaSA9IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxLFxuICAgICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgICBqaiA9IDAsXG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBtYXRjaGVkVmFsdWVzID0gdGhpcy5nbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1tpXV07XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IG1hdGNoZWRWYWx1ZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjogdGhpcy5maWx0ZXJHZW4odGhpcy5kaW1lbnNpb25zW2ldLCBtYXRjaGVkVmFsdWVzW2pdLnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJWYWw6IG1hdGNoZWRWYWx1ZXNbal1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsdGVycztcbiAgICB9XG5cbiAgICBjcmVhdGVEYXRhQ29tYm9zICgpIHtcbiAgICAgICAgbGV0IHIgPSBbXSxcbiAgICAgICAgICAgIGdsb2JhbEFycmF5ID0gdGhpcy5tYWtlR2xvYmFsQXJyYXkoKSxcbiAgICAgICAgICAgIG1heCA9IGdsb2JhbEFycmF5Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVjdXJzZSAoYXJyLCBpKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbCA9IGdsb2JhbEFycmF5W2ldLmxlbmd0aDsgaiA8IGw7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBhID0gYXJyLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIGEucHVzaChnbG9iYWxBcnJheVtpXVtqXSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IG1heCkge1xuICAgICAgICAgICAgICAgICAgICByLnB1c2goYSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVjdXJzZShhLCBpICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlY3Vyc2UoW10sIDApO1xuICAgICAgICByZXR1cm4gcjtcbiAgICB9XG5cbiAgICBtYWtlR2xvYmFsQXJyYXkgKCkge1xuICAgICAgICBsZXQgdGVtcE9iaiA9IHt9LFxuICAgICAgICAgICAgdGVtcEFyciA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGtleSBpbiB0aGlzLmdsb2JhbERhdGEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09IHRoaXMubWVhc3VyZSkge1xuICAgICAgICAgICAgICAgIHRlbXBPYmpba2V5XSA9IHRoaXMuZ2xvYmFsRGF0YVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRlbXBBcnIgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKS5tYXAoa2V5ID0+IHRlbXBPYmpba2V5XSk7XG4gICAgICAgIHJldHVybiB0ZW1wQXJyO1xuICAgIH1cblxuICAgIGdldEZpbHRlckhhc2hNYXAgKCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IHRoaXMuY3JlYXRlRmlsdGVycygpLFxuICAgICAgICAgICAgZGF0YUNvbWJvcyA9IHRoaXMuY3JlYXRlRGF0YUNvbWJvcygpLFxuICAgICAgICAgICAgaGFzaE1hcCA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gZGF0YUNvbWJvcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBkYXRhQ29tYm8gPSBkYXRhQ29tYm9zW2ldLFxuICAgICAgICAgICAgICAgIGtleSA9ICcnLFxuICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwLCBsZW4gPSBkYXRhQ29tYm8ubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMCwgbGVuZ3RoID0gZmlsdGVycy5sZW5ndGg7IGsgPCBsZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdGVyVmFsID0gZmlsdGVyc1trXS5maWx0ZXJWYWw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhQ29tYm9bal0gPT09IGZpbHRlclZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gZGF0YUNvbWJvW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgKz0gJ3wnICsgZGF0YUNvbWJvW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUucHVzaChmaWx0ZXJzW2tdLmZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzaE1hcDtcbiAgICB9XG5cbiAgICByZW5kZXJDcm9zc3RhYiAoKSB7XG4gICAgICAgIGxldCBjcm9zc3RhYiA9IHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKSxcbiAgICAgICAgICAgIG1hdHJpeCA9IHRoaXMuY3JlYXRlTXVsdGlDaGFydChjcm9zc3RhYiksXG4gICAgICAgICAgICB0MiA9IHBlcmZvcm1hbmNlLm5vdygpLFxuICAgICAgICAgICAgZ2xvYmFsTWF4ID0gLUluZmluaXR5LFxuICAgICAgICAgICAgZ2xvYmFsTWluID0gSW5maW5pdHk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3dMYXN0Q2hhcnQgPSBjcm9zc3RhYltpXVtjcm9zc3RhYltpXS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChyb3dMYXN0Q2hhcnQubWF4IHx8IHJvd0xhc3RDaGFydC5taW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWF4IDwgcm93TGFzdENoYXJ0Lm1heCkge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSByb3dMYXN0Q2hhcnQubWF4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWluID4gcm93TGFzdENoYXJ0Lm1pbikge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSByb3dMYXN0Q2hhcnQubWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBtYXRyaXgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IG1hdHJpeFtpXSxcbiAgICAgICAgICAgICAgICByb3dBeGlzO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHJvd1tqXSxcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50ID0gY3Jvc3N0YWJbaV1bal07XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzdGFiRWxlbWVudC5jaGFydCAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQudHlwZSA9PT0gJ2F4aXMnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd0F4aXMgPSBjZWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocm93QXhpcy5jaGFydC5jaGFydENvbmZpZy5kYXRhU291cmNlLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhZGFwdGVyQ2ZnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogNVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dBeGlzLmNvbmZpZy5jaGFydC5jb25maWd1cmF0aW9uID0gYWRhcHRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0F4aXMudXBkYXRlKHJvd0F4aXMuY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm93QXhpcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShjcm9zc3RhYkVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2NoYXJ0JykgfHwgY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdodG1sJykpICYmXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdibGFuay1jZWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpbWl0cyA9IHJvd0F4aXMuY2hhcnQuY2hhcnRPYmouZ2V0TGltaXRzKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluTGltaXQgPSBsaW1pdHNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4TGltaXQgPSBsaW1pdHNbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQgPSB0aGlzLmdldENoYXJ0T2JqKGNyb3NzdGFiRWxlbWVudC5yb3dIYXNoLCBjcm9zc3RhYkVsZW1lbnQuY29sSGFzaClbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydC5jb25maWd1cmF0aW9uLkZDanNvbi5jaGFydC55QXhpc01pblZhbHVlID0gbWluTGltaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydC5jb25maWd1cmF0aW9uLkZDanNvbi5jaGFydC55QXhpc01heFZhbHVlID0gbWF4TGltaXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNvbmZpZy5jaGFydCA9IGNoYXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNoYXJ0ID0gY2hhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3RQZXJmICs9IChwZXJmb3JtYW5jZS5ub3coKSAtIHQyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwudXBkYXRlKGNlbGwuY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0MiA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWMuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXJpbicsIChldnQsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLmRhdGEpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBtYXRyaXgubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0gY3Jvc3N0YWJbaV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93W2pdLmNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocm93W2pdLmNoYXJ0LnR5cGUgPT09ICdjYXB0aW9uJyB8fCByb3dbal0uY2hhcnQudHlwZSA9PT0gJ2F4aXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEFkYXB0ZXIgPSByb3dbal0uY2hhcnQuY29uZmlndXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5ID0gdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5VmFsID0gZGF0YS5kYXRhW2NhdGVnb3J5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFkYXB0ZXIuaGlnaGxpZ2h0KGNhdGVnb3J5VmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLm1jLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyb3V0JywgKGV2dCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdHJpeC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCByb3cgPSBjcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dbal0uY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQudHlwZSA9PT0gJ2NhcHRpb24nIHx8IHJvd1tqXS5jaGFydC50eXBlID09PSAnYXhpcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsQWRhcHRlciA9IHJvd1tqXS5jaGFydC5jb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsQWRhcHRlci5oaWdobGlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZU11bHRpQ2hhcnQgKG1hdHJpeCkge1xuICAgICAgICBpZiAodGhpcy5tdWx0aWNoYXJ0T2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdCA9IHRoaXMubWMuY3JlYXRlTWF0cml4KHRoaXMuY3Jvc3N0YWJDb250YWluZXIsIG1hdHJpeCk7XG4gICAgICAgICAgICB3aW5kb3cuY3RQZXJmID0gcGVyZm9ybWFuY2Uubm93KCkgLSB0aGlzLnQxO1xuICAgICAgICAgICAgdGhpcy5tdWx0aWNoYXJ0T2JqZWN0LmRyYXcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdC51cGRhdGUobWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyYWdMaXN0ZW5lcih0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5tdWx0aWNoYXJ0T2JqZWN0LnBsYWNlSG9sZGVyO1xuICAgIH1cblxuICAgIHBlcm11dGVBcnIgKGFycikge1xuICAgICAgICBsZXQgcmVzdWx0cyA9IFtdO1xuICAgICAgICBmdW5jdGlvbiBwZXJtdXRlIChhcnIsIG1lbSkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnQ7XG4gICAgICAgICAgICBtZW0gPSBtZW0gfHwgW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IGFyci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGFyci5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG1lbS5jb25jYXQoY3VycmVudCkuam9pbignfCcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGVybXV0ZShhcnIuc2xpY2UoKSwgbWVtLmNvbmNhdChjdXJyZW50KSk7XG4gICAgICAgICAgICAgICAgYXJyLnNwbGljZShpLCAwLCBjdXJyZW50WzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwZXJtdXRlU3RycyA9IHBlcm11dGUoYXJyKTtcbiAgICAgICAgcmV0dXJuIHBlcm11dGVTdHJzLmpvaW4oJyohJV4nKTtcbiAgICB9XG5cbiAgICBtYXRjaEhhc2ggKGZpbHRlclN0ciwgaGFzaCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGFzaCkge1xuICAgICAgICAgICAgaWYgKGhhc2guaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIGxldCBrZXlzID0ga2V5LnNwbGl0KCd8JyksXG4gICAgICAgICAgICAgICAgICAgIGtleVBlcm11dGF0aW9ucyA9IHRoaXMucGVybXV0ZUFycihrZXlzKS5zcGxpdCgnKiElXicpO1xuICAgICAgICAgICAgICAgIGlmIChrZXlQZXJtdXRhdGlvbnMuaW5kZXhPZihmaWx0ZXJTdHIpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5UGVybXV0YXRpb25zWzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0Q2hhcnRPYmogKHJvd0ZpbHRlciwgY29sRmlsdGVyKSB7XG4gICAgICAgIGxldCBmaWx0ZXJzID0gW10sXG4gICAgICAgICAgICBmaWx0ZXJTdHIgPSAnJyxcbiAgICAgICAgICAgIHJvd0ZpbHRlcnMgPSByb3dGaWx0ZXIuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzID0gW10sXG4gICAgICAgICAgICBkYXRhUHJvY2Vzc29yID0ge30sXG4gICAgICAgICAgICBtYXRjaGVkSGFzaGVzID0gW10sXG4gICAgICAgICAgICAvLyBmaWx0ZXJlZEpTT04gPSBbXSxcbiAgICAgICAgICAgIC8vIG1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIC8vIG1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgZmlsdGVyZWREYXRhID0ge30sXG4gICAgICAgICAgICBhZGFwdGVyQ2ZnID0ge30sXG4gICAgICAgICAgICBhZGFwdGVyID0ge30sXG4gICAgICAgICAgICBsaW1pdHMgPSB7fSxcbiAgICAgICAgICAgIGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV07XG5cbiAgICAgICAgcm93RmlsdGVycy5wdXNoLmFwcGx5KHJvd0ZpbHRlcnMpO1xuICAgICAgICBmaWx0ZXJzID0gcm93RmlsdGVycy5maWx0ZXIoKGEpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoYSAhPT0gJycpO1xuICAgICAgICB9KTtcbiAgICAgICAgZmlsdGVyU3RyID0gZmlsdGVycy5qb2luKCd8Jyk7XG4gICAgICAgIG1hdGNoZWRIYXNoZXMgPSB0aGlzLmhhc2hbdGhpcy5tYXRjaEhhc2goZmlsdGVyU3RyLCB0aGlzLmhhc2gpXTtcbiAgICAgICAgaWYgKG1hdGNoZWRIYXNoZXMpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IG1hdGNoZWRIYXNoZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IgPSB0aGlzLm1jLmNyZWF0ZURhdGFQcm9jZXNzb3IoKTtcbiAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29yLmZpbHRlcihtYXRjaGVkSGFzaGVzW2ldKTtcbiAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29ycy5wdXNoKGRhdGFQcm9jZXNzb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsdGVyZWREYXRhID0gdGhpcy5kYXRhU3RvcmUuZ2V0RGF0YShkYXRhUHJvY2Vzc29ycyk7XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSBmaWx0ZXJlZERhdGFbZmlsdGVyZWREYXRhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgLy8gZmlsdGVyZWRKU09OID0gZmlsdGVyZWREYXRhLmdldEpTT04oKTtcbiAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwLCBpaSA9IGZpbHRlcmVkSlNPTi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgaWYgKGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdID4gbWF4KSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIG1heCA9IGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vICAgICBpZiAoZmlsdGVyZWRKU09OW2ldW2NvbEZpbHRlcl0gPCBtaW4pIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgbWluID0gZmlsdGVyZWRKU09OW2ldW2NvbEZpbHRlcl07XG4gICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgYWRhcHRlckNmZyA9IHtcbiAgICAgICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uOiBbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmU6IFtjb2xGaWx0ZXJdLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNUeXBlOiAnU1MnLFxuICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGVNb2RlOiB0aGlzLmFnZ3JlZ2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBjYXRlZ29yaWVzLFxuICAgICAgICAgICAgICAgICAgICBjb25maWc6IHRoaXMuY2hhcnRDb25maWdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGFzdG9yZTogZmlsdGVyZWREYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYWRhcHRlciA9IHRoaXMubWMuZGF0YUFkYXB0ZXIoYWRhcHRlckNmZyk7XG4gICAgICAgICAgICBsaW1pdHMgPSBhZGFwdGVyLmdldExpbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICAnbWF4JzogbGltaXRzLm1heCxcbiAgICAgICAgICAgICAgICAnbWluJzogbGltaXRzLm1pblxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuY2hhcnRUeXBlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbjogYWRhcHRlclxuICAgICAgICAgICAgfV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkcmFnTGlzdGVuZXIgKHBsYWNlSG9sZGVyKSB7XG4gICAgICAgIC8vIEdldHRpbmcgb25seSBsYWJlbHNcbiAgICAgICAgbGV0IG9yaWdDb25maWcgPSB0aGlzLnN0b3JlUGFyYW1zLmNvbmZpZyxcbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBvcmlnQ29uZmlnLmRpbWVuc2lvbnMgfHwgW10sXG4gICAgICAgICAgICBtZWFzdXJlcyA9IG9yaWdDb25maWcubWVhc3VyZXMgfHwgW10sXG4gICAgICAgICAgICBtZWFzdXJlc0xlbmd0aCA9IG1lYXN1cmVzLmxlbmd0aCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnNMZW5ndGggPSAwLFxuICAgICAgICAgICAgZGltZW5zaW9uc0hvbGRlcixcbiAgICAgICAgICAgIG1lYXN1cmVzSG9sZGVyLFxuICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG4gICAgICAgIC8vIGxldCBlbmRcbiAgICAgICAgcGxhY2VIb2xkZXIgPSBwbGFjZUhvbGRlclsxXTtcbiAgICAgICAgLy8gT21pdHRpbmcgbGFzdCBkaW1lbnNpb25cbiAgICAgICAgZGltZW5zaW9ucyA9IGRpbWVuc2lvbnMuc2xpY2UoMCwgZGltZW5zaW9ucy5sZW5ndGggLSAxKTtcbiAgICAgICAgZGltZW5zaW9uc0xlbmd0aCA9IGRpbWVuc2lvbnMubGVuZ3RoO1xuICAgICAgICAvLyBTZXR0aW5nIHVwIGRpbWVuc2lvbiBob2xkZXJcbiAgICAgICAgZGltZW5zaW9uc0hvbGRlciA9IHBsYWNlSG9sZGVyLnNsaWNlKDAsIGRpbWVuc2lvbnNMZW5ndGgpO1xuICAgICAgICAvLyBTZXR0aW5nIHVwIG1lYXN1cmVzIGhvbGRlclxuICAgICAgICBtZWFzdXJlc0hvbGRlciA9IHBsYWNlSG9sZGVyLnNsaWNlKGRpbWVuc2lvbnNMZW5ndGgsIGRpbWVuc2lvbnNMZW5ndGggKyBtZWFzdXJlc0xlbmd0aCk7XG4gICAgICAgIHNldHVwTGlzdGVuZXIoZGltZW5zaW9uc0hvbGRlciwgZGltZW5zaW9ucywgZGltZW5zaW9uc0xlbmd0aCwgdGhpcy5kaW1lbnNpb25zKTtcbiAgICAgICAgc2V0dXBMaXN0ZW5lcihtZWFzdXJlc0hvbGRlciwgbWVhc3VyZXMsIG1lYXN1cmVzTGVuZ3RoLCB0aGlzLm1lYXN1cmVzKTtcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBMaXN0ZW5lciAoaG9sZGVyLCBhcnIsIGFyckxlbiwgZ2xvYmFsQXJyKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsID0gaG9sZGVyW2ldLmdyYXBoaWNzLFxuICAgICAgICAgICAgICAgICAgICBpdGVtID0gaG9sZGVyW2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0uY2VsbFZhbHVlID0gYXJyW2ldO1xuICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ0xlZnQgPSBwYXJzZUludChlbC5zdHlsZS5sZWZ0KTtcbiAgICAgICAgICAgICAgICBpdGVtLnJlZFpvbmUgPSBpdGVtLm9yaWdMZWZ0ICsgcGFyc2VJbnQoZWwuc3R5bGUud2lkdGgpIC8gMjtcbiAgICAgICAgICAgICAgICBpdGVtLmluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpdGVtLmFkanVzdCA9IDA7XG4gICAgICAgICAgICAgICAgaXRlbS5vcmlnWiA9IGVsLnN0eWxlLnpJbmRleDtcbiAgICAgICAgICAgICAgICBzZWxmLl9zZXR1cERyYWcoaXRlbS5ncmFwaGljcywgZnVuY3Rpb24gZHJhZ1N0YXJ0IChkeCwgZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGl0ZW0ub3JpZ0xlZnQgKyBkeCArIGl0ZW0uYWRqdXN0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlU2hpZnRpbmcoaXRlbS5pbmRleCwgZmFsc2UsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZVNoaWZ0aW5nKGl0ZW0uaW5kZXgsIHRydWUsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZHJhZ0VuZCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFuZ2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkanVzdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnpJbmRleCA9IGl0ZW0ub3JpZ1o7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmxlZnQgPSBpdGVtLm9yaWdMZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGogPCBhcnJMZW47ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbEFycltqXSAhPT0gaG9sZGVyW2pdLmNlbGxWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEFycltqXSA9IGhvbGRlcltqXS5jZWxsVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5nbG9iYWxEYXRhID0gc2VsZi5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbmRlckNyb3NzdGFiKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1hbmFnZVNoaWZ0aW5nIChpbmRleCwgaXNSaWdodCwgaG9sZGVyKSB7XG4gICAgICAgICAgICBsZXQgc3RhY2sgPSBbXSxcbiAgICAgICAgICAgICAgICBkcmFnSXRlbSA9IGhvbGRlcltpbmRleF0sXG4gICAgICAgICAgICAgICAgbmV4dFBvcyA9IGlzUmlnaHQgPyBpbmRleCArIDEgOiBpbmRleCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dEl0ZW0gPSBob2xkZXJbbmV4dFBvc107XG4gICAgICAgICAgICAvLyBTYXZpbmcgZGF0YSBmb3IgbGF0ZXIgdXNlXG4gICAgICAgICAgICBpZiAobmV4dEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKCFpc1JpZ2h0ICYmIChwYXJzZUludChkcmFnSXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0KSA8IG5leHRJdGVtLnJlZFpvbmUpKTtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN0YWNrLnBvcCgpIHx8IChpc1JpZ2h0ICYmIHBhcnNlSW50KGRyYWdJdGVtLmdyYXBoaWNzLnN0eWxlLmxlZnQpID4gbmV4dEl0ZW0ub3JpZ0xlZnQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2sucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5yZWRab25lKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5vcmlnTGVmdCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLmFkanVzdCArPSBwYXJzZUludChuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5hZGp1c3QgLT0gcGFyc2VJbnQobmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLm9yaWdMZWZ0ID0gZHJhZ0l0ZW0ub3JpZ0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLnJlZFpvbmUgPSBkcmFnSXRlbS5yZWRab25lO1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5pbmRleCA9IGRyYWdJdGVtLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0ID0gbmV4dEl0ZW0ub3JpZ0xlZnQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGhvbGRlcltuZXh0UG9zXSk7XG4gICAgICAgICAgICAgICAgICAgIGhvbGRlcltuZXh0UG9zXSA9IGhvbGRlcltpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGhvbGRlcltpbmRleF0gPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXR0aW5nIG5ldyB2YWx1ZXMgZm9yIGRyYWdpdGVtXG4gICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgZHJhZ0l0ZW0uaW5kZXggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBkcmFnSXRlbS5vcmlnTGVmdCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRyYWdJdGVtLnJlZFpvbmUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXR1cERyYWcgKGVsLCBoYW5kbGVyLCBoYW5kbGVyMikge1xuICAgICAgICBsZXQgeCA9IDAsXG4gICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgZnVuY3Rpb24gY3VzdG9tSGFuZGxlciAoZSkge1xuICAgICAgICAgICAgaGFuZGxlcihlLmNsaWVudFggLSB4LCBlLmNsaWVudFkgLSB5KTtcbiAgICAgICAgfVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgeCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgIHkgPSBlLmNsaWVudFk7XG4gICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMC44O1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIGN1c3RvbUhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBtb3VzZVVwSGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBmdW5jdGlvbiBtb3VzZVVwSGFuZGxlciAoZSkge1xuICAgICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgY3VzdG9tSGFuZGxlcik7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXBIYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGhhbmRsZXIyLCAxMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaWx0ZXJHZW4gKGtleSwgdmFsKSB7XG4gICAgICAgIHJldHVybiAoZGF0YSkgPT4gZGF0YVtrZXldID09PSB2YWw7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENyb3NzdGFiRXh0O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2Nyb3NzdGFiRXh0LmpzIiwibW9kdWxlLmV4cG9ydHMgPSBbXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTEsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxM1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE2XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDIsXG4gICAgICAgICdWaXNpdG9ycyc6IDlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMyxcbiAgICAgICAgJ1Byb2ZpdCc6IDEsXG4gICAgICAgICdWaXNpdG9ycyc6IDlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDEyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogMTMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDE5XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAzLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMyxcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA4LFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA1LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxN1xuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDEwLFxuICAgICAgICAnVmlzaXRvcnMnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOSxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDEwLFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDEzXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogMTMsXG4gICAgICAgICdWaXNpdG9ycyc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDE5XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogNixcbiAgICAgICAgJ1Zpc2l0b3JzJzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA5LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA3LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH1cbl07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbGFyZ2VEYXRhLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==