/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	const CrosstabExt=__webpack_require__(1),data=__webpack_require__(2);var config={dimensions:['Product','State','Month'],measures:['Profit','Visitors','Sale'],chartType:'column2d',noDataMessage:'No data to display.',measureOnRow:!1,cellWidth:210,cellHeight:113,showFilter:!0,crosstabContainer:'crosstab-div',aggregation:'sum',chartConfig:{chart:{showBorder:'0',showValues:'0',divLineAlpha:'0',numberPrefix:'\u20B9',rotateValues:'1',rollOverBandColor:'#B2B6DD',columnHoverColor:'#616FF9',chartBottomMargin:'10',chartTopMargin:'10',chartLeftMargin:'5',chartRightMargin:'5',zeroPlaneThickness:'1',showZeroPlaneValue:'1',zeroPlaneAlpha:'100',bgColor:'#FFFFFF',showXAxisLine:'1',plotBorderAlpha:'0',showXaxisValues:'0',showYAxisValues:'0',animation:'1',transposeAnimation:'1',alternateHGridAlpha:'0',plotColorInTooltip:'0',canvasBorderAlpha:'100',alternateVGridAlpha:'0',paletteColors:'#B5B9BA',usePlotGradientColor:'0',valueFontColor:'#FFFFFF',drawTrendRegion:'1'}}};'object'==typeof window?(window.crosstab=new CrosstabExt(data,config),window.crosstab.renderCrosstab()):module.exports=CrosstabExt;

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * Represents a crosstab.
	 */class CrosstabExt{constructor(b,c){if(this.eventList={modelUpdated:'modelupdated',modelDeleted:'modeldeleted',metaInfoUpdate:'metainfoupdated',processorUpdated:'processorupdated',processorDeleted:'processordeleted'},this.data=b,'function'==typeof MultiCharting)this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now();else return{test:function(f){return f}};this.storeParams={data:b,config:c},this.chartType=c.chartType,this.showFilter=c.showFilter,this.chartConfig=c.chartConfig,this.dimensions=c.dimensions,this.measures=c.measures,this.measureOnRow=c.measureOnRow,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=c.cellWidth,this.cellHeight=c.cellHeight,this.crosstabContainer=c.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=c.aggregation,this.axes=[],this.noDataMessage=c.noDataMessage,'function'==typeof FCDataFilterExt&&this.showFilter&&(this.dataFilterExt=new FCDataFilterExt(this.dataStore,{},'control-box')),this.dataStore.addEventListener(this.eventList.modelUpdated,()=>{this.globalData=this.buildGlobalData(),this.renderCrosstab()})}/**
	     * Build global data from the data store for internal use.
	     */buildGlobalData(){if(this.dataStore.getKeys()){let b=this.dataStore.getKeys(),c={};for(let f=0,g=b.length;f<g;f++)c[b[f]]=this.dataStore.getUniqueValues(b[f]);return c}return!1}createRow(b,c,f,g,h){var p,s,u,w,m=0,n=f[g],o=c[n],q=o.length,t=g<f.length-1,v=this.columnKeyArr.length,z=1/0,A=-(1/0),B={};for(p=0;p<q;p+=1){let C='';if(w=document.createElement('p'),w.innerHTML=o[p],w.style.textAlign='center',w.style.marginTop=(this.cellHeight-10)/2+'px',C+='row-dimensions '+this.dimensions[g].toLowerCase()+' '+o[p].toLowerCase()+' no-select',w.style.visibility='hidden',document.body.appendChild(w),this.cornerWidth=10*o[p].length,document.body.removeChild(w),w.style.visibility='visible',s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:w.outerHTML,className:C},u=h+o[p]+'|',p?b.push([s]):b[b.length-1].push(s),t)s.rowspan=this.createRow(b,c,f,g+1,u);else{let D=this.mc.dataAdapter({config:{config:{chart:{axisType:'y'}}}});b[b.length-1].push({rowspan:1,colspan:1,width:40,className:'y-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:D}});for(let E=0;E<v;E+=1){let F={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:u,colHash:this.columnKeyArr[E]};b[b.length-1].push(F),B=this.getChartObj(u,this.columnKeyArr[E])[0],A=parseInt(B.max)>A?B.max:A,z=parseInt(B.min)<z?B.min:z,F.max=A,F.min=z}}m+=s.rowspan}return m}// createCol (table, data, colOrder, currentIndex, filteredDataStore) {
	//     var colspan = 0,
	//         fieldComponent = colOrder[currentIndex],
	//         fieldValues = data[fieldComponent],
	//         i, l = fieldValues.length,
	//         colElement,
	//         hasFurtherDepth = currentIndex < (colOrder.length - 1),
	//         filteredDataHashKey,
	//         htmlRef;
	//     if (table.length <= currentIndex) {
	//         table.push([]);
	//     }
	//     for (i = 0; i < l; i += 1) {
	//         let classStr = '';
	//         htmlRef = document.createElement('p');
	//         htmlRef.innerHTML = fieldValues[i];
	//         htmlRef.style.textAlign = 'center';
	//         document.body.appendChild(htmlRef);
	//         classStr += 'column-dimensions' +
	//             ' ' + this.measures[currentIndex] +
	//             ' ' + fieldValues[i].toLowerCase();
	//         this.cornerHeight = htmlRef.offsetHeight;
	//         document.body.removeChild(htmlRef);
	//         colElement = {
	//             width: this.cellWidth,
	//             height: this.cornerHeight,
	//             rowspan: 1,
	//             colspan: 1,
	//             html: htmlRef.outerHTML,
	//             className: classStr
	//         };
	//         filteredDataHashKey = filteredDataStore + fieldValues[i] + '|';
	//         table[currentIndex].push(colElement);
	//         if (hasFurtherDepth) {
	//             colElement.colspan = this.createCol(table, data, colOrder, currentIndex + 1, filteredDataHashKey);
	//         } else {
	//             this.columnKeyArr.push(filteredDataHashKey);
	//         }
	//         colspan += colElement.colspan;
	//     }
	//     return colspan;
	// }
	createCol(b,c,f){var g,m,n,h=this.measures.length;for(g=0;g<h;g+=1){let o='',p=f[g];// fieldValues = data[fieldComponent];
	n=document.createElement('p'),n.innerHTML=p,n.style.textAlign='center',n.style.marginTop=(30*this.measures.length-15)/2+'px',document.body.appendChild(n),o+='column-dimensions '+this.measures[g].toLowerCase()+' no-select',this.cornerHeight=n.offsetHeight,document.body.removeChild(n),m={width:this.cellWidth,height:this.cornerHeight,rowspan:1,colspan:1,html:n.outerHTML,className:o},this.columnKeyArr.push(this.measures[g]),b[0].push(m)}return 0}createRowDimHeading(){var f,b=[],c=0;for(c=0;c<this.dimensions.length-1;c++)f=document.createElement('p'),f.innerHTML=this.dimensions[c][0].toUpperCase()+this.dimensions[c].substr(1),f.style.textAlign='center',f.style.marginTop=(30*this.measures.length-15)/2+'px',b.push({width:10*this.dimensions[c],height:30*this.measures.length,rowspan:1,colspan:1,html:f.outerHTML,className:'corner-cell no-select'});return b}createColDimHeading(b,c){for(var g,f=c;f<b.length;f++)g=document.createElement('p'),g.innerHTML='',g.style.textAlign='center',b[f].push({width:40,height:30,rowspan:1,colspan:1,html:g.outerHTML,className:'axis-header-cell'});return b}createCaption(b,c){let f=this.mc.dataAdapter({config:{config:{chart:{caption:'Sale of Cereal',subcaption:'Across States, Across Years',borderthickness:'0'}}}});return b.unshift([{height:50,rowspan:1,colspan:c,className:'caption-chart',chart:{type:'caption',width:'100%',height:'100%',dataFormat:'json',configuration:f}}]),b}createCrosstab(){var b=this,c=this.globalData,f=this.dimensions.filter(function(p,q,s){if(p!==s[s.length-1])return!0}),g=this.measures.filter(function(p,q,s){if(b.measureOnRow)return!0;return p!==s[s.length-1]||void 0}),h=[],m=[],n=0,o=0;if(c){for(h.push(this.createRowDimHeading(h,g.length)),h=this.createColDimHeading(h,0),this.createCol(h,c,this.measures),h.push([]),this.createRow(h,c,f,0,''),n=0;n<h.length;n++)o=o<h[n].length?h[n].length:o;for(n=0;n<this.dimensions.length-1;n++)m.push({rowspan:1,colspan:1,height:30,className:'blank-cell'});// Extra cell for y axis. Essentially Y axis footer.
	for(m.push({rowspan:1,colspan:1,height:30,width:40,className:'axis-footer-cell'}),n=0;n<o-this.dimensions.length;n++){let p=this.globalData[this.dimensions[this.dimensions.length-1]],q=this.mc.dataAdapter({config:{config:{chart:{axisType:'x',borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:p}}});m.push({width:'100%',height:20,rowspan:1,colspan:1,className:'x-axis-chart',chart:{type:'axis',width:'100%',height:'100%',dataFormat:'json',configuration:q}})}h.push(m),h=this.createCaption(h,o),this.columnKeyArr=[]}else h.push([{html:'<p style="text-align: center">'+this.noDataMessage+'</p>',height:50,colspan:this.dimensions.length*this.measures.length}]);return h}rowDimReorder(b,c){var g,f='',h=this.dimensions;if(!0===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}colDimReorder(b,c){var g,f='',h=this.measures;if(!1===this.measureOnRow&&h.splice(h.length-1,1),h.indexOf(Math.max(b,c))>=h.length)return'wrong index';if(b>c){for(f=h[b],g=b-1;g>=c;g--)h[g+1]=h[g];h[c]=f}else if(b<c){for(f=h[b],g=b+1;g<=c;g++)h[g-1]=h[g];h[c]=f}this.createCrosstab()}mergeDimensions(){let b=[];for(let c=0,f=this.dimensions.length;c<f;c++)b.push(this.dimensions[c]);for(let c=0,f=this.measures.length;c<f;c++)b.push(this.measures[c]);return b}createFilters(){let m,b=[],c=0,f=this.dimensions.length-1,g=0,h=0;for(c=0;c<f;c++)for(m=this.globalData[this.dimensions[c]],g=0,h=m.length;g<h;g++)b.push({filter:this.filterGen(this.dimensions[c],m[g].toString()),filterVal:m[g]});return b}createDataCombos(){function b(h,m){for(let o=0,p=f[m].length;o<p;o++){var n=h.slice(0);n.push(f[m][o]),m===g?c.push(n):b(n,m+1)}}let c=[],f=this.makeGlobalArray(),g=f.length-1;return b([],0),c}makeGlobalArray(){let b={},c=[];for(let f in this.globalData)this.globalData.hasOwnProperty(f)&&f!==this.measure&&(b[f]=this.globalData[f]);return c=Object.keys(b).map(f=>b[f]),c}getFilterHashMap(){let b=this.createFilters(),c=this.createDataCombos(),f={};for(let g=0,h=c.length;g<h;g++){let m=c[g],n='',o=[];for(let p=0,q=m.length;p<q;p++)for(let s=0,t=b.length;s<t;s++){let u=b[s].filterVal;m[p]===u&&(n+=0===p?m[p]:'|'+m[p],o.push(b[s].filter))}f[n]=o}return f}renderCrosstab(){let b=this.createCrosstab(),c=this.createMultiChart(b),f=performance.now(),g=-(1/0),h=1/0;for(let m=0,n=b.length;m<n;m++){let o=b[m][b[m].length-1];(o.max||o.min)&&(g<o.max&&(g=o.max),h>o.min&&(h=o.min))}for(let m=0,n=c.length;m<n;m++){let p,o=c[m];for(let q=0,s=o.length;q<s;q++){let t=o[q],u=b[m][q];if(u.chart&&'axis'===u.chart.type&&(p=t,'y'===p.chart.chartConfig.dataSource.chart.axisType)){let v={config:{config:{chart:{dataMin:h,axisType:'y',dataMax:g,borderthickness:0,chartBottomMargin:10,chartTopMargin:10}}}},w=this.mc.dataAdapter(v);p.config.chart.configuration=w,p.update(p.config)}if(p){if(!(u.hasOwnProperty('chart')||u.hasOwnProperty('html'))&&'blank-cell'!==u.className){let v=p.chart.chartObj.getLimits(),w=v[0],z=v[1],A=this.getChartObj(u.rowHash,u.colHash)[1];A.configuration.FCjson.chart.yAxisMinValue=w,A.configuration.FCjson.chart.yAxisMaxValue=z,t.config.chart=A,u.chart=A,window.ctPerf+=performance.now()-f,t.update(t.config)}f=performance.now()}}}this.mc.addEventListener('hoverin',(m,n)=>{if(n.data)for(let p=0,q=c.length;p<q;p++){let s=b[p];for(var o=0;o<s.length;o++)if(s[o].chart&&'caption'!==s[o].chart.type&&'axis'!==s[o].chart.type){let t=s[o].chart.configuration,u=this.dimensions[this.dimensions.length-1],v=n.data[u];t.highlight(v)}}}),this.mc.addEventListener('hoverout',()=>{for(let n=0,o=c.length;n<o;n++){let p=b[n];for(var m=0;m<p.length;m++)if(p[m].chart&&'caption'!==p[m].chart.type&&'axis'!==p[m].chart.type){let q=p[m].chart.configuration;q.highlight()}}})}createMultiChart(b){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,b),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(b),this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}permuteArr(b){function c(h,m){let n;m=m||[];for(let o=0,p=h.length;o<p;o++)n=h.splice(o,1),0===h.length&&f.push(m.concat(n).join('|')),c(h.slice(),m.concat(n)),h.splice(o,0,n[0]);return f}let f=[];var g=c(b);return g.join('*!%^')}matchHash(b,c){for(var f in c)if(c.hasOwnProperty(f)){let g=f.split('|'),h=this.permuteArr(g).split('*!%^');if(-1!==h.indexOf(b))return h[0];continue}return!1}getChartObj(b,c){let f=[],g='',h=b.split('|'),m=[],n={},o=[],// filteredJSON = [],
	// max = -Infinity,
	// min = Infinity,
	p={},q={},s={},t={},u=this.globalData[this.dimensions[this.dimensions.length-1]];if(h.push.apply(h),f=h.filter(v=>{return''!==v}),g=f.join('|'),o=this.hash[this.matchHash(g,this.hash)],o){for(let v=0,w=o.length;v<w;v++)n=this.mc.createDataProcessor(),n.filter(o[v]),m.push(n);return p=this.dataStore.getChildModel(m),q={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[c],seriesType:'SS',aggregateMode:this.aggregation,categories:u,config:this.chartConfig},datastore:p},s=this.mc.dataAdapter(q),t=s.getLimit(),[{max:t.max,min:t.min},{type:this.chartType,width:'100%',height:'100%',configuration:s}]}}dragListener(b){function c(t,u,v,w){for(let z=0;z<v;++z){let A=t[z].graphics,B=t[z];B.cellValue=u[z],B.origLeft=parseInt(A.style.left),B.redZone=B.origLeft+parseInt(A.style.width)/2,B.index=z,B.adjust=0,B.origZ=A.style.zIndex,s._setupDrag(B.graphics,function(D){A.style.left=B.origLeft+D+B.adjust+'px',A.style.zIndex=1e3,f(B.index,!1,t),f(B.index,!0,t)},function(){let D=!1,E=0;for(B.adjust=0,A.style.zIndex=B.origZ,A.style.left=B.origLeft+'px';E<v;++E)w[E]!==t[E].cellValue&&(w[E]=t[E].cellValue,D=!0);D&&window.setTimeout(function(){s.globalData=s.buildGlobalData(),s.renderCrosstab()},10)})}}function f(t,u,v){let w=[],z=v[t],A=u?t+1:t-1,B=v[A];// Saving data for later use
	B&&(w.push(!u&&parseInt(z.graphics.style.left)<B.redZone),w.push(w.pop()||u&&parseInt(z.graphics.style.left)>B.origLeft),w.pop()&&(w.push(B.redZone),w.push(B.origLeft),w.push(B.index),u?z.adjust-=parseInt(B.graphics.style.width):z.adjust+=parseInt(B.graphics.style.width),B.origLeft=z.origLeft,B.redZone=z.redZone,B.index=z.index,B.graphics.style.left=B.origLeft+'px',w.push(v[A]),v[A]=v[t],v[t]=w.pop())),3===w.length&&(z.index=w.pop(),z.origLeft=w.pop(),z.redZone=w.pop())}// Getting only labels
	let p,q,g=this.storeParams.config,h=g.dimensions||[],m=g.measures||[],n=m.length,o=0,s=this;// let end
	b=b[1],h=h.slice(0,h.length-1),o=h.length,p=b.slice(0,o),q=b.slice(o+1,o+n+1),c(p,h,o,this.dimensions),c(q,m,n,this.measures)}_setupDrag(b,c,f){function g(o){c(o.clientX-m,o.clientY-n)}function h(){b.style.opacity=1,window.document.removeEventListener('mousemove',g),window.document.removeEventListener('mouseup',h),window.setTimeout(f,10)}let m=0,n=0;b.addEventListener('mousedown',function(o){m=o.clientX,n=o.clientY,b.style.opacity=0.8,window.document.addEventListener('mousemove',g),window.document.addEventListener('mouseup',h)})}filterGen(b,c){return f=>f[b]===c}}module.exports=CrosstabExt;

/***/ },
/* 2 */
/***/ function(module, exports) {

	module.exports=[{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:2,Profit:12,Visitors:6},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:8,Profit:1,Visitors:12},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:7,Profit:3,Visitors:18},{Product:'Rice',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:11,Visitors:17},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:8,Profit:6,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:1,Profit:11,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:14,Visitors:13},{Product:'Rice',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:10,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:6,Profit:3,Visitors:5},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:6,Profit:7,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:2,Profit:14,Visitors:16},{Product:'Rice',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:1,Profit:2,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:3,Profit:1,Visitors:9},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:8,Profit:5,Visitors:8},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:8,Profit:12,Visitors:14},{Product:'Rice',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:6,Profit:13,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:1,Visitors:7},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:6,Visitors:0},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:4,Visitors:10},{Product:'Rice',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:8,Profit:0,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:9,Profit:9,Visitors:8},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:9,Profit:8,Visitors:19},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:9,Profit:5,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:5,Profit:0,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:8,Profit:3,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:5,Profit:6,Visitors:18},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:1,Profit:9,Visitors:16},{Product:'Rice',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:5,Profit:4,Visitors:17},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:10,Profit:11,Visitors:5},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:7,Profit:5,Visitors:15},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:4},{Product:'Rice',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Good',Sale:3,Profit:7,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Jun',Quality:'Medium',Sale:2,Profit:5,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Good',Sale:10,Profit:8,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'July',Quality:'Medium',Sale:7,Profit:14,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Good',Sale:2,Profit:0,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Aug',Quality:'Medium',Sale:3,Profit:1,Visitors:12},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:8,Visitors:14},{Product:'Wheat',State:'Bihar',Year:'2015',Month:'Sept',Quality:'Medium',Sale:1,Profit:12,Visitors:11},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Good',Sale:5,Profit:2,Visitors:17},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Jun',Quality:'Medium',Sale:10,Profit:11,Visitors:0},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Good',Sale:7,Profit:14,Visitors:18},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'July',Quality:'Medium',Sale:4,Profit:10,Visitors:8},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Good',Sale:1,Profit:12,Visitors:5},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Aug',Quality:'Medium',Sale:9,Profit:4,Visitors:15},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Good',Sale:7,Profit:9,Visitors:2},{Product:'Wheat',State:'Bihar',Year:'2016',Month:'Sept',Quality:'Medium',Sale:4,Profit:0,Visitors:12},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Good',Sale:6,Profit:6,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Jun',Quality:'Medium',Sale:4,Profit:5,Visitors:4},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Good',Sale:9,Profit:3,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'July',Quality:'Medium',Sale:6,Profit:10,Visitors:0},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Good',Sale:7,Profit:4,Visitors:13},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Aug',Quality:'Medium',Sale:2,Profit:13,Visitors:10},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Good',Sale:5,Profit:14,Visitors:1},{Product:'Wheat',State:'Bengal',Year:'2015',Month:'Sept',Quality:'Medium',Sale:7,Profit:11,Visitors:11},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Good',Sale:4,Profit:1,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Jun',Quality:'Medium',Sale:4,Profit:8,Visitors:19},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Good',Sale:10,Profit:6,Visitors:2},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'July',Quality:'Medium',Sale:7,Profit:0,Visitors:5},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Good',Sale:8,Profit:9,Visitors:17},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Aug',Quality:'Medium',Sale:6,Profit:5,Visitors:18},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Good',Sale:10,Profit:9,Visitors:14},{Product:'Wheat',State:'Bengal',Year:'2016',Month:'Sept',Quality:'Medium',Sale:7,Profit:7,Visitors:16}];

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,