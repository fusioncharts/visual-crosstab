!function(t){function e(i){if(a[i])return a[i].exports;var r=a[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(1),r=e(3),o={dimensions:["Product","State","Month"],measures:["Profit","Visitors"],chartType:"column2d",noDataMessage:"No data to display.",crosstabContainer:"crosstab-div",cellWidth:150,cellHeight:113,showFilter:!0,draggableHeaders:!0,chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#badaf0",columnHoverColor:"#1b83cc",chartBottomMargin:"10",chartTopMargin:"10",chartLeftMargin:"5",chartRightMargin:"5",zeroPlaneThickness:"1",showZeroPlaneValue:"1",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"0",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"100",alternateVGridAlpha:"0",paletteColors:"#B5B9BA",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new i(r,o),window.crosstab.renderCrosstab()):t.exports=i},function(t,exports,e){"use strict";function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var i=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),r=e(2),o=function(){function t(e,i){var r=this;if(a(this,t),this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.data=e,"function"!=typeof MultiCharting)return{test:function(t){return t}};if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.storeParams={data:e,config:i},this.chartType=i.chartType,this.showFilter=i.showFilter||!1,this.draggableHeaders=i.draggableHeaders||!1,this.chartConfig=i.chartConfig,this.dimensions=i.dimensions,this.measures=i.measures,this.measureOnRow=!1,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=i.cellWidth||210,this.cellHeight=i.cellHeight||113,this.crosstabContainer=i.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=i.aggregation||"sum",this.axes=[],this.noDataMessage=i.noDataMessage,"function"==typeof FCDataFilterExt&&this.showFilter){var o={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,o,"control-box")}this.dataStore.addEventListener(this.eventList.modelUpdated,function(t,e){r.globalData=r.buildGlobalData(),r.renderCrosstab()})}return i(t,[{key:"buildGlobalData",value:function(){if(this.dataStore.getKeys()){for(var t=this.dataStore.getKeys(),e={},a=0,i=t.length;a<i;a++)e[t[a]]=this.dataStore.getUniqueValues(t[a]);return e}return!1}},{key:"createRow",value:function(t,e,a,i,r){var o,n,s,l,h=0,u=a[i],c=e[u],d=c.length,g=i<a.length-1,f=this.columnKeyArr.length,p=1/0,m=-(1/0),y={};for(o=0;o<d;o+=1){var S="";if(l=document.createElement("p"),l.innerHTML=c[o],l.style.textAlign="center",l.style.marginTop=(this.cellHeight-10)/2+"px",S+="row-dimensions "+this.dimensions[i].toLowerCase()+" "+c[o].toLowerCase()+" no-select",l.style.visibility="hidden",document.body.appendChild(l),this.cornerWidth=10*c[o].length,document.body.removeChild(l),l.style.visibility="visible",n={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:l.outerHTML,className:S},s=r+c[o]+"|",o?t.push([n]):t[t.length-1].push(n),g)n.rowspan=this.createRow(t,e,a,i+1,s);else{var P={config:{config:{chart:{axisType:"y"}}}},v={};if("bar2d"===this.chartType){var M=this.globalData[this.dimensions[this.dimensions.length-1]];P={config:{config:{chart:{axisType:"x",borderthickness:0,isHorizontal:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:M}}}}v=this.mc.dataAdapter(P),t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"y-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",configuration:v}});for(var b=0;b<f;b+=1){var w={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:s,colHash:this.columnKeyArr[b],className:"chart-cell"};t[t.length-1].push(w),y=this.getChartObj(s,this.columnKeyArr[b])[0],m=parseInt(y.max)>m?y.max:m,p=parseInt(y.min)<p?y.min:p,w.max=m,w.min=p}}h+=n.rowspan}return h}},{key:"createCol",value:function(t,e,a){var i,r,o,n,s,l,h,u=0,c=this.measures.length;for(i=0;i<c;i+=1){var d="",g=a[i];for(s=document.createElement("div"),s.style.textAlign="center",l=document.createElement("div"),l.setAttribute("class","measure-drag-handle"),l.style.height="5px",l.style.paddingTop="3px",l.style.paddingBottom="1px",r=0;r<25;r++)h=document.createElement("span"),h.style.marginLeft="1px",h.style.fontSize="3px",h.style.lineHeight="1",h.style.verticalAlign="top",l.appendChild(h);n=document.createElement("p"),n.innerHTML=g,n.style.textAlign="center",n.style.marginTop="5px",document.body.appendChild(n),d+="column-measures "+this.measures[i].toLowerCase()+" no-select",this.draggableHeaders&&(d+=" draggable"),this.cornerHeight=n.offsetHeight,document.body.removeChild(n),s.appendChild(l),s.appendChild(n),o={width:this.cellWidth,height:35,rowspan:1,colspan:1,html:s.outerHTML,className:d},this.columnKeyArr.push(this.measures[i]),t[0].push(o)}return u}},{key:"createRowDimHeading",value:function(t,e){var a,i,r,o,n,s=[],l=0,h="";for(l=0;l<this.dimensions.length-1;l++){for(r=document.createElement("div"),r.style.textAlign="center",o=document.createElement("div"),o.setAttribute("class","dimension-drag-handle"),o.style.height="5px",o.style.paddingTop="3px",o.style.paddingBottom="1px",a=0;a<25;a++)n=document.createElement("span"),n.style.marginLeft="1px",n.style.fontSize="3px",n.style.lineHeight="1",n.style.verticalAlign="top",o.appendChild(n);i=document.createElement("p"),i.innerHTML=this.dimensions[l][0].toUpperCase()+this.dimensions[l].substr(1),i.style.textAlign="center",i.style.marginTop="5px",h="corner-cell "+this.dimensions[l].toLowerCase()+" no-select",this.draggableHeaders&&(h+=" draggable"),r.appendChild(o),r.appendChild(i),s.push({width:10*this.dimensions[l],height:35,rowspan:1,colspan:1,html:r.outerHTML,className:h})}return s}},{key:"createColDimHeading",value:function(t,e){for(var a,i=e;i<t.length;i++)a=document.createElement("p"),a.innerHTML="",a.style.textAlign="center",t[i].push({width:40,height:35,rowspan:1,colspan:1,html:a.outerHTML,className:"axis-header-cell"});return t}},{key:"createCaption",value:function(t,e){var a={config:{config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}}},i=this.mc.dataAdapter(a);return t.unshift([{height:50,rowspan:1,colspan:e,className:"caption-chart",chart:{type:"caption",width:"100%",height:"100%",dataFormat:"json",configuration:i}}]),t}},{key:"createCrosstab",value:function(){var t=this,e=this.globalData,a=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),i=this.measures.filter(function(e,a,i){return!!t.measureOnRow||(e!==i[i.length-1]||void 0)}),r=[],o=[],n=0,s=0;if(e){for(r.push(this.createRowDimHeading(r,i.length)),r=this.createColDimHeading(r,0),this.createCol(r,e,this.measures),r.push([]),this.createRow(r,e,a,0,""),n=0;n<r.length;n++)s=s<r[n].length?r[n].length:s;for(n=0;n<this.dimensions.length-1;n++)o.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(o.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),n=0;n<s-this.dimensions.length;n++){var l=this.globalData[this.dimensions[this.dimensions.length-1]],h={config:{config:{chart:{axisType:"x",borderthickness:0,canvasPadding:13,chartLeftMargin:5,chartRightMargin:5},categories:l}}},u={};"bar2d"===this.chartType&&(h={config:{config:{chart:{axisType:"y"}}}}),u=this.mc.dataAdapter(h),o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:{type:"axis",width:"100%",height:"100%",dataFormat:"json",configuration:u}})}r.push(o),r=this.createCaption(r,s),this.columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"rowDimReorder",value:function(t,e){var a,i="",r=this.dimensions;if(this.measureOnRow===!0&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"colDimReorder",value:function(t,e){var a,i="",r=this.measures;if(this.measureOnRow===!1&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"mergeDimensions",value:function(){for(var t=[],e=0,a=this.dimensions.length;e<a;e++)t.push(this.dimensions[e]);for(var i=0,r=this.measures.length;i<r;i++)t.push(this.measures[i]);return t}},{key:"createFilters",value:function(){var t=[],e=0,a=this.dimensions.length-1,i=0,r=0,o=void 0;for(e=0;e<a;e++)for(o=this.globalData[this.dimensions[e]],i=0,r=o.length;i<r;i++)t.push({filter:this.filterGen(this.dimensions[e],o[i].toString()),filterVal:o[i]});return t}},{key:"createDataCombos",value:function(){function t(r,o){for(var n=0,s=a[o].length;n<s;n++){var l=r.slice(0);l.push(a[o][n]),o===i?e.push(l):t(l,o+1)}}var e=[],a=this.makeGlobalArray(),i=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&a!==this.measure&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},i=0,r=e.length;i<r;i++){for(var o=e[i],n="",s=[],l=0,h=o.length;l<h;l++)for(var u=0,c=t.length;u<c;u++){var d=t[u].filterVal;o[l]===d&&(n+=0===l?o[l]:"|"+o[l],s.push(t[u].filter))}a[n]=s}return a}},{key:"updateMatrix",value:function(t,e){for(var a=this,i=-(1/0),r=1/0,o=0,n=t.length;o<n;o++){var s=t[o][t[o].length-1];(s.max||s.min)&&(i<s.max&&(i=s.max),r>s.min&&(r=s.min))}for(var l=0,h=e.length;l<h;l++)for(var u=e[l],c=void 0,d=0,g=u.length;d<g;d++){var f=u[d],p=t[l][d];if(p.chart&&"axis"===p.chart.type&&(c=f,"y"===c.chart.chartConfig.dataSource.chart.axisType)){var m={config:{config:{chart:{dataMin:r,axisType:"y",dataMax:i,borderthickness:0,chartBottomMargin:10,chartTopMargin:10}}}},y=this.mc.dataAdapter(m);c.config.chart.configuration=y,c.update(c.config)}if(c&&!p.hasOwnProperty("chart")&&!p.hasOwnProperty("html")&&"blank-cell"!==p.className){var S=c.chart.chartObj.getLimits(),P=S[0],v=S[1],M=this.getChartObj(p.rowHash,p.colHash)[1];M.configuration.FCjson.chart.yAxisMinValue=P,M.configuration.FCjson.chart.yAxisMaxValue=v,f.config.chart=M,p.chart=M,f.update(f.config)}}this.mc.addEventListener("hoverin",function(i,r){if(r.data)for(var o=0,n=e.length;o<n;o++)for(var s=t[o],l=0;l<s.length;l++)if(s[l].chart&&"caption"!==s[l].chart.type&&"axis"!==s[l].chart.type){var h=s[l].chart.configuration,u=a.dimensions[a.dimensions.length-1],c=r.data[u];h.highlight(c)}}),this.mc.addEventListener("hoverout",function(a,i){for(var r=0,o=e.length;r<o;r++)for(var n=t[r],s=0;s<n.length;s++)if(n[s].chart&&"caption"!==n[s].chart.type&&"axis"!==n[s].chart.type){var l=n[s].chart.configuration;l.highlight()}})}},{key:"renderCrosstab",value:function(){var t=this,e=this.createCrosstab(),a=void 0,i=[];a=new r,a.manageSpace(e,function(e){i=t.createMultiChart(e),t.updateMatrix(e,i)})}},{key:"createMultiChart",value:function(t){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,t),this.multichartObject.draw()):this.multichartObject.update(t),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,i){var r=void 0;i=i||[];for(var o=0,n=t.length;o<n;o++)r=t.splice(o,1),0===t.length&&a.push(i.concat(r).join("|")),e(t.slice(),i.concat(r)),t.splice(o,0,r[0]);return a}var a=[],i=e(t);return i.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var i=a.split("|"),r=this.permuteArr(i).split("*!%^");if(r.indexOf(t)!==-1)return r[0]}else;return!1}},{key:"getChartObj",value:function(t,e){var a=[],i="",r=t.split("|"),o=[],n={},s=[],l={},h={},u={},c={},d=this.globalData[this.dimensions[this.dimensions.length-1]];if(r.push.apply(r),a=r.filter(function(t){return""!==t}),i=a.join("|"),s=this.hash[this.matchHash(i,this.hash)]){for(var g=0,f=s.length;g<f;g++)n=this.mc.createDataProcessor(),n.filter(s[g]),o.push(n);return l=this.dataStore.getChildModel(o),h={config:{dimension:[this.dimensions[this.dimensions.length-1]],measure:[e],seriesType:"SS",aggregateMode:this.aggregation,categories:d,config:this.chartConfig},datastore:l},u=this.mc.dataAdapter(h),c=u.getLimit(),[{max:c.max,min:c.min},{type:this.chartType,width:"100%",height:"100%",configuration:u}]}}},{key:"dragListener",value:function(t){function e(t,e,i,r){var o=0,n=0,s=i-1,l=Math.log2;t[0]&&(o=parseInt(t[0].graphics.style.left),n=parseInt(t[s].graphics.style.left));for(var h=function(s){var h=t[s].graphics,c=t[s],d=0,g=0;c.cellValue=e[s],c.origLeft=parseInt(h.style.left),c.redZone=c.origLeft+parseInt(h.style.width)/2,c.index=s,c.adjust=0,c.origZ=h.style.zIndex,u._setupDrag(c.graphics,function(e,i){d=c.origLeft+e+c.adjust,d<o&&(g=o-d,d=o-l(g)),d>n&&(g=d-n,d=n+l(g)),h.style.left=d+"px",h.style.zIndex=1e3,a(c.index,!1,t),a(c.index,!0,t)},function(){var e=!1,a=0;for(c.adjust=0,h.style.zIndex=c.origZ,h.style.left=c.origLeft+"px";a<i;++a)r[a]!==t[a].cellValue&&(r[a]=t[a].cellValue,e=!0);e&&window.setTimeout(function(){u.globalData=u.buildGlobalData(),u.renderCrosstab()},10)})},c=0;c<i;++c)h(c)}function a(t,e,a){var i=[],r=a[t],o=e?t+1:t-1,n=a[o];n&&(i.push(!e&&parseInt(r.graphics.style.left)<n.redZone),i.push(i.pop()||e&&parseInt(r.graphics.style.left)>n.origLeft),i.pop()&&(i.push(n.redZone),i.push(n.origLeft),i.push(n.index),e?r.adjust-=parseInt(n.graphics.style.width):r.adjust+=parseInt(n.graphics.style.width),n.origLeft=r.origLeft,n.redZone=r.redZone,n.index=r.index,n.graphics.style.left=n.origLeft+"px",i.push(a[o]),a[o]=a[t],a[t]=i.pop())),3===i.length&&(r.index=i.pop(),r.origLeft=i.pop(),r.redZone=i.pop())}var i=this.storeParams.config,r=i.dimensions||[],o=i.measures||[],n=o.length,s=0,l=void 0,h=void 0,u=this;t=t[1],r=r.slice(0,r.length-1),s=r.length,l=t.slice(0,s),h=t.slice(s+1,s+n+1),e(l,r,s,this.dimensions),e(h,o,n,this.measures)}},{key:"_setupDrag",value:function(t,e,a){function i(t){e(t.clientX-o,t.clientY-n)}function r(e){t.style.opacity=1,t.classList.remove("dragging"),window.document.removeEventListener("mousemove",i),window.document.removeEventListener("mouseup",r),window.setTimeout(a,10)}var o=0,n=0;t.addEventListener("mousedown",function(e){o=e.clientX,n=e.clientY,t.style.opacity=.8,t.classList.add("dragging"),window.document.addEventListener("mousemove",i),window.document.addEventListener("mouseup",r)})}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=o},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),i=function(){function t(){e(this,t)}return a(t,[{key:"manageSpace",value:function(t,e){var a=t;e(a)}}]),t}();t.exports=i},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,