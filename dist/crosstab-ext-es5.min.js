!function(t){function e(i){if(a[i])return a[i].exports;var r=a[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(1),r=e(2),o={dimensions:["Product","State","Month"],measures:["Sale","Profit","Visitors"],chartType:"column2d",noDataMessage:"No data to display.",crosstabContainer:"crosstab-div",cellWidth:150,cellHeight:113,showFilter:!0,draggableHeaders:!0,chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#badaf0",columnHoverColor:"#1b83cc",chartBottomMargin:"10",chartTopMargin:"10",chartLeftMargin:"5",chartRightMargin:"5",zeroPlaneThickness:"0",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"0",alternateVGridAlpha:"0",paletteColors:"#B5B9BA",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",canvasBorderThickness:"0",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new i(r,o),window.crosstab.renderCrosstab()):t.exports=i},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),i=function(){function t(a,i){if(e(this,t),this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.data=a,"function"!=typeof MultiCharting)return{test:function(t){return t}};if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now(),this.storeParams={data:a,config:i},this.chartType=i.chartType,this.showFilter=i.showFilter||!1,this.draggableHeaders=i.draggableHeaders||!1,this.chartConfig=i.chartConfig,this.dimensions=i.dimensions,this.measures=i.measures,this.measureOnRow=!1,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=i.cellWidth||210,this.cellHeight=i.cellHeight||113,this.crosstabContainer=i.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=i.aggregation||"sum",this.axes=[],this.noDataMessage=i.noDataMessage,"function"==typeof FCDataFilterExt&&this.showFilter){var r={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,r,"control-box")}}return a(t,[{key:"buildGlobalData",value:function(){if(this.dataStore.getKeys()){for(var t=this.dataStore.getKeys(),e={},a=0,i=t.length;a<i;a++)e[t[a]]=this.dataStore.getUniqueValues(t[a]);return e}return!1}},{key:"createRow",value:function(t,e,a,i,r){var o,s,n,h,l=0,c=a[i],u=e[c],d=u.length,g=i<a.length-1,f=this.columnKeyArr.length,p=1/0,m=-(1/0),y={};for(o=0;o<d;o+=1){var v="";if(h=document.createElement("p"),h.innerHTML=u[o],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",v+="row-dimensions "+this.dimensions[i].toLowerCase()+" "+u[o].toLowerCase()+" no-select",h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*u[o].length,document.body.removeChild(h),h.style.visibility="visible",s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:v},n=r+u[o]+"|",o?t.push([s]):t[t.length-1].push(s),g)s.rowspan=this.createRow(t,e,a,i+1,n);else{if("bar2d"===this.chartType){var S=this.globalData[this.dimensions[this.dimensions.length-1]];t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"y-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,isHorizontal:0,chartTopMargin:10,chartBottomMargin:10,valuePadding:.5},categories:S}})})}else t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"y-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y"}}})});for(var M=0;M<f;M+=1){var P={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:n,colHash:this.columnKeyArr[M],className:"chart-cell"};t[t.length-1].push(P),y=this.getChartObj(n,this.columnKeyArr[M])[0],m=parseInt(y.max)>m?y.max:m,p=parseInt(y.min)<p?y.min:p,P.max=m,P.min=p}}l+=s.rowspan}return l}},{key:"createCol",value:function(t,e,a){var i,r,o,s,n,h,l,c=0,u=this.measures.length;for(i=0;i<u;i+=1){var d="",g=a[i];for(n=document.createElement("div"),n.style.textAlign="center",h=document.createElement("div"),h.setAttribute("class","measure-drag-handle"),h.style.height="5px",h.style.paddingTop="3px",h.style.paddingBottom="1px",r=0;r<25;r++)l=document.createElement("span"),l.style.marginLeft="1px",l.style.fontSize="3px",l.style.lineHeight="1",l.style.verticalAlign="top",h.appendChild(l);s=document.createElement("p"),s.innerHTML=g,s.style.textAlign="center",s.style.marginTop="5px",document.body.appendChild(s),d+="column-measures "+this.measures[i].toLowerCase()+" no-select",this.draggableHeaders&&(d+=" draggable"),this.cornerHeight=s.offsetHeight,document.body.removeChild(s),n.appendChild(h),n.appendChild(s),o={width:this.cellWidth,height:35,rowspan:1,colspan:1,html:n.outerHTML,className:d},this.columnKeyArr.push(this.measures[i]),t[0].push(o)}return c}},{key:"createRowDimHeading",value:function(t,e){var a,i,r,o,s,n=[],h=0,l="";for(h=0;h<this.dimensions.length-1;h++){for(r=document.createElement("div"),r.style.textAlign="center",o=document.createElement("div"),o.setAttribute("class","dimension-drag-handle"),o.style.height="5px",o.style.paddingTop="3px",o.style.paddingBottom="1px",a=0;a<25;a++)s=document.createElement("span"),s.style.marginLeft="1px",s.style.fontSize="3px",s.style.lineHeight="1",s.style.verticalAlign="top",o.appendChild(s);i=document.createElement("p"),i.innerHTML=this.dimensions[h][0].toUpperCase()+this.dimensions[h].substr(1),i.style.textAlign="center",i.style.marginTop="5px",l="corner-cell "+this.dimensions[h].toLowerCase()+" no-select",this.draggableHeaders&&(l+=" draggable"),r.appendChild(o),r.appendChild(i),n.push({width:10*this.dimensions[h],height:35,rowspan:1,colspan:1,html:r.outerHTML,className:l})}return n}},{key:"createColDimHeading",value:function(t,e){for(var a,i=e;i<t.length;i++)a=document.createElement("p"),a.innerHTML="",a.style.textAlign="center",t[i].push({width:40,height:35,rowspan:1,colspan:1,html:a.outerHTML,className:"axis-header-cell"});return t}},{key:"createCaption",value:function(t,e){return t.unshift([{height:50,rowspan:1,colspan:e,className:"caption-chart",chart:this.mc.chart({type:"caption",width:"100%",height:"100%",dataFormat:"json",config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}})}]),t}},{key:"createCrosstab",value:function(){var t=this,e=this.globalData,a=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),i=this.measures.filter(function(e,a,i){return!!t.measureOnRow||(e!==i[i.length-1]||void 0)}),r=[],o=[],s=0,n=0;if(e){for(r.push(this.createRowDimHeading(r,i.length)),r=this.createColDimHeading(r,0),this.createCol(r,e,this.measures),r.push([]),this.createRow(r,e,a,0,""),s=0;s<r.length;s++)n=n<r[s].length?r[s].length:n;for(s=0;s<this.dimensions.length-1;s++)o.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(o.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),s=0;s<n-this.dimensions.length;s++){var h=this.globalData[this.dimensions[this.dimensions.length-1]];"bar2d"===this.chartType?o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y",isHorizontal:1}}})}):o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,chartLeftMargin:5,chartRightMargin:5,valuePadding:.5},categories:h}})})}r.push(o),r=this.createCaption(r,n),this.columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"rowDimReorder",value:function(t,e){var a,i="",r=this.dimensions;if(this.measureOnRow===!0&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"colDimReorder",value:function(t,e){var a,i="",r=this.measures;if(this.measureOnRow===!1&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"mergeDimensions",value:function(){for(var t=[],e=0,a=this.dimensions.length;e<a;e++)t.push(this.dimensions[e]);for(var i=0,r=this.measures.length;i<r;i++)t.push(this.measures[i]);return t}},{key:"createFilters",value:function(){var t=[],e=0,a=this.dimensions.length-1,i=0,r=0,o=void 0;for(e=0;e<a;e++)for(o=this.globalData[this.dimensions[e]],i=0,r=o.length;i<r;i++)t.push({filter:this.filterGen(this.dimensions[e],o[i].toString()),filterVal:o[i]});return t}},{key:"createDataCombos",value:function(){function t(r,o){for(var s=0,n=a[o].length;s<n;s++){var h=r.slice(0);h.push(a[o][s]),o===i?e.push(h):t(h,o+1)}}var e=[],a=this.makeGlobalArray(),i=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&a!==this.measure&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},i=0,r=e.length;i<r;i++){for(var o=e[i],s="",n=[],h=0,l=o.length;h<l;h++)for(var c=0,u=t.length;c<u;c++){var d=t[c].filterVal;o[h]===d&&(s+=0===h?o[h]:"|"+o[h],n.push(t[c].filter))}a[s]=n}return a}},{key:"renderCrosstab",value:function(){var t=this,e=performance.now(),a=-(1/0),i=1/0,r=void 0;this.crosstab=this.createCrosstab();for(var o=0,s=this.crosstab.length;o<s;o++){var n=this.crosstab[o][this.crosstab[o].length-1];(n.max||n.min)&&(a<n.max&&(a=n.max),i>n.min&&(i=n.min))}for(var h=0,l=this.crosstab.length;h<l;h++)for(var c=this.crosstab[h],u=void 0,d=0,g=c.length;d<g;d++){var f=c[d];if(f.chart&&"axis"===f.chart.conf.type&&(u=f,"y"===u.chart.conf.config.chart.axisType)){var p=u.chart,m=p.conf;m.config.chart={dataMin:i,axisType:"y",dataMax:a,borderthickness:0,chartBottomMargin:10,chartTopMargin:10},"bar2d"===this.chartType&&(m.config.chart={dataMin:i,axisType:"y",dataMax:a,borderthickness:0,chartLeftMargin:5,chartRightMargin:5,isHorizontal:1}),p=this.mc.chart(m),u.chart=p}}this.createMultiChart(this.crosstab);for(var y=0,v=this.crosstab.length;y<v;y++)for(var S=this.crosstab[y],M=0,P=S.length;M<P;M++){var b=S[M];!r&&b.chart&&"y"===b.chart.conf.config.chart.axisType&&(r=b)}for(var x=0,w=this.crosstab.length;x<w;x++)for(var B=this.crosstab[x],V=0,C=B.length;V<C;V++){var Y=B[V];if(r){if(!Y.hasOwnProperty("html")&&!Y.hasOwnProperty("chart")&&"blank-cell"!==Y.className&&"axis-footer-cell"!==Y.className){var Q=r.chart,H=Q.getChartInstance(),A=H.getLimits(),L=A[0],R=A[1],T=this.getChartObj(Y.rowHash,Y.colHash,L,R)[1];Y.chart=T,window.ctPerf+=performance.now()-e}e=performance.now()}}this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,function(e,a){t.globalData=t.buildGlobalData(),t.updateCrosstab()}),this.mc.addEventListener("hoverin",function(e,a){if(a.data)for(var i=0,r=t.crosstab.length;i<r;i++)for(var o=t.crosstab[i],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart,h=t.dimensions[t.dimensions.length-1],l=a.data[h];n.highlight(l)}}),this.mc.addEventListener("hoverout",function(e,a){for(var i=0,r=t.crosstab.length;i<r;i++)for(var o=t.crosstab[i],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart;n.highlight()}})}},{key:"updateCrosstab",value:function(){var t=this.createCrosstab(),e=void 0,a=void 0,i=void 0,r=void 0,o=[],s=-(1/0),n=1/0,h=[];for(e=0,a=this.crosstab.length;e<a;e++){var l=this.crosstab[e];for(i=0,r=l.length;i<r;i++){var c=l[i];if(c.chart){var u=c.chart.getConf();"caption"!==u.type&&"axis"!==u.type&&o.push(c)}}}for(e=0,a=t.length;e<a;e++){var d=t[e];for(i=0,r=d.length;i<r;i++){var g=d[i];if(g.rowHash&&g.colHash){var f=this.getOldChart(o,g.rowHash,g.colHash),p={};if(!f){var m=this.getChartObj(g.rowHash,g.colHash);f=m[1],p=m[0]}g.chart=f,0!==Object.keys(p).length&&(g.max=p.max,g.min=p.min)}}}for(e=0,a=t.length;e<a;e++){var y=t[e];for(i=0,r=y.length;i<r;i++){var v=y[i];(v.max||v.min)&&(s<v.max&&(s=v.max),n>v.min&&(n=v.min))}}for(e=0,a=t.length;e<a;e++){var S=t[e];for(i=0,r=S.length;i<r;i++){var M=S[i];if(M.chart&&"axis"===M.chart.conf.type){var P=M;if("y"===P.chart.conf.config.chart.axisType){var b=P.chart,x=b.conf;x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartBottomMargin:10,chartTopMargin:10},"bar2d"===this.chartType&&(x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartLeftMargin:5,chartRightMargin:5,isHorizontal:1}),b=this.mc.chart(x),P.chart=b}}}}this.crosstab=t,this.createMultiChart(),h=this.getYAxisLimits();for(var w=0,B=this.crosstab.length;w<B;w++)for(var V=this.crosstab[w],C=0,Y=V.length;C<Y;C++){var Q=V[C];if(!Q.hasOwnProperty("html")&&"blank-cell"!==Q.className&&"axis-footer-cell"!==Q.className&&"caption"!==Q.chart.getConf().type&&"axis"!==Q.chart.getConf().type){var H=this.getChartObj(Q.rowHash,Q.colHash,h[0],h[1])[1];Q.chart.update(H.getConf())}}}},{key:"getYAxisLimits",value:function(){var t=void 0,e=void 0,a=void 0,i=void 0;for(t=0,e=this.crosstab.length;t<e;t++){var r=this.crosstab[t];for(a=0,i=r.length;a<i;a++){var o=r[a];if(o.chart){var s=o.chart.getConf();if("axis"===s.type&&"y"===s.config.chart.axisType)return o.chart.getChartInstance().getLimits()}}}}},{key:"getOldChart",value:function(t,e,a){for(var i=t.length-1;i>=0;i--)if(t[i].rowHash===e&&t[i].colHash===a)return t[i].chart}},{key:"createMultiChart",value:function(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,i){var r=void 0;i=i||[];for(var o=0,s=t.length;o<s;o++)r=t.splice(o,1),0===t.length&&a.push(i.concat(r).join("|")),e(t.slice(),i.concat(r)),t.splice(o,0,r[0]);return a}var a=[],i=e(t);return i.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var i=a.split("|"),r=this.permuteArr(i).split("*!%^");if(r.indexOf(t)!==-1)return r[0]}else;return!1}},{key:"getChartObj",value:function(t,e,a,i){var r=[],o="",s=t.split("|"),n=[],h={},l=[],c={},u={},d={},g=this.globalData[this.dimensions[this.dimensions.length-1]];if(s.push.apply(s),r=s.filter(function(t){return""!==t}),o=r.join("|"),l=this.hash[this.matchHash(o,this.hash)]){for(var f=0,p=l.length;f<p;f++)h=this.mc.createDataProcessor(),h.filter(l[f]),n.push(h);return c=this.dataStore.getChildModel(n),void 0!==a&&void 0!==i&&(this.chartConfig.chart.yAxisMinValue=a,this.chartConfig.chart.yAxisMaxValue=i),d=this.mc.chart({dataSource:c,type:this.chartType,width:"100%",height:"100%",dimension:[this.dimensions[this.dimensions.length-1]],measure:[e],seriesType:"SS",aggregateMode:this.aggregation,categories:g,config:this.chartConfig}),u=d.getLimit(),[{max:u.max,min:u.min},d]}}},{key:"dragListener",value:function(t){function e(t,e,i,r){var o=0,s=0,n=i-1,h=Math.log2;t[0]&&(o=parseInt(t[0].graphics.style.left),s=parseInt(t[n].graphics.style.left));for(var l=function(n){var l=t[n].graphics,u=t[n],d=0,g=0;u.cellValue=e[n],u.origLeft=parseInt(l.style.left),u.redZone=u.origLeft+parseInt(l.style.width)/2,u.index=n,u.adjust=0,u.origZ=l.style.zIndex,c._setupDrag(u.graphics,function(e,i){d=u.origLeft+e+u.adjust,d<o&&(g=o-d,d=o-h(g)),d>s&&(g=d-s,d=s+h(g)),l.style.left=d+"px",l.style.zIndex=1e3,a(u.index,!1,t),a(u.index,!0,t)},function(){var e=!1,a=0;for(u.adjust=0,l.style.zIndex=u.origZ,l.style.left=u.origLeft+"px";a<i;++a)r[a]!==t[a].cellValue&&(r[a]=t[a].cellValue,e=!0);e&&window.setTimeout(function(){c.globalData=c.buildGlobalData(),c.renderCrosstab()},10)})},u=0;u<i;++u)l(u)}function a(t,e,a){var i=[],r=a[t],o=e?t+1:t-1,s=a[o];s&&(i.push(!e&&parseInt(r.graphics.style.left)<s.redZone),i.push(i.pop()||e&&parseInt(r.graphics.style.left)>s.origLeft),i.pop()&&(i.push(s.redZone),i.push(s.origLeft),i.push(s.index),e?r.adjust-=parseInt(s.graphics.style.width):r.adjust+=parseInt(s.graphics.style.width),s.origLeft=r.origLeft,s.redZone=r.redZone,s.index=r.index,s.graphics.style.left=s.origLeft+"px",i.push(a[o]),a[o]=a[t],a[t]=i.pop())),3===i.length&&(r.index=i.pop(),r.origLeft=i.pop(),r.redZone=i.pop())}var i=this.storeParams.config,r=i.dimensions||[],o=i.measures||[],s=o.length,n=0,h=void 0,l=void 0,c=this;t=t[1],r=r.slice(0,r.length-1),n=r.length,h=t.slice(0,n),l=t.slice(n+1,n+s+1),e(h,r,n,this.dimensions),e(l,o,s,this.measures)}},{key:"_setupDrag",value:function(t,e,a){function i(t){e(t.clientX-o,t.clientY-s)}function r(e){t.style.opacity=1,t.classList.remove("dragging"),window.document.removeEventListener("mousemove",i),window.document.removeEventListener("mouseup",r),window.setTimeout(a,10)}var o=0,s=0;t.addEventListener("mousedown",function(e){o=e.clientX,s=e.clientY,t.style.opacity=.8,t.classList.add("dragging"),window.document.addEventListener("mousemove",i),window.document.addEventListener("mouseup",r)})}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=i},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,