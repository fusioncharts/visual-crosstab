!function(t){function e(i){if(a[i])return a[i].exports;var r=a[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var a={};return e.m=t,e.c=a,e.p="",e(0)}([function(t,exports,e){"use strict";var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=e(1),r=e(2),o={dimensions:["Product","State","Month"],measures:["Sale","Profit","Visitors"],chartType:"bar2d",noDataMessage:"No data to display.",crosstabContainer:"crosstab-div",cellWidth:150,cellHeight:80,showFilter:!0,draggableHeaders:!0,chartConfig:{chart:{showBorder:"0",showValues:"0",divLineAlpha:"0",numberPrefix:"â‚¹",rotateValues:"1",rollOverBandColor:"#badaf0",columnHoverColor:"#1b83cc",chartBottomMargin:"2",chartTopMargin:"2",chartLeftMargin:"5",chartRightMargin:"7",zeroPlaneThickness:"0",zeroPlaneAlpha:"100",bgColor:"#FFFFFF",showXAxisLine:"1",plotBorderAlpha:"0",showXaxisValues:"0",showYAxisValues:"0",animation:"1",transposeAnimation:"1",alternateHGridAlpha:"0",plotColorInTooltip:"0",canvasBorderAlpha:"0",alternateVGridAlpha:"0",paletteColors:"#5B5B5B",usePlotGradientColor:"0",valueFontColor:"#FFFFFF",canvasBorderThickness:"0",drawTrendRegion:"1"}}};"object"===("undefined"==typeof window?"undefined":a(window))?(window.crosstab=new i(r,o),window.crosstab.renderCrosstab()):t.exports=i},function(t,exports){"use strict";function e(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(t,e){for(var a=0;a<e.length;a++){var i=e[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,a,i){return a&&t(e.prototype,a),i&&t(e,i),e}}(),i=function(){function t(a,i){if(e(this,t),this.eventList={modelUpdated:"modelupdated",modelDeleted:"modeldeleted",metaInfoUpdate:"metainfoupdated",processorUpdated:"processorupdated",processorDeleted:"processordeleted"},this.data=a,"function"!=typeof MultiCharting)return{test:function(t){return t}};if(this.mc=new MultiCharting,this.dataStore=this.mc.createDataStore(),this.dataStore.setData({dataSource:this.data}),this.t1=performance.now(),this.storeParams={data:a,config:i},this.chartType=i.chartType,this.showFilter=i.showFilter||!1,this.draggableHeaders=i.draggableHeaders||!1,this.chartConfig=i.chartConfig,this.dimensions=i.dimensions,this.measures=i.measures,this.measureOnRow=!1,this.globalData=this.buildGlobalData(),this.columnKeyArr=[],this.cellWidth=i.cellWidth||210,this.cellHeight=i.cellHeight||113,this.crosstabContainer=i.crosstabContainer,this.hash=this.getFilterHashMap(),this.count=0,this.aggregation=i.aggregation||"sum",this.axes=[],this.noDataMessage=i.noDataMessage,"function"==typeof FCDataFilterExt&&this.showFilter){var r={};this.dataFilterExt=new FCDataFilterExt(this.dataStore,r,"control-box")}}return a(t,[{key:"buildGlobalData",value:function(){if(this.dataStore.getKeys()){for(var t=this.dataStore.getKeys(),e={},a=0,i=t.length;a<i;a++)e[t[a]]=this.dataStore.getUniqueValues(t[a]);return e}return!1}},{key:"createRow",value:function(t,e,a,i,r){var o,s,n,h,l=0,c=a[i],u=e[c],d=u.length,g=i<a.length-1,f=this.columnKeyArr.length,p=1/0,m=-(1/0),y={};for(o=0;o<d;o+=1){var v="";if(h=document.createElement("p"),h.innerHTML=u[o],h.style.textAlign="center",h.style.marginTop=(this.cellHeight-10)/2+"px",v+="row-dimensions "+this.dimensions[i].toLowerCase()+" "+u[o].toLowerCase()+" no-select",h.style.visibility="hidden",document.body.appendChild(h),this.cornerWidth=10*u[o].length,document.body.removeChild(h),h.style.visibility="visible",s={width:this.cornerWidth,height:35,rowspan:1,colspan:1,html:h.outerHTML,className:v},n=r+u[o]+"|",o?t.push([s]):t[t.length-1].push(s),g)s.rowspan=this.createRow(t,e,a,i+1,n);else{if("bar2d"===this.chartType){var S=this.globalData[this.dimensions[this.dimensions.length-1]];t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"y-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,isHorizontal:0,chartTopMargin:this.chartConfig.chart.chartTopMargin,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,valuePadding:.5},categories:S}})})}else t[t.length-1].push({rowspan:1,colspan:1,width:40,className:"y-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y"}}})});for(var M=0;M<f;M+=1){var P={width:this.cellWidth,height:this.cellHeight,rowspan:1,colspan:1,rowHash:n,colHash:this.columnKeyArr[M],className:"chart-cell "+(M+1)};M===f-1&&(P.className="chart-cell last-col"),t[t.length-1].push(P),y=this.getChartObj(n,this.columnKeyArr[M])[0],m=parseInt(y.max)>m?y.max:m,p=parseInt(y.min)<p?y.min:p,P.max=m,P.min=p}}l+=s.rowspan}return l}},{key:"createCol",value:function(t,e,a){var i,r,o,s,n,h,l,c=0,u=this.measures.length;for(i=0;i<u;i+=1){var d="",g=a[i];for(n=document.createElement("div"),n.style.textAlign="center",h=document.createElement("div"),h.setAttribute("class","measure-drag-handle"),h.style.height="5px",h.style.paddingTop="3px",h.style.paddingBottom="1px",r=0;r<25;r++)l=document.createElement("span"),l.style.marginLeft="1px",l.style.fontSize="3px",l.style.lineHeight="1",l.style.verticalAlign="top",h.appendChild(l);s=document.createElement("p"),s.innerHTML=g,s.style.textAlign="center",s.style.marginTop="5px",document.body.appendChild(s),d+="column-measures "+this.measures[i].toLowerCase()+" no-select",this.draggableHeaders&&(d+=" draggable"),this.cornerHeight=s.offsetHeight,document.body.removeChild(s),n.appendChild(h),n.appendChild(s),o={width:this.cellWidth,height:35,rowspan:1,colspan:1,html:n.outerHTML,className:d},this.columnKeyArr.push(this.measures[i]),t[0].push(o)}return c}},{key:"createRowDimHeading",value:function(t,e){var a,i,r,o,s,n=[],h=0,l="";for(h=0;h<this.dimensions.length-1;h++){for(r=document.createElement("div"),r.style.textAlign="center",o=document.createElement("div"),o.setAttribute("class","dimension-drag-handle"),o.style.height="5px",o.style.paddingTop="3px",o.style.paddingBottom="1px",a=0;a<25;a++)s=document.createElement("span"),s.style.marginLeft="1px",s.style.fontSize="3px",s.style.lineHeight="1",s.style.verticalAlign="top",o.appendChild(s);i=document.createElement("p"),i.innerHTML=this.dimensions[h][0].toUpperCase()+this.dimensions[h].substr(1),i.style.textAlign="center",i.style.marginTop="5px",l="corner-cell "+this.dimensions[h].toLowerCase()+" no-select",this.draggableHeaders&&(l+=" draggable"),r.appendChild(o),r.appendChild(i),n.push({width:10*this.dimensions[h].length,height:35,rowspan:1,colspan:1,html:r.outerHTML,className:l})}return n}},{key:"createColDimHeading",value:function(t,e){for(var a,i=e;i<t.length;i++)a=document.createElement("p"),a.innerHTML="",a.style.textAlign="center",t[i].push({width:40,height:35,rowspan:1,colspan:1,html:a.outerHTML,className:"axis-header-cell"});return t}},{key:"createCaption",value:function(t,e){return t.unshift([{height:50,rowspan:1,colspan:e,className:"caption-chart",chart:this.mc.chart({type:"caption",width:"100%",height:"100%",dataFormat:"json",config:{chart:{caption:"Sale of Cereal",subcaption:"Across States, Across Years",borderthickness:"0"}}})}]),t}},{key:"createCrosstab",value:function(){var t=this,e=this.globalData,a=this.dimensions.filter(function(t,e,a){if(t!==a[a.length-1])return!0}),i=this.measures.filter(function(e,a,i){return!!t.measureOnRow||(e!==i[i.length-1]||void 0)}),r=[],o=[],s=0,n=0;if(e){for(r.push(this.createRowDimHeading(r,i.length)),r=this.createColDimHeading(r,0),this.createCol(r,e,this.measures),r.push([]),this.createRow(r,e,a,0,""),s=0;s<r.length;s++)n=n<r[s].length?r[s].length:n;for(s=0;s<this.dimensions.length-1;s++)o.push({rowspan:1,colspan:1,height:30,className:"blank-cell"});for(o.push({rowspan:1,colspan:1,height:30,width:40,className:"axis-footer-cell"}),s=0;s<n-this.dimensions.length;s++){var h=this.globalData[this.dimensions[this.dimensions.length-1]];"bar2d"===this.chartType?o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"y",isHorizontal:1}}})}):o.push({width:"100%",height:20,rowspan:1,colspan:1,className:"x-axis-chart",chart:this.mc.chart({type:"axis",width:"100%",height:"100%",dataFormat:"json",config:{chart:{axisType:"x",borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,valuePadding:.5},categories:h}})})}r.push(o),r=this.createCaption(r,n),this.columnKeyArr=[]}else r.push([{html:'<p style="text-align: center">'+this.noDataMessage+"</p>",height:50,colspan:this.dimensions.length*this.measures.length}]);return r}},{key:"rowDimReorder",value:function(t,e){var a,i="",r=this.dimensions;if(this.measureOnRow===!0&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"colDimReorder",value:function(t,e){var a,i="",r=this.measures;if(this.measureOnRow===!1&&r.splice(r.length-1,1),r.indexOf(Math.max(t,e))>=r.length)return"wrong index";if(t>e){for(i=r[t],a=t-1;a>=e;a--)r[a+1]=r[a];r[e]=i}else if(t<e){for(i=r[t],a=t+1;a<=e;a++)r[a-1]=r[a];r[e]=i}this.createCrosstab()}},{key:"mergeDimensions",value:function(){for(var t=[],e=0,a=this.dimensions.length;e<a;e++)t.push(this.dimensions[e]);for(var i=0,r=this.measures.length;i<r;i++)t.push(this.measures[i]);return t}},{key:"createFilters",value:function(){var t=[],e=0,a=this.dimensions.length-1,i=0,r=0,o=void 0;for(e=0;e<a;e++)for(o=this.globalData[this.dimensions[e]],i=0,r=o.length;i<r;i++)t.push({filter:this.filterGen(this.dimensions[e],o[i].toString()),filterVal:o[i]});return t}},{key:"createDataCombos",value:function(){function t(r,o){for(var s=0,n=a[o].length;s<n;s++){var h=r.slice(0);h.push(a[o][s]),o===i?e.push(h):t(h,o+1)}}var e=[],a=this.makeGlobalArray(),i=a.length-1;return t([],0),e}},{key:"makeGlobalArray",value:function(){var t={},e=[];for(var a in this.globalData)this.globalData.hasOwnProperty(a)&&a!==this.measure&&(t[a]=this.globalData[a]);return e=Object.keys(t).map(function(e){return t[e]})}},{key:"getFilterHashMap",value:function(){for(var t=this.createFilters(),e=this.createDataCombos(),a={},i=0,r=e.length;i<r;i++){for(var o=e[i],s="",n=[],h=0,l=o.length;h<l;h++)for(var c=0,u=t.length;c<u;c++){var d=t[c].filterVal;o[h]===d&&(s+=0===h?o[h]:"|"+o[h],n.push(t[c].filter))}a[s]=n}return a}},{key:"renderCrosstab",value:function(){var t=this,e=performance.now(),a=-(1/0),i=1/0,r=void 0;this.crosstab=this.createCrosstab();for(var o=0,s=this.crosstab.length;o<s;o++){var n=this.crosstab[o][this.crosstab[o].length-1];(n.max||n.min)&&(a<n.max&&(a=n.max),i>n.min&&(i=n.min))}for(var h=0,l=this.crosstab.length;h<l;h++)for(var c=this.crosstab[h],u=void 0,d=0,g=c.length;d<g;d++){var f=c[d];if(f.chart&&"axis"===f.chart.conf.type&&(u=f,"y"===u.chart.conf.config.chart.axisType)){var p=u.chart,m=p.conf;m.config.chart={dataMin:i,axisType:"y",dataMax:a,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(m.config.chart={dataMin:i,axisType:"y",dataMax:a,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),p=this.mc.chart(m),u.chart=p}}this.createMultiChart(this.crosstab);for(var y=0,v=this.crosstab.length;y<v;y++)for(var S=this.crosstab[y],M=0,P=S.length;M<P;M++){var b=S[M];!r&&b.chart&&"y"===b.chart.conf.config.chart.axisType&&(r=b)}for(var x=0,w=this.crosstab.length;x<w;x++)for(var C=this.crosstab[x],B=0,V=C.length;B<V;B++){var Y=C[B];if(r){if(!Y.hasOwnProperty("html")&&!Y.hasOwnProperty("chart")&&"blank-cell"!==Y.className&&"axis-footer-cell"!==Y.className){var Q=r.chart,H=Q.getChartInstance(),L=H.getLimits(),A=L[0],R=L[1],T=this.getChartObj(Y.rowHash,Y.colHash,A,R)[1];Y.chart=T,window.ctPerf+=performance.now()-e}e=performance.now()}}this.createMultiChart(this.crosstab),this.dataStore.addEventListener(this.eventList.modelUpdated,function(e,a){t.globalData=t.buildGlobalData(),t.updateCrosstab()}),this.mc.addEventListener("hoverin",function(e,a){if(a.data)for(var i=0,r=t.crosstab.length;i<r;i++)for(var o=t.crosstab[i],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart,h=t.dimensions[t.dimensions.length-1],l=a.data[h];n.highlight(l)}}),this.mc.addEventListener("hoverout",function(e,a){for(var i=0,r=t.crosstab.length;i<r;i++)for(var o=t.crosstab[i],s=0;s<o.length;s++)if(o[s].chart&&"caption"!==o[s].chart.conf.type&&"axis"!==o[s].chart.conf.type){var n=o[s].chart;n.highlight()}})}},{key:"updateCrosstab",value:function(){var t=this.createCrosstab(),e=void 0,a=void 0,i=void 0,r=void 0,o=[],s=-(1/0),n=1/0,h=[];for(e=0,a=this.crosstab.length;e<a;e++){var l=this.crosstab[e];for(i=0,r=l.length;i<r;i++){var c=l[i];if(c.chart){var u=c.chart.getConf();"caption"!==u.type&&"axis"!==u.type&&o.push(c)}}}for(e=0,a=t.length;e<a;e++){var d=t[e];for(i=0,r=d.length;i<r;i++){var g=d[i];if(g.rowHash&&g.colHash){var f=this.getOldChart(o,g.rowHash,g.colHash),p={};if(!f){var m=this.getChartObj(g.rowHash,g.colHash);f=m[1],p=m[0]}g.chart=f,0!==Object.keys(p).length&&(g.max=p.max,g.min=p.min)}}}for(e=0,a=t.length;e<a;e++){var y=t[e];for(i=0,r=y.length;i<r;i++){var v=y[i];(v.max||v.min)&&(s<v.max&&(s=v.max),n>v.min&&(n=v.min))}}for(e=0,a=t.length;e<a;e++){var S=t[e];for(i=0,r=S.length;i<r;i++){var M=S[i];if(M.chart&&"axis"===M.chart.conf.type){var P=M;if("y"===P.chart.conf.config.chart.axisType){var b=P.chart,x=b.conf;x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartBottomMargin:this.chartConfig.chart.chartBottomMargin,chartTopMargin:this.chartConfig.chart.chartTopMargin},"bar2d"===this.chartType&&(x.config.chart={dataMin:n,axisType:"y",dataMax:s,borderthickness:0,chartLeftMargin:this.chartConfig.chart.chartLeftMargin,chartRightMargin:this.chartConfig.chart.chartRightMargin,isHorizontal:1}),b=this.mc.chart(x),P.chart=b}}}}this.crosstab=t,this.createMultiChart(),h=this.getYAxisLimits();for(var w=0,C=this.crosstab.length;w<C;w++)for(var B=this.crosstab[w],V=0,Y=B.length;V<Y;V++){var Q=B[V];if(!Q.hasOwnProperty("html")&&"blank-cell"!==Q.className&&"axis-footer-cell"!==Q.className&&"caption"!==Q.chart.getConf().type&&"axis"!==Q.chart.getConf().type){var H=this.getChartObj(Q.rowHash,Q.colHash,h[0],h[1])[1];Q.chart.update(H.getConf())}}}},{key:"getYAxisLimits",value:function(){var t=void 0,e=void 0,a=void 0,i=void 0;for(t=0,e=this.crosstab.length;t<e;t++){var r=this.crosstab[t];for(a=0,i=r.length;a<i;a++){var o=r[a];if(o.chart){var s=o.chart.getConf();if("axis"===s.type&&"y"===s.config.chart.axisType)return o.chart.getChartInstance().getLimits()}}}}},{key:"getOldChart",value:function(t,e,a){for(var i=t.length-1;i>=0;i--)if(t[i].rowHash===e&&t[i].colHash===a)return t[i].chart}},{key:"createMultiChart",value:function(){return void 0===this.multichartObject?(this.multichartObject=this.mc.createMatrix(this.crosstabContainer,this.crosstab),window.ctPerf=performance.now()-this.t1,this.multichartObject.draw()):this.multichartObject.update(this.crosstab),this.draggableHeaders&&this.dragListener(this.multichartObject.placeHolder),this.multichartObject.placeHolder}},{key:"permuteArr",value:function(t){function e(t,i){var r=void 0;i=i||[];for(var o=0,s=t.length;o<s;o++)r=t.splice(o,1),0===t.length&&a.push(i.concat(r).join("|")),e(t.slice(),i.concat(r)),t.splice(o,0,r[0]);return a}var a=[],i=e(t);return i.join("*!%^")}},{key:"matchHash",value:function(t,e){for(var a in e)if(e.hasOwnProperty(a)){var i=a.split("|"),r=this.permuteArr(i).split("*!%^");if(r.indexOf(t)!==-1)return r[0]}else;return!1}},{key:"getChartObj",value:function(t,e,a,i){var r=[],o="",s=t.split("|"),n=[],h={},l=[],c={},u={},d={},g=this.globalData[this.dimensions[this.dimensions.length-1]];if(s.push.apply(s),r=s.filter(function(t){return""!==t}),o=r.join("|"),l=this.hash[this.matchHash(o,this.hash)]){for(var f=0,p=l.length;f<p;f++)h=this.mc.createDataProcessor(),h.filter(l[f]),n.push(h);return c=this.dataStore.getChildModel(n),void 0!==a&&void 0!==i&&(this.chartConfig.chart.yAxisMinValue=a,this.chartConfig.chart.yAxisMaxValue=i),d=this.mc.chart({dataSource:c,type:this.chartType,width:"100%",height:"100%",dimension:[this.dimensions[this.dimensions.length-1]],measure:[e],seriesType:"SS",aggregateMode:this.aggregation,categories:g,config:this.chartConfig}),u=d.getLimit(),[{max:u.max,min:u.min},d]}}},{key:"dragListener",value:function(t){function e(t,e,i,r){var o=0,s=0,n=i-1,h=Math.log2;t[0]&&(o=parseInt(t[0].graphics.style.left),s=parseInt(t[n].graphics.style.left));for(var l=function(n){var l=t[n].graphics,u=t[n],d=0,g=0;u.cellValue=e[n],u.origLeft=parseInt(l.style.left),u.redZone=u.origLeft+parseInt(l.style.width)/2,u.index=n,u.adjust=0,u.origZ=l.style.zIndex,c._setupDrag(u.graphics,function(e,i){d=u.origLeft+e+u.adjust,d<o&&(g=o-d,d=o-h(g)),d>s&&(g=d-s,d=s+h(g)),l.style.left=d+"px",l.style.zIndex=1e3,a(u.index,!1,t),a(u.index,!0,t)},function(){var e=!1,a=0;for(u.adjust=0,l.style.zIndex=u.origZ,l.style.left=u.origLeft+"px";a<i;++a)r[a]!==t[a].cellValue&&(r[a]=t[a].cellValue,e=!0);e&&window.setTimeout(function(){c.globalData=c.buildGlobalData(),c.renderCrosstab()},10)})},u=0;u<i;++u)l(u)}function a(t,e,a){var i=[],r=a[t],o=e?t+1:t-1,s=a[o];s&&(i.push(!e&&parseInt(r.graphics.style.left)<s.redZone),i.push(i.pop()||e&&parseInt(r.graphics.style.left)>s.origLeft),i.pop()&&(i.push(s.redZone),i.push(s.origLeft),i.push(s.index),e?r.adjust-=parseInt(s.graphics.style.width):r.adjust+=parseInt(s.graphics.style.width),s.origLeft=r.origLeft,s.redZone=r.redZone,s.index=r.index,s.graphics.style.left=s.origLeft+"px",i.push(a[o]),a[o]=a[t],a[t]=i.pop())),3===i.length&&(r.index=i.pop(),r.origLeft=i.pop(),r.redZone=i.pop())}var i=this.storeParams.config,r=i.dimensions||[],o=i.measures||[],s=o.length,n=0,h=void 0,l=void 0,c=this;t=t[1],r=r.slice(0,r.length-1),n=r.length,h=t.slice(0,n),l=t.slice(n+1,n+s+1),e(h,r,n,this.dimensions),e(l,o,s,this.measures)}},{key:"_setupDrag",value:function(t,e,a){function i(t){e(t.clientX-o,t.clientY-s)}function r(e){t.style.opacity=1,t.classList.remove("dragging"),window.document.removeEventListener("mousemove",i),window.document.removeEventListener("mouseup",r),window.setTimeout(a,10)}var o=0,s=0;t.addEventListener("mousedown",function(e){o=e.clientX,s=e.clientY,t.style.opacity=.8,t.classList.add("dragging"),window.document.addEventListener("mousemove",i),window.document.addEventListener("mouseup",r)})}},{key:"filterGen",value:function(t,e){return function(a){return a[t]===e}}}]),t}();t.exports=i},function(t,exports){"use strict";t.exports=[{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:2,Profit:12,Visitors:6},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:8,Profit:1,Visitors:12},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:7,Profit:3,Visitors:18},{Product:"Rice",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:11,Visitors:17},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:8,Profit:6,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:1,Profit:11,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:14,Visitors:13},{Product:"Rice",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:10,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:6,Profit:3,Visitors:5},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:6,Profit:7,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:2,Profit:14,Visitors:16},{Product:"Rice",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:1,Profit:2,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:3,Profit:1,Visitors:9},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:8,Profit:5,Visitors:8},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:8,Profit:12,Visitors:14},{Product:"Rice",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:6,Profit:13,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:1,Visitors:7},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:6,Visitors:0},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:4,Visitors:10},{Product:"Rice",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:8,Profit:0,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:9,Profit:9,Visitors:8},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:9,Profit:8,Visitors:19},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:9,Profit:5,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:5,Profit:0,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:8,Profit:3,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:5,Profit:6,Visitors:18},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:1,Profit:9,Visitors:16},{Product:"Rice",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:5,Profit:4,Visitors:17},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:10,Profit:11,Visitors:5},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:7,Profit:5,Visitors:15},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:4},{Product:"Rice",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Good",Sale:3,Profit:7,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Jun",Quality:"Medium",Sale:2,Profit:5,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Good",Sale:10,Profit:8,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"July",Quality:"Medium",Sale:7,Profit:14,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Good",Sale:2,Profit:0,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Aug",Quality:"Medium",Sale:3,Profit:1,Visitors:12},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:8,Visitors:14},{Product:"Wheat",State:"Bihar",Year:"2015",Month:"Sept",Quality:"Medium",Sale:1,Profit:12,Visitors:11},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Good",Sale:5,Profit:2,Visitors:17},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Jun",Quality:"Medium",Sale:10,Profit:11,Visitors:0},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Good",Sale:7,Profit:14,Visitors:18},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"July",Quality:"Medium",Sale:4,Profit:10,Visitors:8},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Good",Sale:1,Profit:12,Visitors:5},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Aug",Quality:"Medium",Sale:9,Profit:4,Visitors:15},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Good",Sale:7,Profit:9,Visitors:2},{Product:"Wheat",State:"Bihar",Year:"2016",Month:"Sept",Quality:"Medium",Sale:4,Profit:0,Visitors:12},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Good",Sale:6,Profit:6,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Jun",Quality:"Medium",Sale:4,Profit:5,Visitors:4},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Good",Sale:9,Profit:3,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"July",Quality:"Medium",Sale:6,Profit:10,Visitors:0},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Good",Sale:7,Profit:4,Visitors:13},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Aug",Quality:"Medium",Sale:2,Profit:13,Visitors:10},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Good",Sale:5,Profit:14,Visitors:1},{Product:"Wheat",State:"Bengal",Year:"2015",Month:"Sept",Quality:"Medium",Sale:7,Profit:11,Visitors:11},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Good",Sale:4,Profit:1,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Jun",Quality:"Medium",Sale:4,Profit:8,Visitors:19},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Good",Sale:10,Profit:6,Visitors:2},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"July",Quality:"Medium",Sale:7,Profit:0,Visitors:5},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Good",Sale:8,Profit:9,Visitors:17},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Aug",Quality:"Medium",Sale:6,Profit:5,Visitors:18},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Good",Sale:10,Profit:9,Visitors:14},{Product:"Wheat",State:"Bengal",Year:"2016",Month:"Sept",Quality:"Medium",Sale:7,Profit:7,Visitors:16}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vY3Jvc3N0YWItZXh0LWVzNS5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIDNlOGIwOTc2M2RhNjFiZmVkOWU0Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3Jvc3N0YWJFeHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xhcmdlRGF0YS5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvYmoiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIkNyb3NzdGFiRXh0IiwiZGF0YSIsImNvbmZpZyIsImRpbWVuc2lvbnMiLCJtZWFzdXJlcyIsImNoYXJ0VHlwZSIsIm5vRGF0YU1lc3NhZ2UiLCJjcm9zc3RhYkNvbnRhaW5lciIsImNlbGxXaWR0aCIsImNlbGxIZWlnaHQiLCJzaG93RmlsdGVyIiwiZHJhZ2dhYmxlSGVhZGVycyIsImNoYXJ0Q29uZmlnIiwiY2hhcnQiLCJzaG93Qm9yZGVyIiwic2hvd1ZhbHVlcyIsImRpdkxpbmVBbHBoYSIsIm51bWJlclByZWZpeCIsInJvdGF0ZVZhbHVlcyIsInJvbGxPdmVyQmFuZENvbG9yIiwiY29sdW1uSG92ZXJDb2xvciIsImNoYXJ0Qm90dG9tTWFyZ2luIiwiY2hhcnRUb3BNYXJnaW4iLCJjaGFydExlZnRNYXJnaW4iLCJjaGFydFJpZ2h0TWFyZ2luIiwiemVyb1BsYW5lVGhpY2tuZXNzIiwiemVyb1BsYW5lQWxwaGEiLCJiZ0NvbG9yIiwic2hvd1hBeGlzTGluZSIsInBsb3RCb3JkZXJBbHBoYSIsInNob3dYYXhpc1ZhbHVlcyIsInNob3dZQXhpc1ZhbHVlcyIsImFuaW1hdGlvbiIsInRyYW5zcG9zZUFuaW1hdGlvbiIsImFsdGVybmF0ZUhHcmlkQWxwaGEiLCJwbG90Q29sb3JJblRvb2x0aXAiLCJjYW52YXNCb3JkZXJBbHBoYSIsImFsdGVybmF0ZVZHcmlkQWxwaGEiLCJwYWxldHRlQ29sb3JzIiwidXNlUGxvdEdyYWRpZW50Q29sb3IiLCJ2YWx1ZUZvbnRDb2xvciIsImNhbnZhc0JvcmRlclRoaWNrbmVzcyIsImRyYXdUcmVuZFJlZ2lvbiIsIndpbmRvdyIsImNyb3NzdGFiIiwicmVuZGVyQ3Jvc3N0YWIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInRoaXMiLCJldmVudExpc3QiLCJtb2RlbFVwZGF0ZWQiLCJtb2RlbERlbGV0ZWQiLCJtZXRhSW5mb1VwZGF0ZSIsInByb2Nlc3NvclVwZGF0ZWQiLCJwcm9jZXNzb3JEZWxldGVkIiwiTXVsdGlDaGFydGluZyIsInRlc3QiLCJhIiwibWMiLCJkYXRhU3RvcmUiLCJjcmVhdGVEYXRhU3RvcmUiLCJzZXREYXRhIiwiZGF0YVNvdXJjZSIsInQxIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzdG9yZVBhcmFtcyIsIm1lYXN1cmVPblJvdyIsImdsb2JhbERhdGEiLCJidWlsZEdsb2JhbERhdGEiLCJjb2x1bW5LZXlBcnIiLCJoYXNoIiwiZ2V0RmlsdGVySGFzaE1hcCIsImNvdW50IiwiYWdncmVnYXRpb24iLCJheGVzIiwiRkNEYXRhRmlsdGVyRXh0IiwiZmlsdGVyQ29uZmlnIiwiZGF0YUZpbHRlckV4dCIsInZhbHVlIiwiZ2V0S2V5cyIsImZpZWxkcyIsImlpIiwiZ2V0VW5pcXVlVmFsdWVzIiwidGFibGUiLCJyb3dPcmRlciIsImN1cnJlbnRJbmRleCIsImZpbHRlcmVkRGF0YVN0b3JlIiwicm93RWxlbWVudCIsImZpbHRlcmVkRGF0YUhhc2hLZXkiLCJodG1sUmVmIiwicm93c3BhbiIsImZpZWxkQ29tcG9uZW50IiwiZmllbGRWYWx1ZXMiLCJsIiwiaGFzRnVydGhlckRlcHRoIiwiY29sTGVuZ3RoIiwibWluIiwiSW5maW5pdHkiLCJtYXgiLCJtaW5tYXhPYmoiLCJjbGFzc1N0ciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlubmVySFRNTCIsInN0eWxlIiwidGV4dEFsaWduIiwibWFyZ2luVG9wIiwidG9Mb3dlckNhc2UiLCJ2aXNpYmlsaXR5IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY29ybmVyV2lkdGgiLCJyZW1vdmVDaGlsZCIsIndpZHRoIiwiaGVpZ2h0IiwiY29sc3BhbiIsImh0bWwiLCJvdXRlckhUTUwiLCJjbGFzc05hbWUiLCJwdXNoIiwiY3JlYXRlUm93IiwiY2F0ZWdvcmllcyIsInR5cGUiLCJkYXRhRm9ybWF0IiwiYXhpc1R5cGUiLCJib3JkZXJ0aGlja25lc3MiLCJpc0hvcml6b250YWwiLCJ2YWx1ZVBhZGRpbmciLCJqIiwiY2hhcnRDZWxsT2JqIiwicm93SGFzaCIsImNvbEhhc2giLCJnZXRDaGFydE9iaiIsInBhcnNlSW50IiwibWVhc3VyZU9yZGVyIiwiY29sRWxlbWVudCIsImhlYWRlckRpdiIsImRyYWdEaXYiLCJoYW5kbGVTcGFuIiwic2V0QXR0cmlidXRlIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJtYXJnaW5MZWZ0IiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwidmVydGljYWxBbGlnbiIsImNvcm5lckhlaWdodCIsIm9mZnNldEhlaWdodCIsImNvbE9yZGVyTGVuZ3RoIiwiY29ybmVyQ2VsbEFyciIsInRvVXBwZXJDYXNlIiwic3Vic3RyIiwiaW5kZXgiLCJtYXhMZW5ndGgiLCJ1bnNoaWZ0IiwiY2FwdGlvbiIsInN1YmNhcHRpb24iLCJzZWxmIiwiZmlsdGVyIiwidmFsIiwiYXJyIiwiY29sT3JkZXIiLCJ4QXhpc1JvdyIsImNyZWF0ZVJvd0RpbUhlYWRpbmciLCJjcmVhdGVDb2xEaW1IZWFkaW5nIiwiY3JlYXRlQ29sIiwiY3JlYXRlQ2FwdGlvbiIsInN1YmplY3QiLCJidWZmZXIiLCJzcGxpY2UiLCJpbmRleE9mIiwiTWF0aCIsImNyZWF0ZUNyb3NzdGFiIiwiZmlsdGVycyIsImpqIiwibWF0Y2hlZFZhbHVlcyIsImZpbHRlckdlbiIsInRvU3RyaW5nIiwiZmlsdGVyVmFsIiwicmVjdXJzZSIsImdsb2JhbEFycmF5Iiwic2xpY2UiLCJyIiwibWFrZUdsb2JhbEFycmF5IiwidGVtcE9iaiIsInRlbXBBcnIiLCJoYXNPd25Qcm9wZXJ0eSIsIm1lYXN1cmUiLCJrZXlzIiwibWFwIiwiY3JlYXRlRmlsdGVycyIsImRhdGFDb21ib3MiLCJjcmVhdGVEYXRhQ29tYm9zIiwiaGFzaE1hcCIsImRhdGFDb21ibyIsImxlbiIsImsiLCJfdGhpcyIsInQyIiwiZ2xvYmFsTWF4IiwiZ2xvYmFsTWluIiwieUF4aXMiLCJyb3dMYXN0Q2hhcnQiLCJyb3ciLCJyb3dBeGlzIiwiY3Jvc3N0YWJFbGVtZW50IiwiY29uZiIsImF4aXNDaGFydCIsImRhdGFNaW4iLCJkYXRhTWF4IiwiY3JlYXRlTXVsdGlDaGFydCIsImNoYXJ0SW5zdGFuY2UiLCJnZXRDaGFydEluc3RhbmNlIiwibGltaXRzIiwiZ2V0TGltaXRzIiwibWluTGltaXQiLCJtYXhMaW1pdCIsImNoYXJ0T2JqIiwiY3RQZXJmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJkIiwidXBkYXRlQ3Jvc3N0YWIiLCJldnQiLCJjZWxsQWRhcHRlciIsImNhdGVnb3J5IiwiY2F0ZWdvcnlWYWwiLCJoaWdobGlnaHQiLCJmaWx0ZXJlZENyb3NzdGFiIiwib2xkQ2hhcnRzIiwiYXhpc0xpbWl0cyIsImNlbGwiLCJjaGFydENvbmYiLCJnZXRDb25mIiwib2xkQ2hhcnQiLCJnZXRPbGRDaGFydCIsImdldFlBeGlzTGltaXRzIiwidXBkYXRlIiwidW5kZWZpbmVkIiwibXVsdGljaGFydE9iamVjdCIsImNyZWF0ZU1hdHJpeCIsImRyYXciLCJkcmFnTGlzdGVuZXIiLCJwbGFjZUhvbGRlciIsInBlcm11dGUiLCJtZW0iLCJjdXJyZW50IiwicmVzdWx0cyIsImNvbmNhdCIsImpvaW4iLCJwZXJtdXRlU3RycyIsImZpbHRlclN0ciIsInNwbGl0Iiwia2V5UGVybXV0YXRpb25zIiwicGVybXV0ZUFyciIsInJvd0ZpbHRlciIsImNvbEZpbHRlciIsInJvd0ZpbHRlcnMiLCJkYXRhUHJvY2Vzc29ycyIsImRhdGFQcm9jZXNzb3IiLCJtYXRjaGVkSGFzaGVzIiwiZmlsdGVyZWREYXRhIiwiYXBwbHkiLCJtYXRjaEhhc2giLCJjcmVhdGVEYXRhUHJvY2Vzc29yIiwiZ2V0Q2hpbGRNb2RlbCIsInlBeGlzTWluVmFsdWUiLCJ5QXhpc01heFZhbHVlIiwiZGltZW5zaW9uIiwic2VyaWVzVHlwZSIsImFnZ3JlZ2F0ZU1vZGUiLCJnZXRMaW1pdCIsInNldHVwTGlzdGVuZXIiLCJob2xkZXIiLCJhcnJMZW4iLCJnbG9iYWxBcnIiLCJsaW1pdExlZnQiLCJsaW1pdFJpZ2h0IiwibGFzdCIsImxuIiwibG9nMiIsImdyYXBoaWNzIiwibGVmdCIsIl9sb29wIiwiZWwiLCJpdGVtIiwibkxlZnQiLCJkaWZmIiwiY2VsbFZhbHVlIiwib3JpZ0xlZnQiLCJyZWRab25lIiwiYWRqdXN0Iiwib3JpZ1oiLCJ6SW5kZXgiLCJfc2V0dXBEcmFnIiwiZHgiLCJkeSIsIm1hbmFnZVNoaWZ0aW5nIiwiY2hhbmdlIiwic2V0VGltZW91dCIsImlzUmlnaHQiLCJzdGFjayIsImRyYWdJdGVtIiwibmV4dFBvcyIsIm5leHRJdGVtIiwicG9wIiwib3JpZ0NvbmZpZyIsIm1lYXN1cmVzTGVuZ3RoIiwiZGltZW5zaW9uc0xlbmd0aCIsImRpbWVuc2lvbnNIb2xkZXIiLCJtZWFzdXJlc0hvbGRlciIsImhhbmRsZXIiLCJoYW5kbGVyMiIsImN1c3RvbUhhbmRsZXIiLCJjbGllbnRYIiwieCIsImNsaWVudFkiLCJ5IiwibW91c2VVcEhhbmRsZXIiLCJvcGFjaXR5IiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZCIsIlByb2R1Y3QiLCJTdGF0ZSIsIlllYXIiLCJNb250aCIsIlF1YWxpdHkiLCJTYWxlIiwiUHJvZml0IiwiVmlzaXRvcnMiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdDSW5CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FFLFdBQ0FFLEdBQUFKLEVBQ0FLLFFBQUEsRUFVQSxPQU5BUCxHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxHQUdBSSxFQUFBRSxRQUFBLEVBR0FGLEVBQUFELFFBdkJBLEdBQUFELEtBcUNBLE9BVEFGLEdBQUFRLEVBQUFULEVBR0FDLEVBQUFTLEVBQUFQLEVBR0FGLEVBQUFVLEVBQUEsR0FHQVYsRUFBQSxLRE1NLFNBQVNJLEVBQVFELFFBQVNILEdBRS9CLFlBRUEsSUFBSVcsR0FBNEIsa0JBQVhDLFNBQW9ELGdCQUFwQkEsUUFBT0MsU0FBd0IsU0FBVUMsR0FBTyxhQUFjQSxJQUFTLFNBQVVBLEdBQU8sTUFBT0EsSUFBeUIsa0JBQVhGLFNBQXlCRSxFQUFJQyxjQUFnQkgsUUFBVUUsSUFBUUYsT0FBT0ksVUFBWSxlQUFrQkYsSUVoRGpRRyxFQUFjakIsRUFBUSxHQUN4QmtCLEVBQU9sQixFQUFRLEdBRWZtQixHQUNBQyxZQUFhLFVBQVcsUUFBUyxTQUNqQ0MsVUFBVyxPQUFRLFNBQVUsWUFDN0JDLFVBQVcsUUFDWEMsY0FBZSxzQkFDZkMsa0JBQW1CLGVBQ25CQyxVQUFXLElBQ1hDLFdBQVksR0FDWkMsWUFBWSxFQUNaQyxrQkFBa0IsRUFFbEJDLGFBQ0lDLE9BQ0lDLFdBQWMsSUFDZEMsV0FBYyxJQUNkQyxhQUFnQixJQUNoQkMsYUFBZ0IsSUFDaEJDLGFB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R1pQLFFBQVcsT0FDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLE9BQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxJQUdaUCxRQUFXLE9BQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEdBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxHQUNSQyxPQUFVLEdBQ1ZDLFNBQVksSUFHWlAsUUFBVyxPQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsT0FDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxJQUdaUCxRQUFXLE9BQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxHQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsR0FDUkMsT0FBVSxHQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxRQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsUUFDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFFBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsT0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxHQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsR0FDVkMsU0FBWSxJQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEdBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxNQUNUQyxRQUFXLE9BQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE9BQ1RDLFFBQVcsT0FDWEMsS0FBUSxHQUNSQyxPQUFVLEVBQ1ZDLFNBQVksSUFHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLFNBQ1hDLEtBQVEsRUFDUkMsT0FBVSxFQUNWQyxTQUFZLElBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsTUFDVEMsUUFBVyxPQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSxLQUdaUCxRQUFXLFFBQ1hDLE1BQVMsU0FDVEMsS0FBUSxPQUNSQyxNQUFTLE1BQ1RDLFFBQVcsU0FDWEMsS0FBUSxFQUNSQyxPQUFVLEVBQ1ZDLFNBQVksS0FHWlAsUUFBVyxRQUNYQyxNQUFTLFNBQ1RDLEtBQVEsT0FDUkMsTUFBUyxPQUNUQyxRQUFXLE9BQ1hDLEtBQVEsR0FDUkMsT0FBVSxFQUNWQyxTQUFZLEtBR1pQLFFBQVcsUUFDWEMsTUFBUyxTQUNUQyxLQUFRLE9BQ1JDLE1BQVMsT0FDVEMsUUFBVyxTQUNYQyxLQUFRLEVBQ1JDLE9BQVUsRUFDVkMsU0FBWSIsImZpbGUiOiJjcm9zc3RhYi1leHQtZXM1Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbi8qKioqKiovIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0bG9hZGVkOiBmYWxzZVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuLyoqKioqKi8gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXHRcblx0dmFyIENyb3NzdGFiRXh0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKSxcblx0ICAgIGRhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIGNvbmZpZyA9IHtcblx0ICAgIGRpbWVuc2lvbnM6IFsnUHJvZHVjdCcsICdTdGF0ZScsICdNb250aCddLFxuXHQgICAgbWVhc3VyZXM6IFsnU2FsZScsICdQcm9maXQnLCAnVmlzaXRvcnMnXSxcblx0ICAgIGNoYXJ0VHlwZTogJ2JhcjJkJyxcblx0ICAgIG5vRGF0YU1lc3NhZ2U6ICdObyBkYXRhIHRvIGRpc3BsYXkuJyxcblx0ICAgIGNyb3NzdGFiQ29udGFpbmVyOiAnY3Jvc3N0YWItZGl2Jyxcblx0ICAgIGNlbGxXaWR0aDogMTUwLFxuXHQgICAgY2VsbEhlaWdodDogODAsXG5cdCAgICBzaG93RmlsdGVyOiB0cnVlLFxuXHQgICAgZHJhZ2dhYmxlSGVhZGVyczogdHJ1ZSxcblx0ICAgIC8vIGFnZ3JlZ2F0aW9uOiAnc3VtJyxcblx0ICAgIGNoYXJ0Q29uZmlnOiB7XG5cdCAgICAgICAgY2hhcnQ6IHtcblx0ICAgICAgICAgICAgJ3Nob3dCb3JkZXInOiAnMCcsXG5cdCAgICAgICAgICAgICdzaG93VmFsdWVzJzogJzAnLFxuXHQgICAgICAgICAgICAnZGl2TGluZUFscGhhJzogJzAnLFxuXHQgICAgICAgICAgICAnbnVtYmVyUHJlZml4JzogJ+KCuScsXG5cdCAgICAgICAgICAgICdyb3RhdGVWYWx1ZXMnOiAnMScsXG5cdCAgICAgICAgICAgICdyb2xsT3ZlckJhbmRDb2xvcic6ICcjYmFkYWYwJyxcblx0ICAgICAgICAgICAgJ2NvbHVtbkhvdmVyQ29sb3InOiAnIzFiODNjYycsXG5cdCAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6ICcyJyxcblx0ICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogJzInLFxuXHQgICAgICAgICAgICAnY2hhcnRMZWZ0TWFyZ2luJzogJzUnLFxuXHQgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6ICc3Jyxcblx0ICAgICAgICAgICAgJ3plcm9QbGFuZVRoaWNrbmVzcyc6ICcwJyxcblx0ICAgICAgICAgICAgJ3plcm9QbGFuZUFscGhhJzogJzEwMCcsXG5cdCAgICAgICAgICAgICdiZ0NvbG9yJzogJyNGRkZGRkYnLFxuXHQgICAgICAgICAgICAnc2hvd1hBeGlzTGluZSc6ICcxJyxcblx0ICAgICAgICAgICAgJ3Bsb3RCb3JkZXJBbHBoYSc6ICcwJyxcblx0ICAgICAgICAgICAgJ3Nob3dYYXhpc1ZhbHVlcyc6ICcwJyxcblx0ICAgICAgICAgICAgJ3Nob3dZQXhpc1ZhbHVlcyc6ICcwJyxcblx0ICAgICAgICAgICAgJ2FuaW1hdGlvbic6ICcxJyxcblx0ICAgICAgICAgICAgJ3RyYW5zcG9zZUFuaW1hdGlvbic6ICcxJyxcblx0ICAgICAgICAgICAgJ2FsdGVybmF0ZUhHcmlkQWxwaGEnOiAnMCcsXG5cdCAgICAgICAgICAgICdwbG90Q29sb3JJblRvb2x0aXAnOiAnMCcsXG5cdCAgICAgICAgICAgICdjYW52YXNCb3JkZXJBbHBoYSc6ICcwJyxcblx0ICAgICAgICAgICAgJ2FsdGVybmF0ZVZHcmlkQWxwaGEnOiAnMCcsXG5cdCAgICAgICAgICAgICdwYWxldHRlQ29sb3JzJzogJyM1QjVCNUInLFxuXHQgICAgICAgICAgICAndXNlUGxvdEdyYWRpZW50Q29sb3InOiAnMCcsXG5cdCAgICAgICAgICAgICd2YWx1ZUZvbnRDb2xvcic6ICcjRkZGRkZGJyxcblx0ICAgICAgICAgICAgJ2NhbnZhc0JvcmRlclRoaWNrbmVzcyc6ICcwJyxcblx0ICAgICAgICAgICAgJ2RyYXdUcmVuZFJlZ2lvbic6ICcxJ1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0fTtcblx0XG5cdGlmICgodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yod2luZG93KSkgPT09ICdvYmplY3QnKSB7XG5cdCAgICB3aW5kb3cuY3Jvc3N0YWIgPSBuZXcgQ3Jvc3N0YWJFeHQoZGF0YSwgY29uZmlnKTtcblx0ICAgIHdpbmRvdy5jcm9zc3RhYi5yZW5kZXJDcm9zc3RhYigpO1xuXHR9IGVsc2Uge1xuXHQgICAgbW9kdWxlLmV4cG9ydHMgPSBDcm9zc3RhYkV4dDtcblx0fVxuXG4vKioqLyB9LFxuLyogMSAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblx0XG5cdGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cdFxuXHQvKipcblx0ICogUmVwcmVzZW50cyBhIGNyb3NzdGFiLlxuXHQgKi9cblx0dmFyIENyb3NzdGFiRXh0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgZnVuY3Rpb24gQ3Jvc3N0YWJFeHQoZGF0YSwgY29uZmlnKSB7XG5cdCAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENyb3NzdGFiRXh0KTtcblx0XG5cdCAgICAgICAgdGhpcy5ldmVudExpc3QgPSB7XG5cdCAgICAgICAgICAgICdtb2RlbFVwZGF0ZWQnOiAnbW9kZWx1cGRhdGVkJyxcblx0ICAgICAgICAgICAgJ21vZGVsRGVsZXRlZCc6ICdtb2RlbGRlbGV0ZWQnLFxuXHQgICAgICAgICAgICAnbWV0YUluZm9VcGRhdGUnOiAnbWV0YWluZm91cGRhdGVkJyxcblx0ICAgICAgICAgICAgJ3Byb2Nlc3NvclVwZGF0ZWQnOiAncHJvY2Vzc29ydXBkYXRlZCcsXG5cdCAgICAgICAgICAgICdwcm9jZXNzb3JEZWxldGVkJzogJ3Byb2Nlc3NvcmRlbGV0ZWQnXG5cdCAgICAgICAgfTtcblx0ICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXHQgICAgICAgIGlmICh0eXBlb2YgTXVsdGlDaGFydGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuXHQgICAgICAgICAgICB0aGlzLm1jID0gbmV3IE11bHRpQ2hhcnRpbmcoKTtcblx0ICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUgPSB0aGlzLm1jLmNyZWF0ZURhdGFTdG9yZSgpO1xuXHQgICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5zZXREYXRhKHsgZGF0YVNvdXJjZTogdGhpcy5kYXRhIH0pO1xuXHQgICAgICAgICAgICB0aGlzLnQxID0gcGVyZm9ybWFuY2Uubm93KCk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgcmV0dXJuIHtcblx0ICAgICAgICAgICAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QoYSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLnN0b3JlUGFyYW1zID0ge1xuXHQgICAgICAgICAgICBkYXRhOiBkYXRhLFxuXHQgICAgICAgICAgICBjb25maWc6IGNvbmZpZ1xuXHQgICAgICAgIH07XG5cdCAgICAgICAgdGhpcy5jaGFydFR5cGUgPSBjb25maWcuY2hhcnRUeXBlO1xuXHQgICAgICAgIHRoaXMuc2hvd0ZpbHRlciA9IGNvbmZpZy5zaG93RmlsdGVyIHx8IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuZHJhZ2dhYmxlSGVhZGVycyA9IGNvbmZpZy5kcmFnZ2FibGVIZWFkZXJzIHx8IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuY2hhcnRDb25maWcgPSBjb25maWcuY2hhcnRDb25maWc7XG5cdCAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gY29uZmlnLmRpbWVuc2lvbnM7XG5cdCAgICAgICAgdGhpcy5tZWFzdXJlcyA9IGNvbmZpZy5tZWFzdXJlcztcblx0ICAgICAgICB0aGlzLm1lYXN1cmVPblJvdyA9IGZhbHNlO1xuXHQgICAgICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHRoaXMuYnVpbGRHbG9iYWxEYXRhKCk7XG5cdCAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcblx0ICAgICAgICB0aGlzLmNlbGxXaWR0aCA9IGNvbmZpZy5jZWxsV2lkdGggfHwgMjEwO1xuXHQgICAgICAgIHRoaXMuY2VsbEhlaWdodCA9IGNvbmZpZy5jZWxsSGVpZ2h0IHx8IDExMztcblx0ICAgICAgICB0aGlzLmNyb3NzdGFiQ29udGFpbmVyID0gY29uZmlnLmNyb3NzdGFiQ29udGFpbmVyO1xuXHQgICAgICAgIHRoaXMuaGFzaCA9IHRoaXMuZ2V0RmlsdGVySGFzaE1hcCgpO1xuXHQgICAgICAgIHRoaXMuY291bnQgPSAwO1xuXHQgICAgICAgIHRoaXMuYWdncmVnYXRpb24gPSBjb25maWcuYWdncmVnYXRpb24gfHwgJ3N1bSc7XG5cdCAgICAgICAgdGhpcy5heGVzID0gW107XG5cdCAgICAgICAgdGhpcy5ub0RhdGFNZXNzYWdlID0gY29uZmlnLm5vRGF0YU1lc3NhZ2U7XG5cdCAgICAgICAgaWYgKHR5cGVvZiBGQ0RhdGFGaWx0ZXJFeHQgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5zaG93RmlsdGVyKSB7XG5cdCAgICAgICAgICAgIHZhciBmaWx0ZXJDb25maWcgPSB7fTtcblx0ICAgICAgICAgICAgdGhpcy5kYXRhRmlsdGVyRXh0ID0gbmV3IEZDRGF0YUZpbHRlckV4dCh0aGlzLmRhdGFTdG9yZSwgZmlsdGVyQ29uZmlnLCAnY29udHJvbC1ib3gnKTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBCdWlsZCBnbG9iYWwgZGF0YSBmcm9tIHRoZSBkYXRhIHN0b3JlIGZvciBpbnRlcm5hbCB1c2UuXG5cdCAgICAgKi9cblx0XG5cdFxuXHQgICAgX2NyZWF0ZUNsYXNzKENyb3NzdGFiRXh0LCBbe1xuXHQgICAgICAgIGtleTogJ2J1aWxkR2xvYmFsRGF0YScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkR2xvYmFsRGF0YSgpIHtcblx0ICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGZpZWxkcyA9IHRoaXMuZGF0YVN0b3JlLmdldEtleXMoKSxcblx0ICAgICAgICAgICAgICAgICAgICBnbG9iYWxEYXRhID0ge307XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBmaWVsZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGdsb2JhbERhdGFbZmllbGRzW2ldXSA9IHRoaXMuZGF0YVN0b3JlLmdldFVuaXF1ZVZhbHVlcyhmaWVsZHNbaV0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGdsb2JhbERhdGE7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY3JlYXRlUm93Jyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlUm93KHRhYmxlLCBkYXRhLCByb3dPcmRlciwgY3VycmVudEluZGV4LCBmaWx0ZXJlZERhdGFTdG9yZSkge1xuXHQgICAgICAgICAgICB2YXIgcm93c3BhbiA9IDAsXG5cdCAgICAgICAgICAgICAgICBmaWVsZENvbXBvbmVudCA9IHJvd09yZGVyW2N1cnJlbnRJbmRleF0sXG5cdCAgICAgICAgICAgICAgICBmaWVsZFZhbHVlcyA9IGRhdGFbZmllbGRDb21wb25lbnRdLFxuXHQgICAgICAgICAgICAgICAgaSxcblx0ICAgICAgICAgICAgICAgIGwgPSBmaWVsZFZhbHVlcy5sZW5ndGgsXG5cdCAgICAgICAgICAgICAgICByb3dFbGVtZW50LFxuXHQgICAgICAgICAgICAgICAgaGFzRnVydGhlckRlcHRoID0gY3VycmVudEluZGV4IDwgcm93T3JkZXIubGVuZ3RoIC0gMSxcblx0ICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YUhhc2hLZXksXG5cdCAgICAgICAgICAgICAgICBjb2xMZW5ndGggPSB0aGlzLmNvbHVtbktleUFyci5sZW5ndGgsXG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLFxuXHQgICAgICAgICAgICAgICAgbWluID0gSW5maW5pdHksXG5cdCAgICAgICAgICAgICAgICBtYXggPSAtSW5maW5pdHksXG5cdCAgICAgICAgICAgICAgICBtaW5tYXhPYmogPSB7fTtcblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjbGFzc1N0ciA9ICcnO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRWYWx1ZXNbaV07XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAodGhpcy5jZWxsSGVpZ2h0IC0gMTApIC8gMiArICdweCc7XG5cdCAgICAgICAgICAgICAgICBjbGFzc1N0ciArPSAncm93LWRpbWVuc2lvbnMnICsgJyAnICsgdGhpcy5kaW1lbnNpb25zW2N1cnJlbnRJbmRleF0udG9Mb3dlckNhc2UoKSArICcgJyArIGZpZWxkVmFsdWVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG5cdCAgICAgICAgICAgICAgICAvLyBpZiAoY3VycmVudEluZGV4ID4gMCkge1xuXHQgICAgICAgICAgICAgICAgLy8gICAgIGh0bWxSZWYuY2xhc3NMaXN0LmFkZCh0aGlzLmRpbWVuc2lvbnNbY3VycmVudEluZGV4IC0gMV0udG9Mb3dlckNhc2UoKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB9XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblx0ICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvcm5lcldpZHRoID0gZmllbGRWYWx1ZXNbaV0ubGVuZ3RoICogMTA7XG5cdCAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuXHQgICAgICAgICAgICAgICAgcm93RWxlbWVudCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jb3JuZXJXaWR0aCxcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1LFxuXHQgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG5cdCAgICAgICAgICAgICAgICBpZiAoaSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3Jvd0VsZW1lbnRdKTtcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChyb3dFbGVtZW50KTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGlmIChoYXNGdXJ0aGVyRGVwdGgpIHtcblx0ICAgICAgICAgICAgICAgICAgICByb3dFbGVtZW50LnJvd3NwYW4gPSB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCArIDEsIGZpbHRlcmVkRGF0YUhhc2hLZXkpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdLnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd5LWF4aXMtY2hhcnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0VG9wTWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydEJvdHRvbU1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZVBhZGRpbmcnOiAwLjVcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhdGVnb3JpZXMnOiBjYXRlZ29yaWVzXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ktYXhpcy1jaGFydCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb2xMZW5ndGg7IGogKz0gMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcnRDZWxsT2JqID0ge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2VsbFdpZHRoLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNlbGxIZWlnaHQsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0hhc2g6IGZpbHRlcmVkRGF0YUhhc2hLZXksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xIYXNoOiB0aGlzLmNvbHVtbktleUFycltqXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYXJ0OiB0aGlzLmdldENoYXJ0T2JqKGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuY29sdW1uS2V5QXJyW2pdKVsxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NoYXJ0LWNlbGwgJyArIChqICsgMSlcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGNvbExlbmd0aCAtIDEpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q2VsbE9iai5jbGFzc05hbWUgPSAnY2hhcnQtY2VsbCBsYXN0LWNvbCc7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChjaGFydENlbGxPYmopO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtaW5tYXhPYmogPSB0aGlzLmdldENoYXJ0T2JqKGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuY29sdW1uS2V5QXJyW2pdKVswXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gcGFyc2VJbnQobWlubWF4T2JqLm1heCkgPiBtYXggPyBtaW5tYXhPYmoubWF4IDogbWF4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBtaW4gPSBwYXJzZUludChtaW5tYXhPYmoubWluKSA8IG1pbiA/IG1pbm1heE9iai5taW4gOiBtaW47XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q2VsbE9iai5tYXggPSBtYXg7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q2VsbE9iai5taW4gPSBtaW47XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgcm93c3BhbiArPSByb3dFbGVtZW50LnJvd3NwYW47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHJvd3NwYW47XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUNvbCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUNvbCh0YWJsZSwgZGF0YSwgbWVhc3VyZU9yZGVyKSB7XG5cdCAgICAgICAgICAgIHZhciBjb2xzcGFuID0gMCxcblx0ICAgICAgICAgICAgICAgIGksXG5cdCAgICAgICAgICAgICAgICBsID0gdGhpcy5tZWFzdXJlcy5sZW5ndGgsXG5cdCAgICAgICAgICAgICAgICBqLFxuXHQgICAgICAgICAgICAgICAgY29sRWxlbWVudCxcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYsXG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYsXG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LFxuXHQgICAgICAgICAgICAgICAgaGFuZGxlU3Bhbjtcblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjbGFzc1N0ciA9ICcnLFxuXHQgICAgICAgICAgICAgICAgICAgIGZpZWxkQ29tcG9uZW50ID0gbWVhc3VyZU9yZGVyW2ldO1xuXHQgICAgICAgICAgICAgICAgLy8gZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XTtcblx0ICAgICAgICAgICAgICAgIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcblx0ICAgICAgICAgICAgICAgIGRyYWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICAgICAgICAgIGRyYWdEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdtZWFzdXJlLWRyYWctaGFuZGxlJyk7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLmhlaWdodCA9ICc1cHgnO1xuXHQgICAgICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nVG9wID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMXB4Jztcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCAyNTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLm1hcmdpbkxlZnQgPSAnMXB4Jztcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLmZvbnRTaXplID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5saW5lSGVpZ2h0ID0gJzEnO1xuXHQgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUudmVydGljYWxBbGlnbiA9ICd0b3AnO1xuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdEaXYuYXBwZW5kQ2hpbGQoaGFuZGxlU3Bhbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRDb21wb25lbnQ7XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAnNXB4Jztcblx0ICAgICAgICAgICAgICAgIC8vIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gKCgzMCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoIC0gMTUpIC8gMikgKyAncHgnO1xuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChodG1sUmVmKTtcblx0XG5cdCAgICAgICAgICAgICAgICBjbGFzc1N0ciArPSAnY29sdW1uLW1lYXN1cmVzICcgKyB0aGlzLm1lYXN1cmVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcblx0ICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG5cdFxuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGRyYWdEaXYpO1xuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuXHQgICAgICAgICAgICAgICAgY29sRWxlbWVudCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jZWxsV2lkdGgsXG5cdCAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzNSxcblx0ICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbDogaGVhZGVyRGl2Lm91dGVySFRNTCxcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG5cdCAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIucHVzaCh0aGlzLm1lYXN1cmVzW2ldKTtcblx0ICAgICAgICAgICAgICAgIHRhYmxlWzBdLnB1c2goY29sRWxlbWVudCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGNvbHNwYW47XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZVJvd0RpbUhlYWRpbmcnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVSb3dEaW1IZWFkaW5nKHRhYmxlLCBjb2xPcmRlckxlbmd0aCkge1xuXHQgICAgICAgICAgICB2YXIgY29ybmVyQ2VsbEFyciA9IFtdLFxuXHQgICAgICAgICAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgICAgICAgICBqLFxuXHQgICAgICAgICAgICAgICAgaHRtbFJlZixcblx0ICAgICAgICAgICAgICAgIGNsYXNzU3RyID0gJycsXG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYsXG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LFxuXHQgICAgICAgICAgICAgICAgaGFuZGxlU3Bhbjtcblx0XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBoZWFkZXJEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0ICAgICAgICAgICAgICAgIGhlYWRlckRpdi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnZGltZW5zaW9uLWRyYWctaGFuZGxlJyk7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLmhlaWdodCA9ICc1cHgnO1xuXHQgICAgICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nVG9wID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdCb3R0b20gPSAnMXB4Jztcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCAyNTsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLm1hcmdpbkxlZnQgPSAnMXB4Jztcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLmZvbnRTaXplID0gJzNweCc7XG5cdCAgICAgICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5saW5lSGVpZ2h0ID0gJzEnO1xuXHQgICAgICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUudmVydGljYWxBbGlnbiA9ICd0b3AnO1xuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdEaXYuYXBwZW5kQ2hpbGQoaGFuZGxlU3Bhbik7XG5cdCAgICAgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gdGhpcy5kaW1lbnNpb25zW2ldWzBdLnRvVXBwZXJDYXNlKCkgKyB0aGlzLmRpbWVuc2lvbnNbaV0uc3Vic3RyKDEpO1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gJzVweCc7XG5cdCAgICAgICAgICAgICAgICBjbGFzc1N0ciA9ICdjb3JuZXItY2VsbCAnICsgdGhpcy5kaW1lbnNpb25zW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG5cdCAgICAgICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGRyYWdEaXYpO1xuXHQgICAgICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuXHQgICAgICAgICAgICAgICAgY29ybmVyQ2VsbEFyci5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25zW2ldLmxlbmd0aCAqIDEwLFxuXHQgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG5cdCAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgIGh0bWw6IGhlYWRlckRpdi5vdXRlckhUTUwsXG5cdCAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuXHQgICAgICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGNvcm5lckNlbGxBcnI7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUNvbERpbUhlYWRpbmcnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDb2xEaW1IZWFkaW5nKHRhYmxlLCBpbmRleCkge1xuXHQgICAgICAgICAgICB2YXIgaSA9IGluZGV4LFxuXHQgICAgICAgICAgICAgICAgaHRtbFJlZjtcblx0ICAgICAgICAgICAgZm9yICg7IGkgPCB0YWJsZS5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblx0ICAgICAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gJyc7XG5cdCAgICAgICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHQgICAgICAgICAgICAgICAgdGFibGVbaV0ucHVzaCh7XG5cdCAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDQwLFxuXHQgICAgICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG5cdCAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgIGh0bWw6IGh0bWxSZWYub3V0ZXJIVE1MLFxuXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F4aXMtaGVhZGVyLWNlbGwnXG5cdCAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gdGFibGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUNhcHRpb24nLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVDYXB0aW9uKHRhYmxlLCBtYXhMZW5ndGgpIHtcblx0ICAgICAgICAgICAgdGFibGUudW5zaGlmdChbe1xuXHQgICAgICAgICAgICAgICAgaGVpZ2h0OiA1MCxcblx0ICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICBjb2xzcGFuOiBtYXhMZW5ndGgsXG5cdCAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdjYXB0aW9uLWNoYXJ0Jyxcblx0ICAgICAgICAgICAgICAgIGNoYXJ0OiB0aGlzLm1jLmNoYXJ0KHtcblx0ICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdjYXB0aW9uJyxcblx0ICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAnZGF0YUZvcm1hdCc6ICdqc29uJyxcblx0ICAgICAgICAgICAgICAgICAgICAnY29uZmlnJzoge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnQnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2FwdGlvbic6ICdTYWxlIG9mIENlcmVhbCcsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3ViY2FwdGlvbic6ICdBY3Jvc3MgU3RhdGVzLCBBY3Jvc3MgWWVhcnMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6ICcwJ1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfSlcblx0ICAgICAgICAgICAgfV0pO1xuXHQgICAgICAgICAgICByZXR1cm4gdGFibGU7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUNyb3NzdGFiJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlQ3Jvc3N0YWIoKSB7XG5cdCAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcblx0ICAgICAgICAgICAgICAgIG9iaiA9IHRoaXMuZ2xvYmFsRGF0YSxcblx0ICAgICAgICAgICAgICAgIHJvd09yZGVyID0gdGhpcy5kaW1lbnNpb25zLmZpbHRlcihmdW5jdGlvbiAodmFsLCBpLCBhcnIpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfSksXG5cdCAgICAgICAgICAgICAgICBjb2xPcmRlciA9IHRoaXMubWVhc3VyZXMuZmlsdGVyKGZ1bmN0aW9uICh2YWwsIGksIGFycikge1xuXHQgICAgICAgICAgICAgICAgaWYgKHNlbGYubWVhc3VyZU9uUm93KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KSxcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gW10sXG5cdCAgICAgICAgICAgICAgICB4QXhpc1JvdyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSAwO1xuXHQgICAgICAgICAgICBpZiAob2JqKSB7XG5cdCAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHRoaXMuY3JlYXRlUm93RGltSGVhZGluZyh0YWJsZSwgY29sT3JkZXIubGVuZ3RoKSk7XG5cdCAgICAgICAgICAgICAgICAvLyB0aGlzLmNyZWF0ZUNvbCh0YWJsZSwgb2JqLCBjb2xPcmRlciwgMCwgJycpO1xuXHQgICAgICAgICAgICAgICAgdGFibGUgPSB0aGlzLmNyZWF0ZUNvbERpbUhlYWRpbmcodGFibGUsIDApO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDb2wodGFibGUsIG9iaiwgdGhpcy5tZWFzdXJlcyk7XG5cdCAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKFtdKTtcblx0ICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUm93KHRhYmxlLCBvYmosIHJvd09yZGVyLCAwLCAnJyk7XG5cdCAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGFibGUubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGggPSBtYXhMZW5ndGggPCB0YWJsZVtpXS5sZW5ndGggPyB0YWJsZVtpXS5sZW5ndGggOiBtYXhMZW5ndGg7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdibGFuay1jZWxsJ1xuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIC8vIEV4dHJhIGNlbGwgZm9yIHkgYXhpcy4gRXNzZW50aWFsbHkgWSBheGlzIGZvb3Rlci5cblx0ICAgICAgICAgICAgICAgIHhBeGlzUm93LnB1c2goe1xuXHQgICAgICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDMwLFxuXHQgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdheGlzLWZvb3Rlci1jZWxsJ1xuXHQgICAgICAgICAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heExlbmd0aCAtIHRoaXMuZGltZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjYXRlZ29yaWVzID0gdGhpcy5nbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpc0hvcml6b250YWwnOiAxXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRMZWZ0TWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0UmlnaHRNYXJnaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWVQYWRkaW5nJzogMC41XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjYXRlZ29yaWVzJzogY2F0ZWdvcmllc1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHhBeGlzUm93KTtcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gdGhpcy5jcmVhdGVDYXB0aW9uKHRhYmxlLCBtYXhMZW5ndGgpO1xuXHQgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3tcblx0ICAgICAgICAgICAgICAgICAgICBodG1sOiAnPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj4nICsgdGhpcy5ub0RhdGFNZXNzYWdlICsgJzwvcD4nLFxuXHQgICAgICAgICAgICAgICAgICAgIGhlaWdodDogNTAsXG5cdCAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAqIHRoaXMubWVhc3VyZXMubGVuZ3RoXG5cdCAgICAgICAgICAgICAgICB9XSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRhYmxlO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyb3dEaW1SZW9yZGVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcm93RGltUmVvcmRlcihzdWJqZWN0LCB0YXJnZXQpIHtcblx0ICAgICAgICAgICAgdmFyIGJ1ZmZlciA9ICcnLFxuXHQgICAgICAgICAgICAgICAgaSxcblx0ICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLmRpbWVuc2lvbnM7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1lYXN1cmVPblJvdyA9PT0gdHJ1ZSkge1xuXHQgICAgICAgICAgICAgICAgZGltZW5zaW9ucy5zcGxpY2UoZGltZW5zaW9ucy5sZW5ndGggLSAxLCAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAoZGltZW5zaW9ucy5pbmRleE9mKE1hdGgubWF4KHN1YmplY3QsIHRhcmdldCkpID49IGRpbWVuc2lvbnMubGVuZ3RoKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJ3dyb25nIGluZGV4Jztcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0ID4gdGFyZ2V0KSB7XG5cdCAgICAgICAgICAgICAgICBidWZmZXIgPSBkaW1lbnNpb25zW3N1YmplY3RdO1xuXHQgICAgICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCAtIDE7IGkgPj0gdGFyZ2V0OyBpLS0pIHtcblx0ICAgICAgICAgICAgICAgICAgICBkaW1lbnNpb25zW2kgKyAxXSA9IGRpbWVuc2lvbnNbaV07XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICBkaW1lbnNpb25zW3RhcmdldF0gPSBidWZmZXI7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ViamVjdCA8IHRhcmdldCkge1xuXHQgICAgICAgICAgICAgICAgYnVmZmVyID0gZGltZW5zaW9uc1tzdWJqZWN0XTtcblx0ICAgICAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgKyAxOyBpIDw9IHRhcmdldDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZGltZW5zaW9uc1tpIC0gMV0gPSBkaW1lbnNpb25zW2ldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgZGltZW5zaW9uc1t0YXJnZXRdID0gYnVmZmVyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnY29sRGltUmVvcmRlcicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbERpbVJlb3JkZXIoc3ViamVjdCwgdGFyZ2V0KSB7XG5cdCAgICAgICAgICAgIHZhciBidWZmZXIgPSAnJyxcblx0ICAgICAgICAgICAgICAgIGksXG5cdCAgICAgICAgICAgICAgICBtZWFzdXJlcyA9IHRoaXMubWVhc3VyZXM7XG5cdCAgICAgICAgICAgIGlmICh0aGlzLm1lYXN1cmVPblJvdyA9PT0gZmFsc2UpIHtcblx0ICAgICAgICAgICAgICAgIG1lYXN1cmVzLnNwbGljZShtZWFzdXJlcy5sZW5ndGggLSAxLCAxKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBpZiAobWVhc3VyZXMuaW5kZXhPZihNYXRoLm1heChzdWJqZWN0LCB0YXJnZXQpKSA+PSBtZWFzdXJlcy5sZW5ndGgpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiAnd3JvbmcgaW5kZXgnO1xuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHN1YmplY3QgPiB0YXJnZXQpIHtcblx0ICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG1lYXN1cmVzW3N1YmplY3RdO1xuXHQgICAgICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCAtIDE7IGkgPj0gdGFyZ2V0OyBpLS0pIHtcblx0ICAgICAgICAgICAgICAgICAgICBtZWFzdXJlc1tpICsgMV0gPSBtZWFzdXJlc1tpXTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIG1lYXN1cmVzW3RhcmdldF0gPSBidWZmZXI7XG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoc3ViamVjdCA8IHRhcmdldCkge1xuXHQgICAgICAgICAgICAgICAgYnVmZmVyID0gbWVhc3VyZXNbc3ViamVjdF07XG5cdCAgICAgICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0ICsgMTsgaSA8PSB0YXJnZXQ7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIG1lYXN1cmVzW2kgLSAxXSA9IG1lYXN1cmVzW2ldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgbWVhc3VyZXNbdGFyZ2V0XSA9IGJ1ZmZlcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmNyZWF0ZUNyb3NzdGFiKCk7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ21lcmdlRGltZW5zaW9ucycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1lcmdlRGltZW5zaW9ucygpIHtcblx0ICAgICAgICAgICAgdmFyIGRpbWVuc2lvbnMgPSBbXTtcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICBkaW1lbnNpb25zLnB1c2godGhpcy5kaW1lbnNpb25zW2ldKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9sID0gdGhpcy5tZWFzdXJlcy5sZW5ndGg7IF9pIDwgX2w7IF9pKyspIHtcblx0ICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMucHVzaCh0aGlzLm1lYXN1cmVzW19pXSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIGRpbWVuc2lvbnM7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZUZpbHRlcnMnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVGaWx0ZXJzKCkge1xuXHQgICAgICAgICAgICB2YXIgZmlsdGVycyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgICAgICAgICBpaSA9IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxLFxuXHQgICAgICAgICAgICAgICAgaiA9IDAsXG5cdCAgICAgICAgICAgICAgICBqaiA9IDAsXG5cdCAgICAgICAgICAgICAgICBtYXRjaGVkVmFsdWVzID0gdm9pZCAwO1xuXHRcblx0ICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIG1hdGNoZWRWYWx1ZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW2ldXTtcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gbWF0Y2hlZFZhbHVlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB0aGlzLmZpbHRlckdlbih0aGlzLmRpbWVuc2lvbnNbaV0sIG1hdGNoZWRWYWx1ZXNbal0udG9TdHJpbmcoKSksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclZhbDogbWF0Y2hlZFZhbHVlc1tqXVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBmaWx0ZXJzO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdjcmVhdGVEYXRhQ29tYm9zJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRGF0YUNvbWJvcygpIHtcblx0ICAgICAgICAgICAgdmFyIHIgPSBbXSxcblx0ICAgICAgICAgICAgICAgIGdsb2JhbEFycmF5ID0gdGhpcy5tYWtlR2xvYmFsQXJyYXkoKSxcblx0ICAgICAgICAgICAgICAgIG1heCA9IGdsb2JhbEFycmF5Lmxlbmd0aCAtIDE7XG5cdFxuXHQgICAgICAgICAgICBmdW5jdGlvbiByZWN1cnNlKGFyciwgaSkge1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGwgPSBnbG9iYWxBcnJheVtpXS5sZW5ndGg7IGogPCBsOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGFyci5zbGljZSgwKTtcblx0ICAgICAgICAgICAgICAgICAgICBhLnB1c2goZ2xvYmFsQXJyYXlbaV1bal0pO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBtYXgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKGEpO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2UoYSwgaSArIDEpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZWN1cnNlKFtdLCAwKTtcblx0ICAgICAgICAgICAgcmV0dXJuIHI7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ21ha2VHbG9iYWxBcnJheScsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VHbG9iYWxBcnJheSgpIHtcblx0ICAgICAgICAgICAgdmFyIHRlbXBPYmogPSB7fSxcblx0ICAgICAgICAgICAgICAgIHRlbXBBcnIgPSBbXTtcblx0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmdsb2JhbERhdGEpIHtcblx0ICAgICAgICAgICAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBrZXkgIT09IHRoaXMubWVhc3VyZSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRlbXBPYmpba2V5XSA9IHRoaXMuZ2xvYmFsRGF0YVtrZXldO1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHRlbXBBcnIgPSBPYmplY3Qua2V5cyh0ZW1wT2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBPYmpba2V5XTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIHJldHVybiB0ZW1wQXJyO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXRGaWx0ZXJIYXNoTWFwJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVySGFzaE1hcCgpIHtcblx0ICAgICAgICAgICAgdmFyIGZpbHRlcnMgPSB0aGlzLmNyZWF0ZUZpbHRlcnMoKSxcblx0ICAgICAgICAgICAgICAgIGRhdGFDb21ib3MgPSB0aGlzLmNyZWF0ZURhdGFDb21ib3MoKSxcblx0ICAgICAgICAgICAgICAgIGhhc2hNYXAgPSB7fTtcblx0XG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZGF0YUNvbWJvcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBkYXRhQ29tYm8gPSBkYXRhQ29tYm9zW2ldLFxuXHQgICAgICAgICAgICAgICAgICAgIGtleSA9ICcnLFxuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gW107XG5cdFxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGxlbiA9IGRhdGFDb21iby5sZW5ndGg7IGogPCBsZW47IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBsZW5ndGggPSBmaWx0ZXJzLmxlbmd0aDsgayA8IGxlbmd0aDsgaysrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJWYWwgPSBmaWx0ZXJzW2tdLmZpbHRlclZhbDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFDb21ib1tqXSA9PT0gZmlsdGVyVmFsKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PT0gMCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSArPSBkYXRhQ29tYm9bal07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSArPSAnfCcgKyBkYXRhQ29tYm9bal07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS5wdXNoKGZpbHRlcnNba10uZmlsdGVyKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHJldHVybiBoYXNoTWFwO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdyZW5kZXJDcm9zc3RhYicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckNyb3NzdGFiKCkge1xuXHQgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgICAgICAgdmFyIHQyID0gcGVyZm9ybWFuY2Uubm93KCksXG5cdCAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSAtSW5maW5pdHksXG5cdCAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSBJbmZpbml0eSxcblx0ICAgICAgICAgICAgICAgIHlBeGlzID0gdm9pZCAwO1xuXHQgICAgICAgICAgICB0aGlzLmNyb3NzdGFiID0gdGhpcy5jcmVhdGVDcm9zc3RhYigpO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciByb3dMYXN0Q2hhcnQgPSB0aGlzLmNyb3NzdGFiW2ldW3RoaXMuY3Jvc3N0YWJbaV0ubGVuZ3RoIC0gMV07XG5cdCAgICAgICAgICAgICAgICBpZiAocm93TGFzdENoYXJ0Lm1heCB8fCByb3dMYXN0Q2hhcnQubWluKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbE1heCA8IHJvd0xhc3RDaGFydC5tYXgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWF4ID0gcm93TGFzdENoYXJ0Lm1heDtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbE1pbiA+IHJvd0xhc3RDaGFydC5taW4pIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWluID0gcm93TGFzdENoYXJ0Lm1pbjtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX2lpID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IF9pMiA8IF9paTsgX2kyKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciByb3cgPSB0aGlzLmNyb3NzdGFiW19pMl0sXG5cdCAgICAgICAgICAgICAgICAgICAgcm93QXhpcyA9IHZvaWQgMDtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNyb3NzdGFiRWxlbWVudCA9IHJvd1tqXTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY3Jvc3N0YWJFbGVtZW50LmNoYXJ0ICYmIGNyb3NzdGFiRWxlbWVudC5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3dBeGlzID0gY3Jvc3N0YWJFbGVtZW50O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm93QXhpcy5jaGFydC5jb25mLmNvbmZpZy5jaGFydC5heGlzVHlwZSA9PT0gJ3knKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXhpc0NoYXJ0ID0gcm93QXhpcy5jaGFydCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBheGlzQ2hhcnQuY29uZjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jb25maWcuY2hhcnQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNaW4nOiBnbG9iYWxNaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydEJvdHRvbU1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRCb3R0b21NYXJnaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydFRvcE1hcmdpblxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5jb25maWcuY2hhcnQgPSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWF4JzogZ2xvYmFsTWF4LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRMZWZ0TWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRSaWdodE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRSaWdodE1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDFcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXhpc0NoYXJ0ID0gdGhpcy5tYy5jaGFydChjb25maWcpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93QXhpcy5jaGFydCA9IGF4aXNDaGFydDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB0aGlzLmNyZWF0ZU11bHRpQ2hhcnQodGhpcy5jcm9zc3RhYik7XG5cdCAgICAgICAgICAgIGZvciAodmFyIF9pMyA9IDAsIF9paTIgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgX2kzIDwgX2lpMjsgX2kzKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBfcm93ID0gdGhpcy5jcm9zc3RhYltfaTNdO1xuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ogPSAwLCBfamogPSBfcm93Lmxlbmd0aDsgX2ogPCBfamo7IF9qKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgX2Nyb3NzdGFiRWxlbWVudCA9IF9yb3dbX2pdO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICgheUF4aXMgJiYgX2Nyb3NzdGFiRWxlbWVudC5jaGFydCAmJiBfY3Jvc3N0YWJFbGVtZW50LmNoYXJ0LmNvbmYuY29uZmlnLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeUF4aXMgPSBfY3Jvc3N0YWJFbGVtZW50O1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBmb3IgKHZhciBfaTQgPSAwLCBfaWkzID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IF9pNCA8IF9paTM7IF9pNCsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgX3JvdzIgPSB0aGlzLmNyb3NzdGFiW19pNF07XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBfajIgPSAwLCBfamoyID0gX3JvdzIubGVuZ3RoOyBfajIgPCBfamoyOyBfajIrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfY3Jvc3N0YWJFbGVtZW50MiA9IF9yb3cyW19qMl07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHlBeGlzKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2Nyb3NzdGFiRWxlbWVudDIuaGFzT3duUHJvcGVydHkoJ2h0bWwnKSAmJiAhX2Nyb3NzdGFiRWxlbWVudDIuaGFzT3duUHJvcGVydHkoJ2NoYXJ0JykgJiYgX2Nyb3NzdGFiRWxlbWVudDIuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcgJiYgX2Nyb3NzdGFiRWxlbWVudDIuY2xhc3NOYW1lICE9PSAnYXhpcy1mb290ZXItY2VsbCcpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFydCA9IHlBeGlzLmNoYXJ0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0SW5zdGFuY2UgPSBjaGFydC5nZXRDaGFydEluc3RhbmNlKCksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRzID0gY2hhcnRJbnN0YW5jZS5nZXRMaW1pdHMoKSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5MaW1pdCA9IGxpbWl0c1swXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMaW1pdCA9IGxpbWl0c1sxXSxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydE9iaiA9IHRoaXMuZ2V0Q2hhcnRPYmooX2Nyb3NzdGFiRWxlbWVudDIucm93SGFzaCwgX2Nyb3NzdGFiRWxlbWVudDIuY29sSGFzaCwgbWluTGltaXQsIG1heExpbWl0KVsxXTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jcm9zc3RhYkVsZW1lbnQyLmNoYXJ0ID0gY2hhcnRPYmo7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY3RQZXJmICs9IHBlcmZvcm1hbmNlLm5vdygpIC0gdDI7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgdDIgPSBwZXJmb3JtYW5jZS5ub3coKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdGhpcy5jcmVhdGVNdWx0aUNoYXJ0KHRoaXMuY3Jvc3N0YWIpO1xuXHQgICAgICAgICAgICB0aGlzLmRhdGFTdG9yZS5hZGRFdmVudExpc3RlbmVyKHRoaXMuZXZlbnRMaXN0Lm1vZGVsVXBkYXRlZCwgZnVuY3Rpb24gKGUsIGQpIHtcblx0ICAgICAgICAgICAgICAgIF90aGlzLmdsb2JhbERhdGEgPSBfdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcblx0ICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZUNyb3NzdGFiKCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICB0aGlzLm1jLmFkZEV2ZW50TGlzdGVuZXIoJ2hvdmVyaW4nLCBmdW5jdGlvbiAoZXZ0LCBkYXRhKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAoZGF0YS5kYXRhKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k1ID0gMCwgX2lpNCA9IF90aGlzLmNyb3NzdGFiLmxlbmd0aDsgX2k1IDwgX2lpNDsgX2k1KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yb3czID0gX3RoaXMuY3Jvc3N0YWJbX2k1XTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBfcm93My5sZW5ndGg7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9yb3czW2pdLmNoYXJ0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX3JvdzNbal0uY2hhcnQuY29uZi50eXBlID09PSAnY2FwdGlvbicgfHwgX3JvdzNbal0uY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsQWRhcHRlciA9IF9yb3czW2pdLmNoYXJ0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSBfdGhpcy5kaW1lbnNpb25zW190aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVZhbCA9IGRhdGEuZGF0YVtjYXRlZ29yeV07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxBZGFwdGVyLmhpZ2hsaWdodChjYXRlZ29yeVZhbCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3Zlcm91dCcsIGZ1bmN0aW9uIChldnQsIGRhdGEpIHtcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNiA9IDAsIF9paTUgPSBfdGhpcy5jcm9zc3RhYi5sZW5ndGg7IF9pNiA8IF9paTU7IF9pNisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIF9yb3c0ID0gX3RoaXMuY3Jvc3N0YWJbX2k2XTtcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IF9yb3c0Lmxlbmd0aDsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcm93NFtqXS5jaGFydCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX3JvdzRbal0uY2hhcnQuY29uZi50eXBlID09PSAnY2FwdGlvbicgfHwgX3JvdzRbal0uY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxBZGFwdGVyID0gX3JvdzRbal0uY2hhcnQ7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFkYXB0ZXIuaGlnaGxpZ2h0KCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICd1cGRhdGVDcm9zc3RhYicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZUNyb3NzdGFiKCkge1xuXHQgICAgICAgICAgICB2YXIgZmlsdGVyZWRDcm9zc3RhYiA9IHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKSxcblx0ICAgICAgICAgICAgICAgIGkgPSB2b2lkIDAsXG5cdCAgICAgICAgICAgICAgICBpaSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGogPSB2b2lkIDAsXG5cdCAgICAgICAgICAgICAgICBqaiA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIG9sZENoYXJ0cyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgZ2xvYmFsTWF4ID0gLUluZmluaXR5LFxuXHQgICAgICAgICAgICAgICAgZ2xvYmFsTWluID0gSW5maW5pdHksXG5cdCAgICAgICAgICAgICAgICBheGlzTGltaXRzID0gW107XG5cdCAgICAgICAgICAgIGZvciAoaSA9IDAsIGlpID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5jcm9zc3RhYltpXTtcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHJvd1tqXTtcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbC5jaGFydCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhcnRDb25mID0gY2VsbC5jaGFydC5nZXRDb25mKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFydENvbmYudHlwZSAhPT0gJ2NhcHRpb24nICYmIGNoYXJ0Q29uZi50eXBlICE9PSAnYXhpcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZENoYXJ0cy5wdXNoKGNlbGwpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGZpbHRlcmVkQ3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIF9yb3c1ID0gZmlsdGVyZWRDcm9zc3RhYltpXTtcblx0ICAgICAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gX3JvdzUubGVuZ3RoOyBqIDwgamo7IGorKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBfY2VsbCA9IF9yb3c1W2pdO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChfY2VsbC5yb3dIYXNoICYmIF9jZWxsLmNvbEhhc2gpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZENoYXJ0ID0gdGhpcy5nZXRPbGRDaGFydChvbGRDaGFydHMsIF9jZWxsLnJvd0hhc2gsIF9jZWxsLmNvbEhhc2gpLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRzID0ge307XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2xkQ2hhcnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFydE9iaiA9IHRoaXMuZ2V0Q2hhcnRPYmooX2NlbGwucm93SGFzaCwgX2NlbGwuY29sSGFzaCk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRDaGFydCA9IGNoYXJ0T2JqWzFdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRzID0gY2hhcnRPYmpbMF07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgX2NlbGwuY2hhcnQgPSBvbGRDaGFydDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5rZXlzKGxpbWl0cykubGVuZ3RoICE9PSAwKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY2VsbC5tYXggPSBsaW1pdHMubWF4O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NlbGwubWluID0gbGltaXRzLm1pbjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBmaWx0ZXJlZENyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBfcm93NiA9IGZpbHRlcmVkQ3Jvc3N0YWJbaV07XG5cdCAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IF9yb3c2Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgX2NlbGwyID0gX3JvdzZbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKF9jZWxsMi5tYXggfHwgX2NlbGwyLm1pbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWF4IDwgX2NlbGwyLm1heCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWF4ID0gX2NlbGwyLm1heDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWluID4gX2NlbGwyLm1pbikge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWluID0gX2NlbGwyLm1pbjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgZm9yIChpID0gMCwgaWkgPSBmaWx0ZXJlZENyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgIHZhciBfcm93NyA9IGZpbHRlcmVkQ3Jvc3N0YWJbaV07XG5cdCAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IF9yb3c3Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgX2NlbGwzID0gX3Jvdzdbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKF9jZWxsMy5jaGFydCAmJiBfY2VsbDMuY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd0F4aXMgPSBfY2VsbDM7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dBeGlzLmNoYXJ0LmNvbmYuY29uZmlnLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBheGlzQ2hhcnQgPSByb3dBeGlzLmNoYXJ0LFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IGF4aXNDaGFydC5jb25mO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmNvbmZpZy5jaGFydCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1pbic6IGdsb2JhbE1pbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNYXgnOiBnbG9iYWxNYXgsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydEJvdHRvbU1hcmdpbixcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0VG9wTWFyZ2luXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnRUeXBlID09PSAnYmFyMmQnKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmNvbmZpZy5jaGFydCA9IHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNaW4nOiBnbG9iYWxNaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5Jyxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNYXgnOiBnbG9iYWxNYXgsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRMZWZ0TWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydExlZnRNYXJnaW4sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFJpZ2h0TWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydFJpZ2h0TWFyZ2luLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXNIb3Jpem9udGFsJzogMVxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzQ2hhcnQgPSB0aGlzLm1jLmNoYXJ0KGNvbmZpZyk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dBeGlzLmNoYXJ0ID0gYXhpc0NoYXJ0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICB0aGlzLmNyb3NzdGFiID0gZmlsdGVyZWRDcm9zc3RhYjtcblx0ICAgICAgICAgICAgdGhpcy5jcmVhdGVNdWx0aUNoYXJ0KCk7XG5cdCAgICAgICAgICAgIGF4aXNMaW1pdHMgPSB0aGlzLmdldFlBeGlzTGltaXRzKCk7XG5cdFxuXHQgICAgICAgICAgICBmb3IgKHZhciBfaTcgPSAwLCBfaWk2ID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IF9pNyA8IF9paTY7IF9pNysrKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgX3JvdzggPSB0aGlzLmNyb3NzdGFiW19pN107XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBfajMgPSAwLCBfamozID0gX3JvdzgubGVuZ3RoOyBfajMgPCBfamozOyBfajMrKykge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjcm9zc3RhYkVsZW1lbnQgPSBfcm93OFtfajNdO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmICghY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdodG1sJykgJiYgY3Jvc3N0YWJFbGVtZW50LmNsYXNzTmFtZSAhPT0gJ2JsYW5rLWNlbGwnICYmIGNyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdheGlzLWZvb3Rlci1jZWxsJyAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuZ2V0Q29uZigpLnR5cGUgIT09ICdjYXB0aW9uJyAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuZ2V0Q29uZigpLnR5cGUgIT09ICdheGlzJykge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2NoYXJ0T2JqID0gdGhpcy5nZXRDaGFydE9iaihjcm9zc3RhYkVsZW1lbnQucm93SGFzaCwgY3Jvc3N0YWJFbGVtZW50LmNvbEhhc2gsIGF4aXNMaW1pdHNbMF0sIGF4aXNMaW1pdHNbMV0pWzFdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQudXBkYXRlKF9jaGFydE9iai5nZXRDb25mKCkpO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXRZQXhpc0xpbWl0cycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFlBeGlzTGltaXRzKCkge1xuXHQgICAgICAgICAgICB2YXIgaSA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGlpID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgaiA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIGpqID0gdm9pZCAwO1xuXHQgICAgICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuXHQgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG5cdCAgICAgICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGwgPSByb3dbal07XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwuY2hhcnQpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYXJ0Q29uZiA9IGNlbGwuY2hhcnQuZ2V0Q29uZigpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhcnRDb25mLnR5cGUgPT09ICdheGlzJyAmJiBjaGFydENvbmYuY29uZmlnLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsLmNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKS5nZXRMaW1pdHMoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdnZXRPbGRDaGFydCcsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9sZENoYXJ0KG9sZENoYXJ0cywgcm93SGFzaCwgY29sSGFzaCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gb2xkQ2hhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdCAgICAgICAgICAgICAgICBpZiAob2xkQ2hhcnRzW2ldLnJvd0hhc2ggPT09IHJvd0hhc2ggJiYgb2xkQ2hhcnRzW2ldLmNvbEhhc2ggPT09IGNvbEhhc2gpIHtcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkQ2hhcnRzW2ldLmNoYXJ0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2NyZWF0ZU11bHRpQ2hhcnQnLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVNdWx0aUNoYXJ0KCkge1xuXHQgICAgICAgICAgICBpZiAodGhpcy5tdWx0aWNoYXJ0T2JqZWN0ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdCA9IHRoaXMubWMuY3JlYXRlTWF0cml4KHRoaXMuY3Jvc3N0YWJDb250YWluZXIsIHRoaXMuY3Jvc3N0YWIpO1xuXHQgICAgICAgICAgICAgICAgd2luZG93LmN0UGVyZiA9IHBlcmZvcm1hbmNlLm5vdygpIC0gdGhpcy50MTtcblx0ICAgICAgICAgICAgICAgIHRoaXMubXVsdGljaGFydE9iamVjdC5kcmF3KCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QudXBkYXRlKHRoaXMuY3Jvc3N0YWIpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZUhlYWRlcnMpIHtcblx0ICAgICAgICAgICAgICAgIHRoaXMuZHJhZ0xpc3RlbmVyKHRoaXMubXVsdGljaGFydE9iamVjdC5wbGFjZUhvbGRlcik7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMubXVsdGljaGFydE9iamVjdC5wbGFjZUhvbGRlcjtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAncGVybXV0ZUFycicsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBlcm11dGVBcnIoYXJyKSB7XG5cdCAgICAgICAgICAgIHZhciByZXN1bHRzID0gW107XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHBlcm11dGUoYXJyLCBtZW0pIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdm9pZCAwO1xuXHQgICAgICAgICAgICAgICAgbWVtID0gbWVtIHx8IFtdO1xuXHRcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGFyci5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGFyci5zcGxpY2UoaSwgMSk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGFyci5sZW5ndGggPT09IDApIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG1lbS5jb25jYXQoY3VycmVudCkuam9pbignfCcpKTtcblx0ICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgcGVybXV0ZShhcnIuc2xpY2UoKSwgbWVtLmNvbmNhdChjdXJyZW50KSk7XG5cdCAgICAgICAgICAgICAgICAgICAgYXJyLnNwbGljZShpLCAwLCBjdXJyZW50WzBdKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIHZhciBwZXJtdXRlU3RycyA9IHBlcm11dGUoYXJyKTtcblx0ICAgICAgICAgICAgcmV0dXJuIHBlcm11dGVTdHJzLmpvaW4oJyohJV4nKTtcblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnbWF0Y2hIYXNoJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2hIYXNoKGZpbHRlclN0ciwgaGFzaCkge1xuXHQgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaGFzaCkge1xuXHQgICAgICAgICAgICAgICAgaWYgKGhhc2guaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0ga2V5LnNwbGl0KCd8JyksXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGtleVBlcm11dGF0aW9ucyA9IHRoaXMucGVybXV0ZUFycihrZXlzKS5zcGxpdCgnKiElXicpO1xuXHQgICAgICAgICAgICAgICAgICAgIGlmIChrZXlQZXJtdXRhdGlvbnMuaW5kZXhPZihmaWx0ZXJTdHIpICE9PSAtMSkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5UGVybXV0YXRpb25zWzBdO1xuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXHQgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICAgICAgfVxuXHQgICAgfSwge1xuXHQgICAgICAgIGtleTogJ2dldENoYXJ0T2JqJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2hhcnRPYmoocm93RmlsdGVyLCBjb2xGaWx0ZXIsIG1pbkxpbWl0LCBtYXhMaW1pdCkge1xuXHQgICAgICAgICAgICB2YXIgZmlsdGVycyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgZmlsdGVyU3RyID0gJycsXG5cdCAgICAgICAgICAgICAgICByb3dGaWx0ZXJzID0gcm93RmlsdGVyLnNwbGl0KCd8JyksXG5cdCAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29ycyA9IFtdLFxuXHQgICAgICAgICAgICAgICAgZGF0YVByb2Nlc3NvciA9IHt9LFxuXHQgICAgICAgICAgICAgICAgbWF0Y2hlZEhhc2hlcyA9IFtdLFxuXHRcblx0ICAgICAgICAgICAgLy8gZmlsdGVyZWRKU09OID0gW10sXG5cdCAgICAgICAgICAgIC8vIG1heCA9IC1JbmZpbml0eSxcblx0ICAgICAgICAgICAgLy8gbWluID0gSW5maW5pdHksXG5cdCAgICAgICAgICAgIGZpbHRlcmVkRGF0YSA9IHt9LFxuXHRcblx0ICAgICAgICAgICAgLy8gYWRhcHRlciA9IHt9LFxuXHQgICAgICAgICAgICBsaW1pdHMgPSB7fSxcblx0ICAgICAgICAgICAgICAgIGNoYXJ0ID0ge30sXG5cdCAgICAgICAgICAgICAgICBjYXRlZ29yaWVzID0gdGhpcy5nbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dO1xuXHRcblx0ICAgICAgICAgICAgcm93RmlsdGVycy5wdXNoLmFwcGx5KHJvd0ZpbHRlcnMpO1xuXHQgICAgICAgICAgICBmaWx0ZXJzID0gcm93RmlsdGVycy5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBhICE9PSAnJztcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGZpbHRlclN0ciA9IGZpbHRlcnMuam9pbignfCcpO1xuXHQgICAgICAgICAgICBtYXRjaGVkSGFzaGVzID0gdGhpcy5oYXNoW3RoaXMubWF0Y2hIYXNoKGZpbHRlclN0ciwgdGhpcy5oYXNoKV07XG5cdCAgICAgICAgICAgIGlmIChtYXRjaGVkSGFzaGVzKSB7XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBtYXRjaGVkSGFzaGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBkYXRhUHJvY2Vzc29yID0gdGhpcy5tYy5jcmVhdGVEYXRhUHJvY2Vzc29yKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0YVByb2Nlc3Nvci5maWx0ZXIobWF0Y2hlZEhhc2hlc1tpXSk7XG5cdCAgICAgICAgICAgICAgICAgICAgZGF0YVByb2Nlc3NvcnMucHVzaChkYXRhUHJvY2Vzc29yKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIGZpbHRlcmVkRGF0YSA9IHRoaXMuZGF0YVN0b3JlLmdldENoaWxkTW9kZWwoZGF0YVByb2Nlc3NvcnMpO1xuXHQgICAgICAgICAgICAgICAgLy8gZmlsdGVyZWRKU09OID0gZmlsdGVyZWREYXRhLmdldEpTT04oKTtcblx0ICAgICAgICAgICAgICAgIC8vIGZvciAobGV0IGkgPSAwLCBpaSA9IGZpbHRlcmVkSlNPTi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgICAvLyAgICAgaWYgKGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdID4gbWF4KSB7XG5cdCAgICAgICAgICAgICAgICAvLyAgICAgICAgIG1heCA9IGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdO1xuXHQgICAgICAgICAgICAgICAgLy8gICAgIH1cblx0ICAgICAgICAgICAgICAgIC8vICAgICBpZiAoZmlsdGVyZWRKU09OW2ldW2NvbEZpbHRlcl0gPCBtaW4pIHtcblx0ICAgICAgICAgICAgICAgIC8vICAgICAgICAgbWluID0gZmlsdGVyZWRKU09OW2ldW2NvbEZpbHRlcl07XG5cdCAgICAgICAgICAgICAgICAvLyAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gfVxuXHQgICAgICAgICAgICAgICAgaWYgKG1pbkxpbWl0ICE9PSB1bmRlZmluZWQgJiYgbWF4TGltaXQgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRDb25maWcuY2hhcnQueUF4aXNNaW5WYWx1ZSA9IG1pbkxpbWl0O1xuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhcnRDb25maWcuY2hhcnQueUF4aXNNYXhWYWx1ZSA9IG1heExpbWl0O1xuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgY2hhcnQgPSB0aGlzLm1jLmNoYXJ0KHtcblx0ICAgICAgICAgICAgICAgICAgICBkYXRhU291cmNlOiBmaWx0ZXJlZERhdGEsXG5cdCAgICAgICAgICAgICAgICAgICAgdHlwZTogdGhpcy5jaGFydFR5cGUsXG5cdCAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcblx0ICAgICAgICAgICAgICAgICAgICBkaW1lbnNpb246IFt0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdXSxcblx0ICAgICAgICAgICAgICAgICAgICBtZWFzdXJlOiBbY29sRmlsdGVyXSxcblx0ICAgICAgICAgICAgICAgICAgICBzZXJpZXNUeXBlOiAnU1MnLFxuXHQgICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZU1vZGU6IHRoaXMuYWdncmVnYXRpb24sXG5cdCAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllczogY2F0ZWdvcmllcyxcblx0ICAgICAgICAgICAgICAgICAgICBjb25maWc6IHRoaXMuY2hhcnRDb25maWdcblx0ICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgbGltaXRzID0gY2hhcnQuZ2V0TGltaXQoKTtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBbe1xuXHQgICAgICAgICAgICAgICAgICAgICdtYXgnOiBsaW1pdHMubWF4LFxuXHQgICAgICAgICAgICAgICAgICAgICdtaW4nOiBsaW1pdHMubWluXG5cdCAgICAgICAgICAgICAgICB9LCBjaGFydF07XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnZHJhZ0xpc3RlbmVyJyxcblx0ICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZHJhZ0xpc3RlbmVyKHBsYWNlSG9sZGVyKSB7XG5cdCAgICAgICAgICAgIC8vIEdldHRpbmcgb25seSBsYWJlbHNcblx0ICAgICAgICAgICAgdmFyIG9yaWdDb25maWcgPSB0aGlzLnN0b3JlUGFyYW1zLmNvbmZpZyxcblx0ICAgICAgICAgICAgICAgIGRpbWVuc2lvbnMgPSBvcmlnQ29uZmlnLmRpbWVuc2lvbnMgfHwgW10sXG5cdCAgICAgICAgICAgICAgICBtZWFzdXJlcyA9IG9yaWdDb25maWcubWVhc3VyZXMgfHwgW10sXG5cdCAgICAgICAgICAgICAgICBtZWFzdXJlc0xlbmd0aCA9IG1lYXN1cmVzLmxlbmd0aCxcblx0ICAgICAgICAgICAgICAgIGRpbWVuc2lvbnNMZW5ndGggPSAwLFxuXHQgICAgICAgICAgICAgICAgZGltZW5zaW9uc0hvbGRlciA9IHZvaWQgMCxcblx0ICAgICAgICAgICAgICAgIG1lYXN1cmVzSG9sZGVyID0gdm9pZCAwLFxuXHQgICAgICAgICAgICAgICAgc2VsZiA9IHRoaXM7XG5cdCAgICAgICAgICAgIC8vIGxldCBlbmRcblx0ICAgICAgICAgICAgcGxhY2VIb2xkZXIgPSBwbGFjZUhvbGRlclsxXTtcblx0ICAgICAgICAgICAgLy8gT21pdHRpbmcgbGFzdCBkaW1lbnNpb25cblx0ICAgICAgICAgICAgZGltZW5zaW9ucyA9IGRpbWVuc2lvbnMuc2xpY2UoMCwgZGltZW5zaW9ucy5sZW5ndGggLSAxKTtcblx0ICAgICAgICAgICAgZGltZW5zaW9uc0xlbmd0aCA9IGRpbWVuc2lvbnMubGVuZ3RoO1xuXHQgICAgICAgICAgICAvLyBTZXR0aW5nIHVwIGRpbWVuc2lvbiBob2xkZXJcblx0ICAgICAgICAgICAgZGltZW5zaW9uc0hvbGRlciA9IHBsYWNlSG9sZGVyLnNsaWNlKDAsIGRpbWVuc2lvbnNMZW5ndGgpO1xuXHQgICAgICAgICAgICAvLyBTZXR0aW5nIHVwIG1lYXN1cmVzIGhvbGRlclxuXHQgICAgICAgICAgICAvLyBPbmUgc2hpZnQgZm9yIGJsYW5rIGJveFxuXHQgICAgICAgICAgICBtZWFzdXJlc0hvbGRlciA9IHBsYWNlSG9sZGVyLnNsaWNlKGRpbWVuc2lvbnNMZW5ndGggKyAxLCBkaW1lbnNpb25zTGVuZ3RoICsgbWVhc3VyZXNMZW5ndGggKyAxKTtcblx0ICAgICAgICAgICAgc2V0dXBMaXN0ZW5lcihkaW1lbnNpb25zSG9sZGVyLCBkaW1lbnNpb25zLCBkaW1lbnNpb25zTGVuZ3RoLCB0aGlzLmRpbWVuc2lvbnMpO1xuXHQgICAgICAgICAgICBzZXR1cExpc3RlbmVyKG1lYXN1cmVzSG9sZGVyLCBtZWFzdXJlcywgbWVhc3VyZXNMZW5ndGgsIHRoaXMubWVhc3VyZXMpO1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBzZXR1cExpc3RlbmVyKGhvbGRlciwgYXJyLCBhcnJMZW4sIGdsb2JhbEFycikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGxpbWl0TGVmdCA9IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgbGltaXRSaWdodCA9IDAsXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGFyckxlbiAtIDEsXG5cdCAgICAgICAgICAgICAgICAgICAgbG4gPSBNYXRoLmxvZzI7XG5cdFxuXHQgICAgICAgICAgICAgICAgaWYgKGhvbGRlclswXSkge1xuXHQgICAgICAgICAgICAgICAgICAgIGxpbWl0TGVmdCA9IHBhcnNlSW50KGhvbGRlclswXS5ncmFwaGljcy5zdHlsZS5sZWZ0KTtcblx0ICAgICAgICAgICAgICAgICAgICBsaW1pdFJpZ2h0ID0gcGFyc2VJbnQoaG9sZGVyW2xhc3RdLmdyYXBoaWNzLnN0eWxlLmxlZnQpO1xuXHQgICAgICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSBob2xkZXJbaV0uZ3JhcGhpY3MsXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBob2xkZXJbaV0sXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5MZWZ0ID0gMCxcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5jZWxsVmFsdWUgPSBhcnJbaV07XG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5vcmlnTGVmdCA9IHBhcnNlSW50KGVsLnN0eWxlLmxlZnQpO1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0ucmVkWm9uZSA9IGl0ZW0ub3JpZ0xlZnQgKyBwYXJzZUludChlbC5zdHlsZS53aWR0aCkgLyAyO1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uaW5kZXggPSBpO1xuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0uYWRqdXN0ID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtLm9yaWdaID0gZWwuc3R5bGUuekluZGV4O1xuXHQgICAgICAgICAgICAgICAgICAgIHNlbGYuX3NldHVwRHJhZyhpdGVtLmdyYXBoaWNzLCBmdW5jdGlvbiBkcmFnU3RhcnQoZHgsIGR5KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5MZWZ0ID0gaXRlbS5vcmlnTGVmdCArIGR4ICsgaXRlbS5hZGp1c3Q7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuTGVmdCA8IGxpbWl0TGVmdCkge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IGxpbWl0TGVmdCAtIG5MZWZ0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSBsaW1pdExlZnQgLSBsbihkaWZmKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobkxlZnQgPiBsaW1pdFJpZ2h0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbkxlZnQgLSBsaW1pdFJpZ2h0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSBsaW1pdFJpZ2h0ICsgbG4oZGlmZik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IG5MZWZ0ICsgJ3B4Jztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gMTAwMDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWFuYWdlU2hpZnRpbmcoaXRlbS5pbmRleCwgZmFsc2UsIGhvbGRlcik7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1hbmFnZVNoaWZ0aW5nKGl0ZW0uaW5kZXgsIHRydWUsIGhvbGRlcik7XG5cdCAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZHJhZ0VuZCgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGZhbHNlLFxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiA9IDA7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uYWRqdXN0ID0gMDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gaXRlbS5vcmlnWjtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IGl0ZW0ub3JpZ0xlZnQgKyAncHgnO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaiA8IGFyckxlbjsgKytqKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsQXJyW2pdICE9PSBob2xkZXJbal0uY2VsbFZhbHVlKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsQXJyW2pdID0gaG9sZGVyW2pdLmNlbGxWYWx1ZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgPSB0cnVlO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmdsb2JhbERhdGEgPSBzZWxmLmJ1aWxkR2xvYmFsRGF0YSgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVuZGVyQ3Jvc3N0YWIoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgICAgICAgfTtcblx0XG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgX2xvb3AoaSk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIG1hbmFnZVNoaWZ0aW5nKGluZGV4LCBpc1JpZ2h0LCBob2xkZXIpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBzdGFjayA9IFtdLFxuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtID0gaG9sZGVyW2luZGV4XSxcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0UG9zID0gaXNSaWdodCA/IGluZGV4ICsgMSA6IGluZGV4IC0gMSxcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbSA9IGhvbGRlcltuZXh0UG9zXTtcblx0ICAgICAgICAgICAgICAgIC8vIFNhdmluZyBkYXRhIGZvciBsYXRlciB1c2Vcblx0ICAgICAgICAgICAgICAgIGlmIChuZXh0SXRlbSkge1xuXHQgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2goIWlzUmlnaHQgJiYgcGFyc2VJbnQoZHJhZ0l0ZW0uZ3JhcGhpY3Muc3R5bGUubGVmdCkgPCBuZXh0SXRlbS5yZWRab25lKTtcblx0ICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN0YWNrLnBvcCgpIHx8IGlzUmlnaHQgJiYgcGFyc2VJbnQoZHJhZ0l0ZW0uZ3JhcGhpY3Muc3R5bGUubGVmdCkgPiBuZXh0SXRlbS5vcmlnTGVmdCk7XG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLnBvcCgpKSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0ucmVkWm9uZSk7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0ub3JpZ0xlZnQpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKG5leHRJdGVtLmluZGV4KTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1JpZ2h0KSB7XG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5hZGp1c3QgKz0gcGFyc2VJbnQobmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUud2lkdGgpO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0l0ZW0uYWRqdXN0IC09IHBhcnNlSW50KG5leHRJdGVtLmdyYXBoaWNzLnN0eWxlLndpZHRoKTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5vcmlnTGVmdCA9IGRyYWdJdGVtLm9yaWdMZWZ0O1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5yZWRab25lID0gZHJhZ0l0ZW0ucmVkWm9uZTtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0uaW5kZXggPSBkcmFnSXRlbS5pbmRleDtcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUubGVmdCA9IG5leHRJdGVtLm9yaWdMZWZ0ICsgJ3B4Jztcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChob2xkZXJbbmV4dFBvc10pO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXJbbmV4dFBvc10gPSBob2xkZXJbaW5kZXhdO1xuXHQgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXJbaW5kZXhdID0gc3RhY2sucG9wKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICAgICAgLy8gU2V0dGluZyBuZXcgdmFsdWVzIGZvciBkcmFnaXRlbVxuXHQgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PT0gMykge1xuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLmluZGV4ID0gc3RhY2sucG9wKCk7XG5cdCAgICAgICAgICAgICAgICAgICAgZHJhZ0l0ZW0ub3JpZ0xlZnQgPSBzdGFjay5wb3AoKTtcblx0ICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5yZWRab25lID0gc3RhY2sucG9wKCk7XG5cdCAgICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9LCB7XG5cdCAgICAgICAga2V5OiAnX3NldHVwRHJhZycsXG5cdCAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cERyYWcoZWwsIGhhbmRsZXIsIGhhbmRsZXIyKSB7XG5cdCAgICAgICAgICAgIHZhciB4ID0gMCxcblx0ICAgICAgICAgICAgICAgIHkgPSAwO1xuXHQgICAgICAgICAgICBmdW5jdGlvbiBjdXN0b21IYW5kbGVyKGUpIHtcblx0ICAgICAgICAgICAgICAgIGhhbmRsZXIoZS5jbGllbnRYIC0geCwgZS5jbGllbnRZIC0geSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgICAgICAgIHggPSBlLmNsaWVudFg7XG5cdCAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZO1xuXHQgICAgICAgICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDAuODtcblx0ICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG5cdCAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgY3VzdG9tSGFuZGxlcik7XG5cdCAgICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlVXBIYW5kbGVyKTtcblx0ICAgICAgICAgICAgfSk7XG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIG1vdXNlVXBIYW5kbGVyKGUpIHtcblx0ICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuXHQgICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcblx0ICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjdXN0b21IYW5kbGVyKTtcblx0ICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuXHQgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoaGFuZGxlcjIsIDEwKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgIH0sIHtcblx0ICAgICAgICBrZXk6ICdmaWx0ZXJHZW4nLFxuXHQgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJHZW4oa2V5LCB2YWwpIHtcblx0ICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZGF0YVtrZXldID09PSB2YWw7XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgfVxuXHQgICAgfV0pO1xuXHRcblx0ICAgIHJldHVybiBDcm9zc3RhYkV4dDtcblx0fSgpO1xuXHRcblx0bW9kdWxlLmV4cG9ydHMgPSBDcm9zc3RhYkV4dDtcblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdG1vZHVsZS5leHBvcnRzID0gW3tcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMixcblx0ICAgICdQcm9maXQnOiAxMixcblx0ICAgICdWaXNpdG9ycyc6IDZcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDgsXG5cdCAgICAnUHJvZml0JzogMSxcblx0ICAgICdWaXNpdG9ycyc6IDEyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDcsXG5cdCAgICAnUHJvZml0JzogMyxcblx0ICAgICdWaXNpdG9ycyc6IDE4XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiAxMSxcblx0ICAgICdWaXNpdG9ycyc6IDE3XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogOCxcblx0ICAgICdQcm9maXQnOiA2LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTRcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDEsXG5cdCAgICAnUHJvZml0JzogMTEsXG5cdCAgICAnVmlzaXRvcnMnOiA1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDksXG5cdCAgICAnUHJvZml0JzogMTQsXG5cdCAgICAnVmlzaXRvcnMnOiAxM1xuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDUsXG5cdCAgICAnUHJvZml0JzogMTAsXG5cdCAgICAnVmlzaXRvcnMnOiAxNlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDYsXG5cdCAgICAnUHJvZml0JzogMyxcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDYsXG5cdCAgICAnUHJvZml0JzogNyxcblx0ICAgICdWaXNpdG9ycyc6IDhcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMixcblx0ICAgICdQcm9maXQnOiAxNCxcblx0ICAgICdWaXNpdG9ycyc6IDE2XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogMSxcblx0ICAgICdQcm9maXQnOiAyLFxuXHQgICAgJ1Zpc2l0b3JzJzogOVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdBdWcnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDMsXG5cdCAgICAnUHJvZml0JzogMSxcblx0ICAgICdWaXNpdG9ycyc6IDlcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDgsXG5cdCAgICAnUHJvZml0JzogNSxcblx0ICAgICdWaXNpdG9ycyc6IDhcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogOCxcblx0ICAgICdQcm9maXQnOiAxMixcblx0ICAgICdWaXNpdG9ycyc6IDE0XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNixcblx0ICAgICdQcm9maXQnOiAxMyxcblx0ICAgICdWaXNpdG9ycyc6IDE1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdW4nLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDMsXG5cdCAgICAnUHJvZml0JzogMSxcblx0ICAgICdWaXNpdG9ycyc6IDdcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA0LFxuXHQgICAgJ1Byb2ZpdCc6IDYsXG5cdCAgICAnVmlzaXRvcnMnOiAwXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAxMCxcblx0ICAgICdQcm9maXQnOiA0LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTBcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogOCxcblx0ICAgICdQcm9maXQnOiAwLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTdcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogOSxcblx0ICAgICdQcm9maXQnOiA5LFxuXHQgICAgJ1Zpc2l0b3JzJzogOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDksXG5cdCAgICAnUHJvZml0JzogOCxcblx0ICAgICdWaXNpdG9ycyc6IDE5XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA5LFxuXHQgICAgJ1Byb2ZpdCc6IDUsXG5cdCAgICAnVmlzaXRvcnMnOiAxN1xuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA1LFxuXHQgICAgJ1Byb2ZpdCc6IDAsXG5cdCAgICAnVmlzaXRvcnMnOiAxOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA4LFxuXHQgICAgJ1Byb2ZpdCc6IDMsXG5cdCAgICAnVmlzaXRvcnMnOiAxNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDUsXG5cdCAgICAnUHJvZml0JzogNixcblx0ICAgICdWaXNpdG9ycyc6IDE4XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAxLFxuXHQgICAgJ1Byb2ZpdCc6IDksXG5cdCAgICAnVmlzaXRvcnMnOiAxNlxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA1LFxuXHQgICAgJ1Byb2ZpdCc6IDQsXG5cdCAgICAnVmlzaXRvcnMnOiAxN1xuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAxMCxcblx0ICAgICdQcm9maXQnOiAxMSxcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDUsXG5cdCAgICAnVmlzaXRvcnMnOiAxNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdSaWNlJyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNSxcblx0ICAgICdQcm9maXQnOiAxNCxcblx0ICAgICdWaXNpdG9ycyc6IDRcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiA1LFxuXHQgICAgJ1Zpc2l0b3JzJzogMTJcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMyxcblx0ICAgICdQcm9maXQnOiA3LFxuXHQgICAgJ1Zpc2l0b3JzJzogNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDIsXG5cdCAgICAnUHJvZml0JzogNSxcblx0ICAgICdWaXNpdG9ycyc6IDEyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAxMCxcblx0ICAgICdQcm9maXQnOiA4LFxuXHQgICAgJ1Zpc2l0b3JzJzogNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDE0LFxuXHQgICAgJ1Zpc2l0b3JzJzogNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAyLFxuXHQgICAgJ1Byb2ZpdCc6IDAsXG5cdCAgICAnVmlzaXRvcnMnOiAxNFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDMsXG5cdCAgICAnUHJvZml0JzogMSxcblx0ICAgICdWaXNpdG9ycyc6IDEyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA1LFxuXHQgICAgJ1Byb2ZpdCc6IDgsXG5cdCAgICAnVmlzaXRvcnMnOiAxNFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiAxLFxuXHQgICAgJ1Byb2ZpdCc6IDEyLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTFcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogNSxcblx0ICAgICdQcm9maXQnOiAyLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTdcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiAxMCxcblx0ICAgICdQcm9maXQnOiAxMSxcblx0ICAgICdWaXNpdG9ycyc6IDBcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JpaGFyJyxcblx0ICAgICdZZWFyJzogJzIwMTYnLFxuXHQgICAgJ01vbnRoJzogJ0p1bHknLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDcsXG5cdCAgICAnUHJvZml0JzogMTQsXG5cdCAgICAnVmlzaXRvcnMnOiAxOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA0LFxuXHQgICAgJ1Byb2ZpdCc6IDEwLFxuXHQgICAgJ1Zpc2l0b3JzJzogOFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiAxLFxuXHQgICAgJ1Byb2ZpdCc6IDEyLFxuXHQgICAgJ1Zpc2l0b3JzJzogNVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmloYXInLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDksXG5cdCAgICAnUHJvZml0JzogNCxcblx0ICAgICdWaXNpdG9ycyc6IDE1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDksXG5cdCAgICAnVmlzaXRvcnMnOiAyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCaWhhcicsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDQsXG5cdCAgICAnUHJvZml0JzogMCxcblx0ICAgICdWaXNpdG9ycyc6IDEyXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA2LFxuXHQgICAgJ1Byb2ZpdCc6IDYsXG5cdCAgICAnVmlzaXRvcnMnOiAxMFxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0p1bicsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA0LFxuXHQgICAgJ1Byb2ZpdCc6IDUsXG5cdCAgICAnVmlzaXRvcnMnOiA0XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogOSxcblx0ICAgICdQcm9maXQnOiAzLFxuXHQgICAgJ1Zpc2l0b3JzJzogMThcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDYsXG5cdCAgICAnUHJvZml0JzogMTAsXG5cdCAgICAnVmlzaXRvcnMnOiAwXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNScsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDQsXG5cdCAgICAnVmlzaXRvcnMnOiAxM1xuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ0F1ZycsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiAyLFxuXHQgICAgJ1Byb2ZpdCc6IDEzLFxuXHQgICAgJ1Zpc2l0b3JzJzogMTBcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE1Jyxcblx0ICAgICdNb250aCc6ICdTZXB0Jyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA1LFxuXHQgICAgJ1Byb2ZpdCc6IDE0LFxuXHQgICAgJ1Zpc2l0b3JzJzogMVxuXHR9LCB7XG5cdCAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG5cdCAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcblx0ICAgICdZZWFyJzogJzIwMTUnLFxuXHQgICAgJ01vbnRoJzogJ1NlcHQnLFxuXHQgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcblx0ICAgICdTYWxlJzogNyxcblx0ICAgICdQcm9maXQnOiAxMSxcblx0ICAgICdWaXNpdG9ycyc6IDExXG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuXHQgICAgJ1NhbGUnOiA0LFxuXHQgICAgJ1Byb2ZpdCc6IDEsXG5cdCAgICAnVmlzaXRvcnMnOiA1XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVuJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDQsXG5cdCAgICAnUHJvZml0JzogOCxcblx0ICAgICdWaXNpdG9ycyc6IDE5XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnSnVseScsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMTAsXG5cdCAgICAnUHJvZml0JzogNixcblx0ICAgICdWaXNpdG9ycyc6IDJcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdKdWx5Jyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDcsXG5cdCAgICAnUHJvZml0JzogMCxcblx0ICAgICdWaXNpdG9ycyc6IDVcblx0fSwge1xuXHQgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuXHQgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG5cdCAgICAnWWVhcic6ICcyMDE2Jyxcblx0ICAgICdNb250aCc6ICdBdWcnLFxuXHQgICAgJ1F1YWxpdHknOiAnR29vZCcsXG5cdCAgICAnU2FsZSc6IDgsXG5cdCAgICAnUHJvZml0JzogOSxcblx0ICAgICdWaXNpdG9ycyc6IDE3XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnQXVnJyxcblx0ICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG5cdCAgICAnU2FsZSc6IDYsXG5cdCAgICAnUHJvZml0JzogNSxcblx0ICAgICdWaXNpdG9ycyc6IDE4XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdHb29kJyxcblx0ICAgICdTYWxlJzogMTAsXG5cdCAgICAnUHJvZml0JzogOSxcblx0ICAgICdWaXNpdG9ycyc6IDE0XG5cdH0sIHtcblx0ICAgICdQcm9kdWN0JzogJ1doZWF0Jyxcblx0ICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuXHQgICAgJ1llYXInOiAnMjAxNicsXG5cdCAgICAnTW9udGgnOiAnU2VwdCcsXG5cdCAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuXHQgICAgJ1NhbGUnOiA3LFxuXHQgICAgJ1Byb2ZpdCc6IDcsXG5cdCAgICAnVmlzaXRvcnMnOiAxNlxuXHR9XTtcblxuLyoqKi8gfVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGNyb3NzdGFiLWV4dC1lczUubWluLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGlkOiBtb2R1bGVJZCxcbiBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmxvYWRlZCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgM2U4YjA5NzYzZGE2MWJmZWQ5ZTQiLCJjb25zdCBDcm9zc3RhYkV4dCA9IHJlcXVpcmUoJy4vY3Jvc3N0YWJFeHQnKSxcbiAgICBkYXRhID0gcmVxdWlyZSgnLi9sYXJnZURhdGEnKTtcblxudmFyIGNvbmZpZyA9IHtcbiAgICBkaW1lbnNpb25zOiBbJ1Byb2R1Y3QnLCAnU3RhdGUnLCAnTW9udGgnXSxcbiAgICBtZWFzdXJlczogWydTYWxlJywgJ1Byb2ZpdCcsICdWaXNpdG9ycyddLFxuICAgIGNoYXJ0VHlwZTogJ2JhcjJkJyxcbiAgICBub0RhdGFNZXNzYWdlOiAnTm8gZGF0YSB0byBkaXNwbGF5LicsXG4gICAgY3Jvc3N0YWJDb250YWluZXI6ICdjcm9zc3RhYi1kaXYnLFxuICAgIGNlbGxXaWR0aDogMTUwLFxuICAgIGNlbGxIZWlnaHQ6IDgwLFxuICAgIHNob3dGaWx0ZXI6IHRydWUsXG4gICAgZHJhZ2dhYmxlSGVhZGVyczogdHJ1ZSxcbiAgICAvLyBhZ2dyZWdhdGlvbjogJ3N1bScsXG4gICAgY2hhcnRDb25maWc6IHtcbiAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICdzaG93Qm9yZGVyJzogJzAnLFxuICAgICAgICAgICAgJ3Nob3dWYWx1ZXMnOiAnMCcsXG4gICAgICAgICAgICAnZGl2TGluZUFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ251bWJlclByZWZpeCc6ICfigrknLFxuICAgICAgICAgICAgJ3JvdGF0ZVZhbHVlcyc6ICcxJyxcbiAgICAgICAgICAgICdyb2xsT3ZlckJhbmRDb2xvcic6ICcjYmFkYWYwJyxcbiAgICAgICAgICAgICdjb2x1bW5Ib3ZlckNvbG9yJzogJyMxYjgzY2MnLFxuICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogJzInLFxuICAgICAgICAgICAgJ2NoYXJ0VG9wTWFyZ2luJzogJzInLFxuICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6ICc1JyxcbiAgICAgICAgICAgICdjaGFydFJpZ2h0TWFyZ2luJzogJzcnLFxuICAgICAgICAgICAgJ3plcm9QbGFuZVRoaWNrbmVzcyc6ICcwJyxcbiAgICAgICAgICAgICd6ZXJvUGxhbmVBbHBoYSc6ICcxMDAnLFxuICAgICAgICAgICAgJ2JnQ29sb3InOiAnI0ZGRkZGRicsXG4gICAgICAgICAgICAnc2hvd1hBeGlzTGluZSc6ICcxJyxcbiAgICAgICAgICAgICdwbG90Qm9yZGVyQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAnc2hvd1hheGlzVmFsdWVzJzogJzAnLFxuICAgICAgICAgICAgJ3Nob3dZQXhpc1ZhbHVlcyc6ICcwJyxcbiAgICAgICAgICAgICdhbmltYXRpb24nOiAnMScsXG4gICAgICAgICAgICAndHJhbnNwb3NlQW5pbWF0aW9uJzogJzEnLFxuICAgICAgICAgICAgJ2FsdGVybmF0ZUhHcmlkQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAncGxvdENvbG9ySW5Ub29sdGlwJzogJzAnLFxuICAgICAgICAgICAgJ2NhbnZhc0JvcmRlckFscGhhJzogJzAnLFxuICAgICAgICAgICAgJ2FsdGVybmF0ZVZHcmlkQWxwaGEnOiAnMCcsXG4gICAgICAgICAgICAncGFsZXR0ZUNvbG9ycyc6ICcjNUI1QjVCJyxcbiAgICAgICAgICAgICd1c2VQbG90R3JhZGllbnRDb2xvcic6ICcwJyxcbiAgICAgICAgICAgICd2YWx1ZUZvbnRDb2xvcic6ICcjRkZGRkZGJyxcbiAgICAgICAgICAgICdjYW52YXNCb3JkZXJUaGlja25lc3MnOiAnMCcsXG4gICAgICAgICAgICAnZHJhd1RyZW5kUmVnaW9uJzogJzEnXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5pZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHtcbiAgICB3aW5kb3cuY3Jvc3N0YWIgPSBuZXcgQ3Jvc3N0YWJFeHQoZGF0YSwgY29uZmlnKTtcbiAgICB3aW5kb3cuY3Jvc3N0YWIucmVuZGVyQ3Jvc3N0YWIoKTtcbn0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBDcm9zc3RhYkV4dDtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIi8qKlxuICogUmVwcmVzZW50cyBhIGNyb3NzdGFiLlxuICovXG5jbGFzcyBDcm9zc3RhYkV4dCB7XG4gICAgY29uc3RydWN0b3IgKGRhdGEsIGNvbmZpZykge1xuICAgICAgICB0aGlzLmV2ZW50TGlzdCA9IHtcbiAgICAgICAgICAgICdtb2RlbFVwZGF0ZWQnOiAnbW9kZWx1cGRhdGVkJyxcbiAgICAgICAgICAgICdtb2RlbERlbGV0ZWQnOiAnbW9kZWxkZWxldGVkJyxcbiAgICAgICAgICAgICdtZXRhSW5mb1VwZGF0ZSc6ICdtZXRhaW5mb3VwZGF0ZWQnLFxuICAgICAgICAgICAgJ3Byb2Nlc3NvclVwZGF0ZWQnOiAncHJvY2Vzc29ydXBkYXRlZCcsXG4gICAgICAgICAgICAncHJvY2Vzc29yRGVsZXRlZCc6ICdwcm9jZXNzb3JkZWxldGVkJ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICBpZiAodHlwZW9mIE11bHRpQ2hhcnRpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMubWMgPSBuZXcgTXVsdGlDaGFydGluZygpO1xuICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUgPSB0aGlzLm1jLmNyZWF0ZURhdGFTdG9yZSgpO1xuICAgICAgICAgICAgdGhpcy5kYXRhU3RvcmUuc2V0RGF0YSh7IGRhdGFTb3VyY2U6IHRoaXMuZGF0YSB9KTtcbiAgICAgICAgICAgIHRoaXMudDEgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdGVzdDogZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3JlUGFyYW1zID0ge1xuICAgICAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2hhcnRUeXBlID0gY29uZmlnLmNoYXJ0VHlwZTtcbiAgICAgICAgdGhpcy5zaG93RmlsdGVyID0gY29uZmlnLnNob3dGaWx0ZXIgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuZHJhZ2dhYmxlSGVhZGVycyA9IGNvbmZpZy5kcmFnZ2FibGVIZWFkZXJzIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLmNoYXJ0Q29uZmlnID0gY29uZmlnLmNoYXJ0Q29uZmlnO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSBjb25maWcuZGltZW5zaW9ucztcbiAgICAgICAgdGhpcy5tZWFzdXJlcyA9IGNvbmZpZy5tZWFzdXJlcztcbiAgICAgICAgdGhpcy5tZWFzdXJlT25Sb3cgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhID0gdGhpcy5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgdGhpcy5jb2x1bW5LZXlBcnIgPSBbXTtcbiAgICAgICAgdGhpcy5jZWxsV2lkdGggPSBjb25maWcuY2VsbFdpZHRoIHx8IDIxMDtcbiAgICAgICAgdGhpcy5jZWxsSGVpZ2h0ID0gY29uZmlnLmNlbGxIZWlnaHQgfHwgMTEzO1xuICAgICAgICB0aGlzLmNyb3NzdGFiQ29udGFpbmVyID0gY29uZmlnLmNyb3NzdGFiQ29udGFpbmVyO1xuICAgICAgICB0aGlzLmhhc2ggPSB0aGlzLmdldEZpbHRlckhhc2hNYXAoKTtcbiAgICAgICAgdGhpcy5jb3VudCA9IDA7XG4gICAgICAgIHRoaXMuYWdncmVnYXRpb24gPSBjb25maWcuYWdncmVnYXRpb24gfHwgJ3N1bSc7XG4gICAgICAgIHRoaXMuYXhlcyA9IFtdO1xuICAgICAgICB0aGlzLm5vRGF0YU1lc3NhZ2UgPSBjb25maWcubm9EYXRhTWVzc2FnZTtcbiAgICAgICAgaWYgKHR5cGVvZiBGQ0RhdGFGaWx0ZXJFeHQgPT09ICdmdW5jdGlvbicgJiYgdGhpcy5zaG93RmlsdGVyKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVyQ29uZmlnID0ge307XG4gICAgICAgICAgICB0aGlzLmRhdGFGaWx0ZXJFeHQgPSBuZXcgRkNEYXRhRmlsdGVyRXh0KHRoaXMuZGF0YVN0b3JlLCBmaWx0ZXJDb25maWcsICdjb250cm9sLWJveCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgZ2xvYmFsIGRhdGEgZnJvbSB0aGUgZGF0YSBzdG9yZSBmb3IgaW50ZXJuYWwgdXNlLlxuICAgICAqL1xuICAgIGJ1aWxkR2xvYmFsRGF0YSAoKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGFTdG9yZS5nZXRLZXlzKCkpIHtcbiAgICAgICAgICAgIGxldCBmaWVsZHMgPSB0aGlzLmRhdGFTdG9yZS5nZXRLZXlzKCksXG4gICAgICAgICAgICAgICAgZ2xvYmFsRGF0YSA9IHt9O1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gZmllbGRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBnbG9iYWxEYXRhW2ZpZWxkc1tpXV0gPSB0aGlzLmRhdGFTdG9yZS5nZXRVbmlxdWVWYWx1ZXMoZmllbGRzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxEYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUm93ICh0YWJsZSwgZGF0YSwgcm93T3JkZXIsIGN1cnJlbnRJbmRleCwgZmlsdGVyZWREYXRhU3RvcmUpIHtcbiAgICAgICAgdmFyIHJvd3NwYW4gPSAwLFxuICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSByb3dPcmRlcltjdXJyZW50SW5kZXhdLFxuICAgICAgICAgICAgZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XSxcbiAgICAgICAgICAgIGksIGwgPSBmaWVsZFZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgICByb3dFbGVtZW50LFxuICAgICAgICAgICAgaGFzRnVydGhlckRlcHRoID0gY3VycmVudEluZGV4IDwgKHJvd09yZGVyLmxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSxcbiAgICAgICAgICAgIGNvbExlbmd0aCA9IHRoaXMuY29sdW1uS2V5QXJyLmxlbmd0aCxcbiAgICAgICAgICAgIGh0bWxSZWYsXG4gICAgICAgICAgICBtaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgIG1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIG1pbm1heE9iaiA9IHt9O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGxldCBjbGFzc1N0ciA9ICcnO1xuICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gZmllbGRWYWx1ZXNbaV07XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKHRoaXMuY2VsbEhlaWdodCAtIDEwKSAvIDIpICsgJ3B4JztcbiAgICAgICAgICAgIGNsYXNzU3RyICs9ICdyb3ctZGltZW5zaW9ucycgK1xuICAgICAgICAgICAgICAgICcgJyArIHRoaXMuZGltZW5zaW9uc1tjdXJyZW50SW5kZXhdLnRvTG93ZXJDYXNlKCkgK1xuICAgICAgICAgICAgICAgICcgJyArIGZpZWxkVmFsdWVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICAvLyBpZiAoY3VycmVudEluZGV4ID4gMCkge1xuICAgICAgICAgICAgLy8gICAgIGh0bWxSZWYuY2xhc3NMaXN0LmFkZCh0aGlzLmRpbWVuc2lvbnNbY3VycmVudEluZGV4IC0gMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaHRtbFJlZik7XG4gICAgICAgICAgICB0aGlzLmNvcm5lcldpZHRoID0gZmllbGRWYWx1ZXNbaV0ubGVuZ3RoICogMTA7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgcm93RWxlbWVudCA9IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5jb3JuZXJXaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1LFxuICAgICAgICAgICAgICAgIHJvd3NwYW46IDEsXG4gICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICBodG1sOiBodG1sUmVmLm91dGVySFRNTCxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzU3RyXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZmlsdGVyZWREYXRhSGFzaEtleSA9IGZpbHRlcmVkRGF0YVN0b3JlICsgZmllbGRWYWx1ZXNbaV0gKyAnfCc7XG4gICAgICAgICAgICBpZiAoaSkge1xuICAgICAgICAgICAgICAgIHRhYmxlLnB1c2goW3Jvd0VsZW1lbnRdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChyb3dFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoYXNGdXJ0aGVyRGVwdGgpIHtcbiAgICAgICAgICAgICAgICByb3dFbGVtZW50LnJvd3NwYW4gPSB0aGlzLmNyZWF0ZVJvdyh0YWJsZSwgZGF0YSwgcm93T3JkZXIsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJbmRleCArIDEsIGZpbHRlcmVkRGF0YUhhc2hLZXkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNhdGVnb3JpZXMgPSB0aGlzLmdsb2JhbERhdGFbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV07XG4gICAgICAgICAgICAgICAgICAgIHRhYmxlW3RhYmxlLmxlbmd0aCAtIDFdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd5LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzSG9yaXpvbnRhbCc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0VG9wTWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydEJvdHRvbU1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZVBhZGRpbmcnOiAwLjVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NhdGVnb3JpZXMnOiBjYXRlZ29yaWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3ktYXhpcy1jaGFydCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYXhpcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xMZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDZWxsT2JqID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNlbGxIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0hhc2g6IGZpbHRlcmVkRGF0YUhhc2hLZXksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xIYXNoOiB0aGlzLmNvbHVtbktleUFycltqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNoYXJ0OiB0aGlzLmdldENoYXJ0T2JqKGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuY29sdW1uS2V5QXJyW2pdKVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2NoYXJ0LWNlbGwgJyArIChqICsgMSlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IGNvbExlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0Q2VsbE9iai5jbGFzc05hbWUgPSAnY2hhcnQtY2VsbCBsYXN0LWNvbCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGFibGVbdGFibGUubGVuZ3RoIC0gMV0ucHVzaChjaGFydENlbGxPYmopO1xuICAgICAgICAgICAgICAgICAgICBtaW5tYXhPYmogPSB0aGlzLmdldENoYXJ0T2JqKGZpbHRlcmVkRGF0YUhhc2hLZXksIHRoaXMuY29sdW1uS2V5QXJyW2pdKVswXTtcbiAgICAgICAgICAgICAgICAgICAgbWF4ID0gKHBhcnNlSW50KG1pbm1heE9iai5tYXgpID4gbWF4KSA/IG1pbm1heE9iai5tYXggOiBtYXg7XG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IChwYXJzZUludChtaW5tYXhPYmoubWluKSA8IG1pbikgPyBtaW5tYXhPYmoubWluIDogbWluO1xuICAgICAgICAgICAgICAgICAgICBjaGFydENlbGxPYmoubWF4ID0gbWF4O1xuICAgICAgICAgICAgICAgICAgICBjaGFydENlbGxPYmoubWluID0gbWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvd3NwYW4gKz0gcm93RWxlbWVudC5yb3dzcGFuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByb3dzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbCAodGFibGUsIGRhdGEsIG1lYXN1cmVPcmRlcikge1xuICAgICAgICB2YXIgY29sc3BhbiA9IDAsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgbCA9IHRoaXMubWVhc3VyZXMubGVuZ3RoLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGNvbEVsZW1lbnQsXG4gICAgICAgICAgICBodG1sUmVmLFxuICAgICAgICAgICAgaGVhZGVyRGl2LFxuICAgICAgICAgICAgZHJhZ0RpdixcbiAgICAgICAgICAgIGhhbmRsZVNwYW47XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGw7IGkgKz0gMSkge1xuICAgICAgICAgICAgbGV0IGNsYXNzU3RyID0gJycsXG4gICAgICAgICAgICAgICAgZmllbGRDb21wb25lbnQgPSBtZWFzdXJlT3JkZXJbaV07XG4gICAgICAgICAgICAgICAgLy8gZmllbGRWYWx1ZXMgPSBkYXRhW2ZpZWxkQ29tcG9uZW50XTtcbiAgICAgICAgICAgIGhlYWRlckRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXG4gICAgICAgICAgICBkcmFnRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBkcmFnRGl2LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAnbWVhc3VyZS1kcmFnLWhhbmRsZScpO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5oZWlnaHQgPSAnNXB4JztcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUucGFkZGluZ1RvcCA9ICczcHgnO1xuICAgICAgICAgICAgZHJhZ0Rpdi5zdHlsZS5wYWRkaW5nQm90dG9tID0gJzFweCc7XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgMjU7IGorKykge1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5tYXJnaW5MZWZ0ID0gJzFweCc7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS5mb250U2l6ZSA9ICczcHgnO1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUubGluZUhlaWdodCA9ICcxJztcbiAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAndG9wJztcbiAgICAgICAgICAgICAgICBkcmFnRGl2LmFwcGVuZENoaWxkKGhhbmRsZVNwYW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSBmaWVsZENvbXBvbmVudDtcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICBodG1sUmVmLnN0eWxlLm1hcmdpblRvcCA9ICc1cHgnO1xuICAgICAgICAgICAgLy8gaHRtbFJlZi5zdHlsZS5tYXJnaW5Ub3AgPSAoKDMwICogdGhpcy5tZWFzdXJlcy5sZW5ndGggLSAxNSkgLyAyKSArICdweCc7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuXG4gICAgICAgICAgICBjbGFzc1N0ciArPSAnY29sdW1uLW1lYXN1cmVzICcgKyB0aGlzLm1lYXN1cmVzW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5jb3JuZXJIZWlnaHQgPSBodG1sUmVmLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaHRtbFJlZik7XG5cbiAgICAgICAgICAgIGhlYWRlckRpdi5hcHBlbmRDaGlsZChkcmFnRGl2KTtcbiAgICAgICAgICAgIGhlYWRlckRpdi5hcHBlbmRDaGlsZChodG1sUmVmKTtcbiAgICAgICAgICAgIGNvbEVsZW1lbnQgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2VsbFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGhlYWRlckRpdi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uS2V5QXJyLnB1c2godGhpcy5tZWFzdXJlc1tpXSk7XG4gICAgICAgICAgICB0YWJsZVswXS5wdXNoKGNvbEVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xzcGFuO1xuICAgIH1cblxuICAgIGNyZWF0ZVJvd0RpbUhlYWRpbmcgKHRhYmxlLCBjb2xPcmRlckxlbmd0aCkge1xuICAgICAgICB2YXIgY29ybmVyQ2VsbEFyciA9IFtdLFxuICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaHRtbFJlZixcbiAgICAgICAgICAgIGNsYXNzU3RyID0gJycsXG4gICAgICAgICAgICBoZWFkZXJEaXYsXG4gICAgICAgICAgICBkcmFnRGl2LFxuICAgICAgICAgICAgaGFuZGxlU3BhbjtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgaGVhZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBoZWFkZXJEaXYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cbiAgICAgICAgICAgIGRyYWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGRyYWdEaXYuc2V0QXR0cmlidXRlKCdjbGFzcycsICdkaW1lbnNpb24tZHJhZy1oYW5kbGUnKTtcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUuaGVpZ2h0ID0gJzVweCc7XG4gICAgICAgICAgICBkcmFnRGl2LnN0eWxlLnBhZGRpbmdUb3AgPSAnM3B4JztcbiAgICAgICAgICAgIGRyYWdEaXYuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICcxcHgnO1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IDI1OyBqKyspIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUubWFyZ2luTGVmdCA9ICcxcHgnO1xuICAgICAgICAgICAgICAgIGhhbmRsZVNwYW4uc3R5bGUuZm9udFNpemUgPSAnM3B4JztcbiAgICAgICAgICAgICAgICBoYW5kbGVTcGFuLnN0eWxlLmxpbmVIZWlnaHQgPSAnMSc7XG4gICAgICAgICAgICAgICAgaGFuZGxlU3Bhbi5zdHlsZS52ZXJ0aWNhbEFsaWduID0gJ3RvcCc7XG4gICAgICAgICAgICAgICAgZHJhZ0Rpdi5hcHBlbmRDaGlsZChoYW5kbGVTcGFuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaHRtbFJlZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICAgICAgICAgIGh0bWxSZWYuaW5uZXJIVE1MID0gdGhpcy5kaW1lbnNpb25zW2ldWzBdLnRvVXBwZXJDYXNlKCkgKyB0aGlzLmRpbWVuc2lvbnNbaV0uc3Vic3RyKDEpO1xuICAgICAgICAgICAgaHRtbFJlZi5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUubWFyZ2luVG9wID0gJzVweCc7XG4gICAgICAgICAgICBjbGFzc1N0ciA9ICdjb3JuZXItY2VsbCAnICsgdGhpcy5kaW1lbnNpb25zW2ldLnRvTG93ZXJDYXNlKCkgKyAnIG5vLXNlbGVjdCc7XG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xhc3NTdHIgKz0gJyBkcmFnZ2FibGUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGRyYWdEaXYpO1xuICAgICAgICAgICAgaGVhZGVyRGl2LmFwcGVuZENoaWxkKGh0bWxSZWYpO1xuICAgICAgICAgICAgY29ybmVyQ2VsbEFyci5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogdGhpcy5kaW1lbnNpb25zW2ldLmxlbmd0aCAqIDEwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzUsXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGh0bWw6IGhlYWRlckRpdi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc1N0clxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcm5lckNlbGxBcnI7XG4gICAgfVxuXG4gICAgY3JlYXRlQ29sRGltSGVhZGluZyAodGFibGUsIGluZGV4KSB7XG4gICAgICAgIHZhciBpID0gaW5kZXgsXG4gICAgICAgICAgICBodG1sUmVmO1xuICAgICAgICBmb3IgKDsgaSA8IHRhYmxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBodG1sUmVmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgICAgICAgaHRtbFJlZi5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgICAgIGh0bWxSZWYuc3R5bGUudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgICAgICB0YWJsZVtpXS5wdXNoKHtcbiAgICAgICAgICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAzNSxcbiAgICAgICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgaHRtbDogaHRtbFJlZi5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYXhpcy1oZWFkZXItY2VsbCdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICBjcmVhdGVDYXB0aW9uICh0YWJsZSwgbWF4TGVuZ3RoKSB7XG4gICAgICAgIHRhYmxlLnVuc2hpZnQoW3tcbiAgICAgICAgICAgIGhlaWdodDogNTAsXG4gICAgICAgICAgICByb3dzcGFuOiAxLFxuICAgICAgICAgICAgY29sc3BhbjogbWF4TGVuZ3RoLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2FwdGlvbi1jaGFydCcsXG4gICAgICAgICAgICBjaGFydDogdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAnY2FwdGlvbicsXG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgJ2RhdGFGb3JtYXQnOiAnanNvbicsXG4gICAgICAgICAgICAgICAgJ2NvbmZpZyc6IHtcbiAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NhcHRpb24nOiAnU2FsZSBvZiBDZXJlYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3N1YmNhcHRpb24nOiAnQWNyb3NzIFN0YXRlcywgQWNyb3NzIFllYXJzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAnMCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1dKTtcbiAgICAgICAgcmV0dXJuIHRhYmxlO1xuICAgIH1cblxuICAgIGNyZWF0ZUNyb3NzdGFiICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgb2JqID0gdGhpcy5nbG9iYWxEYXRhLFxuICAgICAgICAgICAgcm93T3JkZXIgPSB0aGlzLmRpbWVuc2lvbnMuZmlsdGVyKGZ1bmN0aW9uICh2YWwsIGksIGFycikge1xuICAgICAgICAgICAgICAgIGlmICh2YWwgIT09IGFyclthcnIubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjb2xPcmRlciA9IHRoaXMubWVhc3VyZXMuZmlsdGVyKGZ1bmN0aW9uICh2YWwsIGksIGFycikge1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLm1lYXN1cmVPblJvdykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsICE9PSBhcnJbYXJyLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGFibGUgPSBbXSxcbiAgICAgICAgICAgIHhBeGlzUm93ID0gW10sXG4gICAgICAgICAgICBpID0gMCxcbiAgICAgICAgICAgIG1heExlbmd0aCA9IDA7XG4gICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgIHRhYmxlLnB1c2godGhpcy5jcmVhdGVSb3dEaW1IZWFkaW5nKHRhYmxlLCBjb2xPcmRlci5sZW5ndGgpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuY3JlYXRlQ29sKHRhYmxlLCBvYmosIGNvbE9yZGVyLCAwLCAnJyk7XG4gICAgICAgICAgICB0YWJsZSA9IHRoaXMuY3JlYXRlQ29sRGltSGVhZGluZyh0YWJsZSwgMCk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbCh0YWJsZSwgb2JqLCB0aGlzLm1lYXN1cmVzKTtcbiAgICAgICAgICAgIHRhYmxlLnB1c2goW10pO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVSb3codGFibGUsIG9iaiwgcm93T3JkZXIsIDAsICcnKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0YWJsZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG1heExlbmd0aCA9IChtYXhMZW5ndGggPCB0YWJsZVtpXS5sZW5ndGgpID8gdGFibGVbaV0ubGVuZ3RoIDogbWF4TGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAzMCxcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnYmxhbmstY2VsbCdcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXh0cmEgY2VsbCBmb3IgeSBheGlzLiBFc3NlbnRpYWxseSBZIGF4aXMgZm9vdGVyLlxuICAgICAgICAgICAgeEF4aXNSb3cucHVzaCh7XG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICBjb2xzcGFuOiAxLFxuICAgICAgICAgICAgICAgIGhlaWdodDogMzAsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDQwLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2F4aXMtZm9vdGVyLWNlbGwnXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heExlbmd0aCAtIHRoaXMuZGltZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yaWVzID0gdGhpcy5nbG9iYWxEYXRhW3RoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV1dO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoYXJ0VHlwZSA9PT0gJ2JhcjJkJykge1xuICAgICAgICAgICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpc0hvcml6b250YWwnOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4QXhpc1Jvdy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDIwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHNwYW46IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICd4LWF4aXMtY2hhcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMubWMuY2hhcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2F4aXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhRm9ybWF0JzogJ2pzb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb25maWcnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0TGVmdE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRMZWZ0TWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0UmlnaHRNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWVQYWRkaW5nJzogMC41XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjYXRlZ29yaWVzJzogY2F0ZWdvcmllc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGFibGUucHVzaCh4QXhpc1Jvdyk7XG4gICAgICAgICAgICB0YWJsZSA9IHRoaXMuY3JlYXRlQ2FwdGlvbih0YWJsZSwgbWF4TGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uS2V5QXJyID0gW107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YWJsZS5wdXNoKFt7XG4gICAgICAgICAgICAgICAgaHRtbDogJzxwIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyXCI+JyArIHRoaXMubm9EYXRhTWVzc2FnZSArICc8L3A+JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDUwLFxuICAgICAgICAgICAgICAgIGNvbHNwYW46IHRoaXMuZGltZW5zaW9ucy5sZW5ndGggKiB0aGlzLm1lYXN1cmVzLmxlbmd0aFxuICAgICAgICAgICAgfV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG5cbiAgICByb3dEaW1SZW9yZGVyIChzdWJqZWN0LCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9ICcnLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGRpbWVuc2lvbnMgPSB0aGlzLmRpbWVuc2lvbnM7XG4gICAgICAgIGlmICh0aGlzLm1lYXN1cmVPblJvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgZGltZW5zaW9ucy5zcGxpY2UoZGltZW5zaW9ucy5sZW5ndGggLSAxLCAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGltZW5zaW9ucy5pbmRleE9mKE1hdGgubWF4KHN1YmplY3QsIHRhcmdldCkpID49IGRpbWVuc2lvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3dyb25nIGluZGV4JztcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0ID4gdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBkaW1lbnNpb25zW3N1YmplY3RdO1xuICAgICAgICAgICAgZm9yIChpID0gc3ViamVjdCAtIDE7IGkgPj0gdGFyZ2V0OyBpLS0pIHtcbiAgICAgICAgICAgICAgICBkaW1lbnNpb25zW2kgKyAxXSA9IGRpbWVuc2lvbnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaW1lbnNpb25zW3RhcmdldF0gPSBidWZmZXI7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViamVjdCA8IHRhcmdldCkge1xuICAgICAgICAgICAgYnVmZmVyID0gZGltZW5zaW9uc1tzdWJqZWN0XTtcbiAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgKyAxOyBpIDw9IHRhcmdldDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGltZW5zaW9uc1tpIC0gMV0gPSBkaW1lbnNpb25zW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGltZW5zaW9uc1t0YXJnZXRdID0gYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKTtcbiAgICB9XG5cbiAgICBjb2xEaW1SZW9yZGVyIChzdWJqZWN0LCB0YXJnZXQpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9ICcnLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIG1lYXN1cmVzID0gdGhpcy5tZWFzdXJlcztcbiAgICAgICAgaWYgKHRoaXMubWVhc3VyZU9uUm93ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWVhc3VyZXMuc3BsaWNlKG1lYXN1cmVzLmxlbmd0aCAtIDEsIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZWFzdXJlcy5pbmRleE9mKE1hdGgubWF4KHN1YmplY3QsIHRhcmdldCkpID49IG1lYXN1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuICd3cm9uZyBpbmRleCc7XG4gICAgICAgIH0gZWxzZSBpZiAoc3ViamVjdCA+IHRhcmdldCkge1xuICAgICAgICAgICAgYnVmZmVyID0gbWVhc3VyZXNbc3ViamVjdF07XG4gICAgICAgICAgICBmb3IgKGkgPSBzdWJqZWN0IC0gMTsgaSA+PSB0YXJnZXQ7IGktLSkge1xuICAgICAgICAgICAgICAgIG1lYXN1cmVzW2kgKyAxXSA9IG1lYXN1cmVzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVhc3VyZXNbdGFyZ2V0XSA9IGJ1ZmZlcjtcbiAgICAgICAgfSBlbHNlIGlmIChzdWJqZWN0IDwgdGFyZ2V0KSB7XG4gICAgICAgICAgICBidWZmZXIgPSBtZWFzdXJlc1tzdWJqZWN0XTtcbiAgICAgICAgICAgIGZvciAoaSA9IHN1YmplY3QgKyAxOyBpIDw9IHRhcmdldDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWVhc3VyZXNbaSAtIDFdID0gbWVhc3VyZXNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZWFzdXJlc1t0YXJnZXRdID0gYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3JlYXRlQ3Jvc3N0YWIoKTtcbiAgICB9XG5cbiAgICBtZXJnZURpbWVuc2lvbnMgKCkge1xuICAgICAgICBsZXQgZGltZW5zaW9ucyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuZGltZW5zaW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGRpbWVuc2lvbnMucHVzaCh0aGlzLmRpbWVuc2lvbnNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5tZWFzdXJlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGRpbWVuc2lvbnMucHVzaCh0aGlzLm1lYXN1cmVzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGltZW5zaW9ucztcbiAgICB9XG5cbiAgICBjcmVhdGVGaWx0ZXJzICgpIHtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSBbXSxcbiAgICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgICAgaWkgPSB0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIGogPSAwLFxuICAgICAgICAgICAgamogPSAwLFxuICAgICAgICAgICAgbWF0Y2hlZFZhbHVlcztcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbWF0Y2hlZFZhbHVlcyA9IHRoaXMuZ2xvYmFsRGF0YVt0aGlzLmRpbWVuc2lvbnNbaV1dO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSBtYXRjaGVkVmFsdWVzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHRoaXMuZmlsdGVyR2VuKHRoaXMuZGltZW5zaW9uc1tpXSwgbWF0Y2hlZFZhbHVlc1tqXS50b1N0cmluZygpKSxcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyVmFsOiBtYXRjaGVkVmFsdWVzW2pdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbHRlcnM7XG4gICAgfVxuXG4gICAgY3JlYXRlRGF0YUNvbWJvcyAoKSB7XG4gICAgICAgIGxldCByID0gW10sXG4gICAgICAgICAgICBnbG9iYWxBcnJheSA9IHRoaXMubWFrZUdsb2JhbEFycmF5KCksXG4gICAgICAgICAgICBtYXggPSBnbG9iYWxBcnJheS5sZW5ndGggLSAxO1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlY3Vyc2UgKGFyciwgaSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGwgPSBnbG9iYWxBcnJheVtpXS5sZW5ndGg7IGogPCBsOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGFyci5zbGljZSgwKTtcbiAgICAgICAgICAgICAgICBhLnB1c2goZ2xvYmFsQXJyYXlbaV1bal0pO1xuICAgICAgICAgICAgICAgIGlmIChpID09PSBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgci5wdXNoKGEpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlY3Vyc2UoYSwgaSArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZWN1cnNlKFtdLCAwKTtcbiAgICAgICAgcmV0dXJuIHI7XG4gICAgfVxuXG4gICAgbWFrZUdsb2JhbEFycmF5ICgpIHtcbiAgICAgICAgbGV0IHRlbXBPYmogPSB7fSxcbiAgICAgICAgICAgIHRlbXBBcnIgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBrZXkgaW4gdGhpcy5nbG9iYWxEYXRhKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nbG9iYWxEYXRhLmhhc093blByb3BlcnR5KGtleSkgJiYga2V5ICE9PSB0aGlzLm1lYXN1cmUpIHtcbiAgICAgICAgICAgICAgICB0ZW1wT2JqW2tleV0gPSB0aGlzLmdsb2JhbERhdGFba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0ZW1wQXJyID0gT2JqZWN0LmtleXModGVtcE9iaikubWFwKGtleSA9PiB0ZW1wT2JqW2tleV0pO1xuICAgICAgICByZXR1cm4gdGVtcEFycjtcbiAgICB9XG5cbiAgICBnZXRGaWx0ZXJIYXNoTWFwICgpIHtcbiAgICAgICAgbGV0IGZpbHRlcnMgPSB0aGlzLmNyZWF0ZUZpbHRlcnMoKSxcbiAgICAgICAgICAgIGRhdGFDb21ib3MgPSB0aGlzLmNyZWF0ZURhdGFDb21ib3MoKSxcbiAgICAgICAgICAgIGhhc2hNYXAgPSB7fTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGRhdGFDb21ib3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZGF0YUNvbWJvID0gZGF0YUNvbWJvc1tpXSxcbiAgICAgICAgICAgICAgICBrZXkgPSAnJyxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgbGVuID0gZGF0YUNvbWJvLmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDAsIGxlbmd0aCA9IGZpbHRlcnMubGVuZ3RoOyBrIDwgbGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbHRlclZhbCA9IGZpbHRlcnNba10uZmlsdGVyVmFsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YUNvbWJvW2pdID09PSBmaWx0ZXJWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IGRhdGFDb21ib1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9ICd8JyArIGRhdGFDb21ib1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2goZmlsdGVyc1trXS5maWx0ZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGFzaE1hcFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhhc2hNYXA7XG4gICAgfVxuXG4gICAgcmVuZGVyQ3Jvc3N0YWIgKCkge1xuICAgICAgICBsZXQgdDIgPSBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICAgICAgICAgIGdsb2JhbE1heCA9IC1JbmZpbml0eSxcbiAgICAgICAgICAgIGdsb2JhbE1pbiA9IEluZmluaXR5LFxuICAgICAgICAgICAgeUF4aXM7XG4gICAgICAgIHRoaXMuY3Jvc3N0YWIgPSB0aGlzLmNyZWF0ZUNyb3NzdGFiKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvd0xhc3RDaGFydCA9IHRoaXMuY3Jvc3N0YWJbaV1bdGhpcy5jcm9zc3RhYltpXS5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGlmIChyb3dMYXN0Q2hhcnQubWF4IHx8IHJvd0xhc3RDaGFydC5taW4pIHtcbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWF4IDwgcm93TGFzdENoYXJ0Lm1heCkge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxNYXggPSByb3dMYXN0Q2hhcnQubWF4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWluID4gcm93TGFzdENoYXJ0Lm1pbikge1xuICAgICAgICAgICAgICAgICAgICBnbG9iYWxNaW4gPSByb3dMYXN0Q2hhcnQubWluO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldLFxuICAgICAgICAgICAgICAgIHJvd0F4aXM7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjcm9zc3RhYkVsZW1lbnQgPSByb3dbal07XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzdGFiRWxlbWVudC5jaGFydCAmJiBjcm9zc3RhYkVsZW1lbnQuY2hhcnQuY29uZi50eXBlID09PSAnYXhpcycpIHtcbiAgICAgICAgICAgICAgICAgICAgcm93QXhpcyA9IGNyb3NzdGFiRWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0F4aXMuY2hhcnQuY29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGF4aXNDaGFydCA9IHJvd0F4aXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gYXhpc0NoYXJ0LmNvbmY7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY29uZmlnLmNoYXJ0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhTWluJzogZ2xvYmFsTWluLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1heCc6IGdsb2JhbE1heCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVydGhpY2tuZXNzJzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRCb3R0b21NYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0Qm90dG9tTWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFRvcE1hcmdpbic6IHRoaXMuY2hhcnRDb25maWcuY2hhcnQuY2hhcnRUb3BNYXJnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGFydFR5cGUgPT09ICdiYXIyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcuY29uZmlnLmNoYXJ0ID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1pbic6IGdsb2JhbE1pbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2F4aXNUeXBlJzogJ3knLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1heCc6IGdsb2JhbE1heCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydExlZnRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0TGVmdE1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0UmlnaHRNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0UmlnaHRNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpc0hvcml6b250YWwnOiAxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNDaGFydCA9IHRoaXMubWMuY2hhcnQoY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0F4aXMuY2hhcnQgPSBheGlzQ2hhcnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jcmVhdGVNdWx0aUNoYXJ0KHRoaXMuY3Jvc3N0YWIpO1xuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY3Jvc3N0YWJFbGVtZW50ID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmICgheUF4aXMgJiYgY3Jvc3N0YWJFbGVtZW50LmNoYXJ0ICYmXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydC5jb25mLmNvbmZpZy5jaGFydC5heGlzVHlwZSA9PT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgICAgIHlBeGlzID0gY3Jvc3N0YWJFbGVtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY3Jvc3N0YWJFbGVtZW50ID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmICh5QXhpcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNyb3NzdGFiRWxlbWVudC5oYXNPd25Qcm9wZXJ0eSgnaHRtbCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhY3Jvc3N0YWJFbGVtZW50Lmhhc093blByb3BlcnR5KCdjaGFydCcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jbGFzc05hbWUgIT09ICdheGlzLWZvb3Rlci1jZWxsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNoYXJ0ID0geUF4aXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnRJbnN0YW5jZSA9IGNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSBjaGFydEluc3RhbmNlLmdldExpbWl0cygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbWl0ID0gbGltaXRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heExpbWl0ID0gbGltaXRzWzFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0T2JqID0gdGhpcy5nZXRDaGFydE9iaihjcm9zc3RhYkVsZW1lbnQucm93SGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNvbEhhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbkxpbWl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhMaW1pdClbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2hhcnQgPSBjaGFydE9iajtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jdFBlcmYgKz0gKHBlcmZvcm1hbmNlLm5vdygpIC0gdDIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHQyID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3JlYXRlTXVsdGlDaGFydCh0aGlzLmNyb3NzdGFiKTtcbiAgICAgICAgdGhpcy5kYXRhU3RvcmUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmV2ZW50TGlzdC5tb2RlbFVwZGF0ZWQsIChlLCBkKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEgPSB0aGlzLmJ1aWxkR2xvYmFsRGF0YSgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVDcm9zc3RhYigpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3ZlcmluJywgKGV2dCwgZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcm93ID0gdGhpcy5jcm9zc3RhYltpXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dbal0uY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyb3dbal0uY2hhcnQuY29uZi50eXBlID09PSAnY2FwdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93W2pdLmNoYXJ0LmNvbmYudHlwZSA9PT0gJ2F4aXMnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEFkYXB0ZXIgPSByb3dbal0uY2hhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeSA9IHRoaXMuZGltZW5zaW9uc1t0aGlzLmRpbWVuc2lvbnMubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeVZhbCA9IGRhdGEuZGF0YVtjYXRlZ29yeV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxBZGFwdGVyLmhpZ2hsaWdodChjYXRlZ29yeVZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5tYy5hZGRFdmVudExpc3RlbmVyKCdob3Zlcm91dCcsIChldnQsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcm93Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dbal0uY2hhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJvd1tqXS5jaGFydC5jb25mLnR5cGUgPT09ICdjYXB0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1tqXS5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEFkYXB0ZXIgPSByb3dbal0uY2hhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEFkYXB0ZXIuaGlnaGxpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZUNyb3NzdGFiICgpIHtcbiAgICAgICAgbGV0IGZpbHRlcmVkQ3Jvc3N0YWIgPSB0aGlzLmNyZWF0ZUNyb3NzdGFiKCksXG4gICAgICAgICAgICBpLCBpaSxcbiAgICAgICAgICAgIGosIGpqLFxuICAgICAgICAgICAgb2xkQ2hhcnRzID0gW10sXG4gICAgICAgICAgICBnbG9iYWxNYXggPSAtSW5maW5pdHksXG4gICAgICAgICAgICBnbG9iYWxNaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgIGF4aXNMaW1pdHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSB0aGlzLmNyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSB0aGlzLmNyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmIChjZWxsLmNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydENvbmYgPSBjZWxsLmNoYXJ0LmdldENvbmYoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJ0Q29uZi50eXBlICE9PSAnY2FwdGlvbicgJiYgY2hhcnRDb25mLnR5cGUgIT09ICdheGlzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkQ2hhcnRzLnB1c2goY2VsbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGZpbHRlcmVkQ3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IGZpbHRlcmVkQ3Jvc3N0YWJbaV07XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSByb3dbal07XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwucm93SGFzaCAmJiBjZWxsLmNvbEhhc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG9sZENoYXJ0ID0gdGhpcy5nZXRPbGRDaGFydChvbGRDaGFydHMsIGNlbGwucm93SGFzaCwgY2VsbC5jb2xIYXNoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0cyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW9sZENoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRPYmogPSB0aGlzLmdldENoYXJ0T2JqKGNlbGwucm93SGFzaCwgY2VsbC5jb2xIYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZENoYXJ0ID0gY2hhcnRPYmpbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMgPSBjaGFydE9ialswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjZWxsLmNoYXJ0ID0gb2xkQ2hhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhsaW1pdHMpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5tYXggPSBsaW1pdHMubWF4O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5taW4gPSBsaW1pdHMubWluO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBmaWx0ZXJlZENyb3NzdGFiLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgIGxldCByb3cgPSBmaWx0ZXJlZENyb3NzdGFiW2ldO1xuICAgICAgICAgICAgZm9yIChqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjZWxsID0gcm93W2pdO1xuICAgICAgICAgICAgICAgIGlmIChjZWxsLm1heCB8fCBjZWxsLm1pbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2xvYmFsTWF4IDwgY2VsbC5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbE1heCA9IGNlbGwubWF4O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxNaW4gPiBjZWxsLm1pbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsTWluID0gY2VsbC5taW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGZpbHRlcmVkQ3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IGZpbHRlcmVkQ3Jvc3N0YWJbaV07XG4gICAgICAgICAgICBmb3IgKGogPSAwLCBqaiA9IHJvdy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSByb3dbal07XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuY2hhcnQgJiYgY2VsbC5jaGFydC5jb25mLnR5cGUgPT09ICdheGlzJykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcm93QXhpcyA9IGNlbGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3dBeGlzLmNoYXJ0LmNvbmYuY29uZmlnLmNoYXJ0LmF4aXNUeXBlID09PSAneScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBheGlzQ2hhcnQgPSByb3dBeGlzLmNoYXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IGF4aXNDaGFydC5jb25mO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmNvbmZpZy5jaGFydCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF0YU1pbic6IGdsb2JhbE1pbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYXhpc1R5cGUnOiAneScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNYXgnOiBnbG9iYWxNYXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcnRoaWNrbmVzcyc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NoYXJ0Qm90dG9tTWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydEJvdHRvbU1hcmdpbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRUb3BNYXJnaW4nOiB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LmNoYXJ0VG9wTWFyZ2luXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnRUeXBlID09PSAnYmFyMmQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLmNvbmZpZy5jaGFydCA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNaW4nOiBnbG9iYWxNaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdheGlzVHlwZSc6ICd5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGFNYXgnOiBnbG9iYWxNYXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdib3JkZXJ0aGlja25lc3MnOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2hhcnRMZWZ0TWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydExlZnRNYXJnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGFydFJpZ2h0TWFyZ2luJzogdGhpcy5jaGFydENvbmZpZy5jaGFydC5jaGFydFJpZ2h0TWFyZ2luLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaXNIb3Jpem9udGFsJzogMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzQ2hhcnQgPSB0aGlzLm1jLmNoYXJ0KGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByb3dBeGlzLmNoYXJ0ID0gYXhpc0NoYXJ0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jcm9zc3RhYiA9IGZpbHRlcmVkQ3Jvc3N0YWI7XG4gICAgICAgIHRoaXMuY3JlYXRlTXVsdGlDaGFydCgpO1xuICAgICAgICBheGlzTGltaXRzID0gdGhpcy5nZXRZQXhpc0xpbWl0cygpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHRoaXMuY3Jvc3N0YWIubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJvdyA9IHRoaXMuY3Jvc3N0YWJbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgamogPSByb3cubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgICAgIGxldCBjcm9zc3RhYkVsZW1lbnQgPSByb3dbal07XG4gICAgICAgICAgICAgICAgaWYgKCFjcm9zc3RhYkVsZW1lbnQuaGFzT3duUHJvcGVydHkoJ2h0bWwnKSAmJlxuICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY2xhc3NOYW1lICE9PSAnYmxhbmstY2VsbCcgJiZcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNsYXNzTmFtZSAhPT0gJ2F4aXMtZm9vdGVyLWNlbGwnICYmXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydC5nZXRDb25mKCkudHlwZSAhPT0gJ2NhcHRpb24nICYmXG4gICAgICAgICAgICAgICAgICAgIGNyb3NzdGFiRWxlbWVudC5jaGFydC5nZXRDb25mKCkudHlwZSAhPT0gJ2F4aXMnKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFydE9iaiA9IHRoaXMuZ2V0Q2hhcnRPYmooY3Jvc3N0YWJFbGVtZW50LnJvd0hhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc3RhYkVsZW1lbnQuY29sSGFzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXNMaW1pdHNbMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBheGlzTGltaXRzWzFdKVsxXTtcbiAgICAgICAgICAgICAgICAgICAgY3Jvc3N0YWJFbGVtZW50LmNoYXJ0LnVwZGF0ZShjaGFydE9iai5nZXRDb25mKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFlBeGlzTGltaXRzICgpIHtcbiAgICAgICAgbGV0IGksIGlpLFxuICAgICAgICAgICAgaiwgamo7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gdGhpcy5jcm9zc3RhYi5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgcm93ID0gdGhpcy5jcm9zc3RhYltpXTtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGpqID0gcm93Lmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgY2VsbCA9IHJvd1tqXTtcbiAgICAgICAgICAgICAgICBpZiAoY2VsbC5jaGFydCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY2hhcnRDb25mID0gY2VsbC5jaGFydC5nZXRDb25mKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFydENvbmYudHlwZSA9PT0gJ2F4aXMnICYmIGNoYXJ0Q29uZi5jb25maWcuY2hhcnQuYXhpc1R5cGUgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjZWxsLmNoYXJ0LmdldENoYXJ0SW5zdGFuY2UoKS5nZXRMaW1pdHMoKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRPbGRDaGFydCAob2xkQ2hhcnRzLCByb3dIYXNoLCBjb2xIYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBvbGRDaGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmIChvbGRDaGFydHNbaV0ucm93SGFzaCA9PT0gcm93SGFzaCAmJiBvbGRDaGFydHNbaV0uY29sSGFzaCA9PT0gY29sSGFzaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvbGRDaGFydHNbaV0uY2hhcnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVNdWx0aUNoYXJ0ICgpIHtcbiAgICAgICAgaWYgKHRoaXMubXVsdGljaGFydE9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QgPSB0aGlzLm1jLmNyZWF0ZU1hdHJpeCh0aGlzLmNyb3NzdGFiQ29udGFpbmVyLCB0aGlzLmNyb3NzdGFiKTtcbiAgICAgICAgICAgIHdpbmRvdy5jdFBlcmYgPSBwZXJmb3JtYW5jZS5ub3coKSAtIHRoaXMudDE7XG4gICAgICAgICAgICB0aGlzLm11bHRpY2hhcnRPYmplY3QuZHJhdygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tdWx0aWNoYXJ0T2JqZWN0LnVwZGF0ZSh0aGlzLmNyb3NzdGFiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5kcmFnZ2FibGVIZWFkZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmRyYWdMaXN0ZW5lcih0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm11bHRpY2hhcnRPYmplY3QucGxhY2VIb2xkZXI7XG4gICAgfVxuXG4gICAgcGVybXV0ZUFyciAoYXJyKSB7XG4gICAgICAgIGxldCByZXN1bHRzID0gW107XG4gICAgICAgIGZ1bmN0aW9uIHBlcm11dGUgKGFyciwgbWVtKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudDtcbiAgICAgICAgICAgIG1lbSA9IG1lbSB8fCBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gYXJyLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0gYXJyLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoYXJyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gobWVtLmNvbmNhdChjdXJyZW50KS5qb2luKCd8JykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwZXJtdXRlKGFyci5zbGljZSgpLCBtZW0uY29uY2F0KGN1cnJlbnQpKTtcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGksIDAsIGN1cnJlbnRbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBlcm11dGVTdHJzID0gcGVybXV0ZShhcnIpO1xuICAgICAgICByZXR1cm4gcGVybXV0ZVN0cnMuam9pbignKiElXicpO1xuICAgIH1cblxuICAgIG1hdGNoSGFzaCAoZmlsdGVyU3RyLCBoYXNoKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBoYXNoKSB7XG4gICAgICAgICAgICBpZiAoaGFzaC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBrZXkuc3BsaXQoJ3wnKSxcbiAgICAgICAgICAgICAgICAgICAga2V5UGVybXV0YXRpb25zID0gdGhpcy5wZXJtdXRlQXJyKGtleXMpLnNwbGl0KCcqISVeJyk7XG4gICAgICAgICAgICAgICAgaWYgKGtleVBlcm11dGF0aW9ucy5pbmRleE9mKGZpbHRlclN0cikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlQZXJtdXRhdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRDaGFydE9iaiAocm93RmlsdGVyLCBjb2xGaWx0ZXIsIG1pbkxpbWl0LCBtYXhMaW1pdCkge1xuICAgICAgICBsZXQgZmlsdGVycyA9IFtdLFxuICAgICAgICAgICAgZmlsdGVyU3RyID0gJycsXG4gICAgICAgICAgICByb3dGaWx0ZXJzID0gcm93RmlsdGVyLnNwbGl0KCd8JyksXG4gICAgICAgICAgICBkYXRhUHJvY2Vzc29ycyA9IFtdLFxuICAgICAgICAgICAgZGF0YVByb2Nlc3NvciA9IHt9LFxuICAgICAgICAgICAgbWF0Y2hlZEhhc2hlcyA9IFtdLFxuICAgICAgICAgICAgLy8gZmlsdGVyZWRKU09OID0gW10sXG4gICAgICAgICAgICAvLyBtYXggPSAtSW5maW5pdHksXG4gICAgICAgICAgICAvLyBtaW4gPSBJbmZpbml0eSxcbiAgICAgICAgICAgIGZpbHRlcmVkRGF0YSA9IHt9LFxuICAgICAgICAgICAgLy8gYWRhcHRlciA9IHt9LFxuICAgICAgICAgICAgbGltaXRzID0ge30sXG4gICAgICAgICAgICBjaGFydCA9IHt9LFxuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IHRoaXMuZ2xvYmFsRGF0YVt0aGlzLmRpbWVuc2lvbnNbdGhpcy5kaW1lbnNpb25zLmxlbmd0aCAtIDFdXTtcblxuICAgICAgICByb3dGaWx0ZXJzLnB1c2guYXBwbHkocm93RmlsdGVycyk7XG4gICAgICAgIGZpbHRlcnMgPSByb3dGaWx0ZXJzLmZpbHRlcigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChhICE9PSAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBmaWx0ZXJTdHIgPSBmaWx0ZXJzLmpvaW4oJ3wnKTtcbiAgICAgICAgbWF0Y2hlZEhhc2hlcyA9IHRoaXMuaGFzaFt0aGlzLm1hdGNoSGFzaChmaWx0ZXJTdHIsIHRoaXMuaGFzaCldO1xuICAgICAgICBpZiAobWF0Y2hlZEhhc2hlcykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGlpID0gbWF0Y2hlZEhhc2hlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZGF0YVByb2Nlc3NvciA9IHRoaXMubWMuY3JlYXRlRGF0YVByb2Nlc3NvcigpO1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3IuZmlsdGVyKG1hdGNoZWRIYXNoZXNbaV0pO1xuICAgICAgICAgICAgICAgIGRhdGFQcm9jZXNzb3JzLnB1c2goZGF0YVByb2Nlc3Nvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWx0ZXJlZERhdGEgPSB0aGlzLmRhdGFTdG9yZS5nZXRDaGlsZE1vZGVsKGRhdGFQcm9jZXNzb3JzKTtcbiAgICAgICAgICAgIC8vIGZpbHRlcmVkSlNPTiA9IGZpbHRlcmVkRGF0YS5nZXRKU09OKCk7XG4gICAgICAgICAgICAvLyBmb3IgKGxldCBpID0gMCwgaWkgPSBmaWx0ZXJlZEpTT04ubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgLy8gICAgIGlmIChmaWx0ZXJlZEpTT05baV1bY29sRmlsdGVyXSA+IG1heCkge1xuICAgICAgICAgICAgLy8gICAgICAgICBtYXggPSBmaWx0ZXJlZEpTT05baV1bY29sRmlsdGVyXTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgaWYgKGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdIDwgbWluKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIG1pbiA9IGZpbHRlcmVkSlNPTltpXVtjb2xGaWx0ZXJdO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIGlmIChtaW5MaW1pdCAhPT0gdW5kZWZpbmVkICYmIG1heExpbWl0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LnlBeGlzTWluVmFsdWUgPSBtaW5MaW1pdDtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJ0Q29uZmlnLmNoYXJ0LnlBeGlzTWF4VmFsdWUgPSBtYXhMaW1pdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYXJ0ID0gdGhpcy5tYy5jaGFydCh7XG4gICAgICAgICAgICAgICAgZGF0YVNvdXJjZTogZmlsdGVyZWREYXRhLFxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMuY2hhcnRUeXBlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgICAgICAgICAgZGltZW5zaW9uOiBbdGhpcy5kaW1lbnNpb25zW3RoaXMuZGltZW5zaW9ucy5sZW5ndGggLSAxXV0sXG4gICAgICAgICAgICAgICAgbWVhc3VyZTogW2NvbEZpbHRlcl0sXG4gICAgICAgICAgICAgICAgc2VyaWVzVHlwZTogJ1NTJyxcbiAgICAgICAgICAgICAgICBhZ2dyZWdhdGVNb2RlOiB0aGlzLmFnZ3JlZ2F0aW9uLFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG4gICAgICAgICAgICAgICAgY29uZmlnOiB0aGlzLmNoYXJ0Q29uZmlnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbWl0cyA9IGNoYXJ0LmdldExpbWl0KCk7XG4gICAgICAgICAgICByZXR1cm4gW3tcbiAgICAgICAgICAgICAgICAnbWF4JzogbGltaXRzLm1heCxcbiAgICAgICAgICAgICAgICAnbWluJzogbGltaXRzLm1pblxuICAgICAgICAgICAgfSwgY2hhcnRdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHJhZ0xpc3RlbmVyIChwbGFjZUhvbGRlcikge1xuICAgICAgICAvLyBHZXR0aW5nIG9ubHkgbGFiZWxzXG4gICAgICAgIGxldCBvcmlnQ29uZmlnID0gdGhpcy5zdG9yZVBhcmFtcy5jb25maWcsXG4gICAgICAgICAgICBkaW1lbnNpb25zID0gb3JpZ0NvbmZpZy5kaW1lbnNpb25zIHx8IFtdLFxuICAgICAgICAgICAgbWVhc3VyZXMgPSBvcmlnQ29uZmlnLm1lYXN1cmVzIHx8IFtdLFxuICAgICAgICAgICAgbWVhc3VyZXNMZW5ndGggPSBtZWFzdXJlcy5sZW5ndGgsXG4gICAgICAgICAgICBkaW1lbnNpb25zTGVuZ3RoID0gMCxcbiAgICAgICAgICAgIGRpbWVuc2lvbnNIb2xkZXIsXG4gICAgICAgICAgICBtZWFzdXJlc0hvbGRlcixcbiAgICAgICAgICAgIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyBsZXQgZW5kXG4gICAgICAgIHBsYWNlSG9sZGVyID0gcGxhY2VIb2xkZXJbMV07XG4gICAgICAgIC8vIE9taXR0aW5nIGxhc3QgZGltZW5zaW9uXG4gICAgICAgIGRpbWVuc2lvbnMgPSBkaW1lbnNpb25zLnNsaWNlKDAsIGRpbWVuc2lvbnMubGVuZ3RoIC0gMSk7XG4gICAgICAgIGRpbWVuc2lvbnNMZW5ndGggPSBkaW1lbnNpb25zLmxlbmd0aDtcbiAgICAgICAgLy8gU2V0dGluZyB1cCBkaW1lbnNpb24gaG9sZGVyXG4gICAgICAgIGRpbWVuc2lvbnNIb2xkZXIgPSBwbGFjZUhvbGRlci5zbGljZSgwLCBkaW1lbnNpb25zTGVuZ3RoKTtcbiAgICAgICAgLy8gU2V0dGluZyB1cCBtZWFzdXJlcyBob2xkZXJcbiAgICAgICAgLy8gT25lIHNoaWZ0IGZvciBibGFuayBib3hcbiAgICAgICAgbWVhc3VyZXNIb2xkZXIgPSBwbGFjZUhvbGRlci5zbGljZShkaW1lbnNpb25zTGVuZ3RoICsgMSxcbiAgICAgICAgICAgIGRpbWVuc2lvbnNMZW5ndGggKyBtZWFzdXJlc0xlbmd0aCArIDEpO1xuICAgICAgICBzZXR1cExpc3RlbmVyKGRpbWVuc2lvbnNIb2xkZXIsIGRpbWVuc2lvbnMsIGRpbWVuc2lvbnNMZW5ndGgsIHRoaXMuZGltZW5zaW9ucyk7XG4gICAgICAgIHNldHVwTGlzdGVuZXIobWVhc3VyZXNIb2xkZXIsIG1lYXN1cmVzLCBtZWFzdXJlc0xlbmd0aCwgdGhpcy5tZWFzdXJlcyk7XG4gICAgICAgIGZ1bmN0aW9uIHNldHVwTGlzdGVuZXIgKGhvbGRlciwgYXJyLCBhcnJMZW4sIGdsb2JhbEFycikge1xuICAgICAgICAgICAgbGV0IGxpbWl0TGVmdCA9IDAsXG4gICAgICAgICAgICAgICAgbGltaXRSaWdodCA9IDAsXG4gICAgICAgICAgICAgICAgbGFzdCA9IGFyckxlbiAtIDEsXG4gICAgICAgICAgICAgICAgbG4gPSBNYXRoLmxvZzI7XG5cbiAgICAgICAgICAgIGlmIChob2xkZXJbMF0pIHtcbiAgICAgICAgICAgICAgICBsaW1pdExlZnQgPSBwYXJzZUludChob2xkZXJbMF0uZ3JhcGhpY3Muc3R5bGUubGVmdCk7XG4gICAgICAgICAgICAgICAgbGltaXRSaWdodCA9IHBhcnNlSW50KGhvbGRlcltsYXN0XS5ncmFwaGljcy5zdHlsZS5sZWZ0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGxldCBlbCA9IGhvbGRlcltpXS5ncmFwaGljcyxcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGhvbGRlcltpXSxcbiAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSAwLFxuICAgICAgICAgICAgICAgICAgICBkaWZmID0gMDtcbiAgICAgICAgICAgICAgICBpdGVtLmNlbGxWYWx1ZSA9IGFycltpXTtcbiAgICAgICAgICAgICAgICBpdGVtLm9yaWdMZWZ0ID0gcGFyc2VJbnQoZWwuc3R5bGUubGVmdCk7XG4gICAgICAgICAgICAgICAgaXRlbS5yZWRab25lID0gaXRlbS5vcmlnTGVmdCArIHBhcnNlSW50KGVsLnN0eWxlLndpZHRoKSAvIDI7XG4gICAgICAgICAgICAgICAgaXRlbS5pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgaXRlbS5hZGp1c3QgPSAwO1xuICAgICAgICAgICAgICAgIGl0ZW0ub3JpZ1ogPSBlbC5zdHlsZS56SW5kZXg7XG4gICAgICAgICAgICAgICAgc2VsZi5fc2V0dXBEcmFnKGl0ZW0uZ3JhcGhpY3MsIGZ1bmN0aW9uIGRyYWdTdGFydCAoZHgsIGR5KSB7XG4gICAgICAgICAgICAgICAgICAgIG5MZWZ0ID0gaXRlbS5vcmlnTGVmdCArIGR4ICsgaXRlbS5hZGp1c3Q7XG4gICAgICAgICAgICAgICAgICAgIGlmIChuTGVmdCA8IGxpbWl0TGVmdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlmZiA9IGxpbWl0TGVmdCAtIG5MZWZ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSBsaW1pdExlZnQgLSBsbihkaWZmKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobkxlZnQgPiBsaW1pdFJpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmID0gbkxlZnQgLSBsaW1pdFJpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbkxlZnQgPSBsaW1pdFJpZ2h0ICsgbG4oZGlmZik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IG5MZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gMTAwMDtcbiAgICAgICAgICAgICAgICAgICAgbWFuYWdlU2hpZnRpbmcoaXRlbS5pbmRleCwgZmFsc2UsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgIG1hbmFnZVNoaWZ0aW5nKGl0ZW0uaW5kZXgsIHRydWUsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZHJhZ0VuZCAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGFuZ2UgPSBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkanVzdCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLnpJbmRleCA9IGl0ZW0ub3JpZ1o7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmxlZnQgPSBpdGVtLm9yaWdMZWZ0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7IGogPCBhcnJMZW47ICsraikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdsb2JhbEFycltqXSAhPT0gaG9sZGVyW2pdLmNlbGxWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbEFycltqXSA9IGhvbGRlcltqXS5jZWxsVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5nbG9iYWxEYXRhID0gc2VsZi5idWlsZEdsb2JhbERhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbmRlckNyb3NzdGFiKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAxMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1hbmFnZVNoaWZ0aW5nIChpbmRleCwgaXNSaWdodCwgaG9sZGVyKSB7XG4gICAgICAgICAgICBsZXQgc3RhY2sgPSBbXSxcbiAgICAgICAgICAgICAgICBkcmFnSXRlbSA9IGhvbGRlcltpbmRleF0sXG4gICAgICAgICAgICAgICAgbmV4dFBvcyA9IGlzUmlnaHQgPyBpbmRleCArIDEgOiBpbmRleCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dEl0ZW0gPSBob2xkZXJbbmV4dFBvc107XG4gICAgICAgICAgICAvLyBTYXZpbmcgZGF0YSBmb3IgbGF0ZXIgdXNlXG4gICAgICAgICAgICBpZiAobmV4dEl0ZW0pIHtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKCFpc1JpZ2h0ICYmXG4gICAgICAgICAgICAgICAgICAgIChwYXJzZUludChkcmFnSXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0KSA8IG5leHRJdGVtLnJlZFpvbmUpKTtcbiAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHN0YWNrLnBvcCgpIHx8XG4gICAgICAgICAgICAgICAgICAgIChpc1JpZ2h0ICYmIHBhcnNlSW50KGRyYWdJdGVtLmdyYXBoaWNzLnN0eWxlLmxlZnQpID4gbmV4dEl0ZW0ub3JpZ0xlZnQpKTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2sucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5yZWRab25lKTtcbiAgICAgICAgICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0SXRlbS5vcmlnTGVmdCk7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2gobmV4dEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdJdGVtLmFkanVzdCArPSBwYXJzZUludChuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnSXRlbS5hZGp1c3QgLT0gcGFyc2VJbnQobmV4dEl0ZW0uZ3JhcGhpY3Muc3R5bGUud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLm9yaWdMZWZ0ID0gZHJhZ0l0ZW0ub3JpZ0xlZnQ7XG4gICAgICAgICAgICAgICAgICAgIG5leHRJdGVtLnJlZFpvbmUgPSBkcmFnSXRlbS5yZWRab25lO1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5pbmRleCA9IGRyYWdJdGVtLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBuZXh0SXRlbS5ncmFwaGljcy5zdHlsZS5sZWZ0ID0gbmV4dEl0ZW0ub3JpZ0xlZnQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKGhvbGRlcltuZXh0UG9zXSk7XG4gICAgICAgICAgICAgICAgICAgIGhvbGRlcltuZXh0UG9zXSA9IGhvbGRlcltpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIGhvbGRlcltpbmRleF0gPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBTZXR0aW5nIG5ldyB2YWx1ZXMgZm9yIGRyYWdpdGVtXG4gICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICAgICAgZHJhZ0l0ZW0uaW5kZXggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgICAgICBkcmFnSXRlbS5vcmlnTGVmdCA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgICAgIGRyYWdJdGVtLnJlZFpvbmUgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXR1cERyYWcgKGVsLCBoYW5kbGVyLCBoYW5kbGVyMikge1xuICAgICAgICBsZXQgeCA9IDAsXG4gICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgZnVuY3Rpb24gY3VzdG9tSGFuZGxlciAoZSkge1xuICAgICAgICAgICAgaGFuZGxlcihlLmNsaWVudFggLSB4LCBlLmNsaWVudFkgLSB5KTtcbiAgICAgICAgfVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgeCA9IGUuY2xpZW50WDtcbiAgICAgICAgICAgIHkgPSBlLmNsaWVudFk7XG4gICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMC44O1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjdXN0b21IYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gbW91c2VVcEhhbmRsZXIgKGUpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBjdXN0b21IYW5kbGVyKTtcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbW91c2VVcEhhbmRsZXIpO1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoaGFuZGxlcjIsIDEwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbHRlckdlbiAoa2V5LCB2YWwpIHtcbiAgICAgICAgcmV0dXJuIChkYXRhKSA9PiBkYXRhW2tleV0gPT09IHZhbDtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3Jvc3N0YWJFeHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY3Jvc3N0YWJFeHQuanMiLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDYsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDEzXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxMCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTZcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogNyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAxLFxuICAgICAgICAnUHJvZml0JzogMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogOVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogMSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDgsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiA4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogMTIsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiAxMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDMsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiA3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxMFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnUmljZScsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAwLFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogOCxcbiAgICAgICAgJ1Byb2ZpdCc6IDMsXG4gICAgICAgICdWaXNpdG9ycyc6IDE1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiA5LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1JpY2UnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdSaWNlJyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDUsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAzLFxuICAgICAgICAnUHJvZml0JzogNyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiAyLFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDgsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDcsXG4gICAgICAgICdQcm9maXQnOiAxNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMixcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDMsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDUsXG4gICAgICAgICdQcm9maXQnOiA4LFxuICAgICAgICAnVmlzaXRvcnMnOiAxNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogMSxcbiAgICAgICAgJ1Byb2ZpdCc6IDEyLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDIsXG4gICAgICAgICdWaXNpdG9ycyc6IDE3XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdW4nLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDEwLFxuICAgICAgICAnUHJvZml0JzogMTEsXG4gICAgICAgICdWaXNpdG9ycyc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogMTQsXG4gICAgICAgICdWaXNpdG9ycyc6IDE4XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JpaGFyJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDhcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0F1ZycsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDEsXG4gICAgICAgICdQcm9maXQnOiAxMixcbiAgICAgICAgJ1Zpc2l0b3JzJzogNVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnQXVnJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmloYXInLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMlxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCaWhhcicsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNCxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDEyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNixcbiAgICAgICAgJ1Byb2ZpdCc6IDYsXG4gICAgICAgICdWaXNpdG9ycyc6IDEwXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogNSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogNFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE1JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bHknLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA5LFxuICAgICAgICAnUHJvZml0JzogMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMThcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA2LFxuICAgICAgICAnUHJvZml0JzogMTAsXG4gICAgICAgICdWaXNpdG9ycyc6IDBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA3LFxuICAgICAgICAnUHJvZml0JzogNCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTNcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDIsXG4gICAgICAgICdQcm9maXQnOiAxMyxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNScsXG4gICAgICAgICdNb250aCc6ICdTZXB0JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogNSxcbiAgICAgICAgJ1Byb2ZpdCc6IDE0LFxuICAgICAgICAnVmlzaXRvcnMnOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTUnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDExLFxuICAgICAgICAnVmlzaXRvcnMnOiAxMVxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ0p1bicsXG4gICAgICAgICdRdWFsaXR5JzogJ0dvb2QnLFxuICAgICAgICAnU2FsZSc6IDQsXG4gICAgICAgICdQcm9maXQnOiAxLFxuICAgICAgICAnVmlzaXRvcnMnOiA1XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVuJyxcbiAgICAgICAgJ1F1YWxpdHknOiAnTWVkaXVtJyxcbiAgICAgICAgJ1NhbGUnOiA0LFxuICAgICAgICAnUHJvZml0JzogOCxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTlcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdKdWx5JyxcbiAgICAgICAgJ1F1YWxpdHknOiAnR29vZCcsXG4gICAgICAgICdTYWxlJzogMTAsXG4gICAgICAgICdQcm9maXQnOiA2LFxuICAgICAgICAnVmlzaXRvcnMnOiAyXG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnSnVseScsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDAsXG4gICAgICAgICdWaXNpdG9ycyc6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiA4LFxuICAgICAgICAnUHJvZml0JzogOSxcbiAgICAgICAgJ1Zpc2l0b3JzJzogMTdcbiAgICB9LFxuICAgIHtcbiAgICAgICAgJ1Byb2R1Y3QnOiAnV2hlYXQnLFxuICAgICAgICAnU3RhdGUnOiAnQmVuZ2FsJyxcbiAgICAgICAgJ1llYXInOiAnMjAxNicsXG4gICAgICAgICdNb250aCc6ICdBdWcnLFxuICAgICAgICAnUXVhbGl0eSc6ICdNZWRpdW0nLFxuICAgICAgICAnU2FsZSc6IDYsXG4gICAgICAgICdQcm9maXQnOiA1LFxuICAgICAgICAnVmlzaXRvcnMnOiAxOFxuICAgIH0sXG4gICAge1xuICAgICAgICAnUHJvZHVjdCc6ICdXaGVhdCcsXG4gICAgICAgICdTdGF0ZSc6ICdCZW5nYWwnLFxuICAgICAgICAnWWVhcic6ICcyMDE2JyxcbiAgICAgICAgJ01vbnRoJzogJ1NlcHQnLFxuICAgICAgICAnUXVhbGl0eSc6ICdHb29kJyxcbiAgICAgICAgJ1NhbGUnOiAxMCxcbiAgICAgICAgJ1Byb2ZpdCc6IDksXG4gICAgICAgICdWaXNpdG9ycyc6IDE0XG4gICAgfSxcbiAgICB7XG4gICAgICAgICdQcm9kdWN0JzogJ1doZWF0JyxcbiAgICAgICAgJ1N0YXRlJzogJ0JlbmdhbCcsXG4gICAgICAgICdZZWFyJzogJzIwMTYnLFxuICAgICAgICAnTW9udGgnOiAnU2VwdCcsXG4gICAgICAgICdRdWFsaXR5JzogJ01lZGl1bScsXG4gICAgICAgICdTYWxlJzogNyxcbiAgICAgICAgJ1Byb2ZpdCc6IDcsXG4gICAgICAgICdWaXNpdG9ycyc6IDE2XG4gICAgfVxuXTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9sYXJnZURhdGEuanMiXSwic291cmNlUm9vdCI6IiJ9